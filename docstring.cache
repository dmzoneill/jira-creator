{
    "/tmp/helper_docstring.py": [],
    "jira_creator/commands/cli_set_story_epic.py": [
        {
            "sha1": "748407397950474b6d2a8635d94a7ef480b96cd6",
            "docstring": "\"\"\"\nSet the epic for a story in Jira.\n\nArguments:\n- jira: An instance of the Jira client.\n- args: A namespace containing the following attributes:\n    - issue_key (str): The key of the story to update.\n    - epic_key (str): The key of the epic to set for the story.\n\nReturn:\n- bool: True if the epic was successfully set for the story.\n\nExceptions:\n- SetStoryEpicError: Raised when there is an error setting the epic for the story.\n\nSide Effects:\n- Prints a success message if the epic is set successfully.\n- Prints an error message if setting the epic fails.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "dfe911f5c6d00ab35b05485340c6e76dba7ebed8",
            "docstring": "\"\"\"\nSet the epic for a story in Jira.\n\nArguments:\n- jira: An instance of the Jira client.\n- args: A namespace containing the following attributes:\n  - issue_key (str): The key of the story to update.\n  - epic_key (str): The key of the epic to set for the story.\n\nReturn:\n- bool: True if the epic was successfully set for the story.\n\nExceptions:\n- SetStoryEpicError: Raised when there is an error setting the epic for the story.\n\nSide Effects:\n- Prints a success message if the epic is set successfully.\n- Prints an error message if setting the epic fails.\n\"\"\"",
            "last_accessed": 1745613436
        },
        {
            "sha1": "0305b8827e73f2c9b11aea9d66871ac2c138dd5e",
            "docstring": "\"\"\"\nSet the epic for a story in Jira.\n\nArguments:\n- jira: An instance of the Jira client.\n- args: A namespace containing the following attributes:\n  - issue_key (str): The key of the story to update.\n  - epic_key (str): The key of the epic to set for the story.\n\nReturn:\n- bool: True if the epic was successfully set for the story.\n\nExceptions:\n- SetStoryEpicError: Raised when there is an error setting the epic for the story.\n\nSide Effects:\n- Prints a success message if the epic is set successfully.\n- Prints an error message if setting the epic fails.\n\"\"\"",
            "last_accessed": 1745613436
        }
    ],
    "jira_creator/commands/cli_set_acceptance_criteria.py": [
        {
            "sha1": "0ebfcef35d3686c901413ea1c5e39988650950d9",
            "docstring": "\"\"\"\nSets acceptance criteria for a Jira issue.\n\nArguments:\n- jira (JIRA): A JIRA instance used to interact with Jira API.\n- args (Namespace): A namespace containing parsed arguments.\n- issue_key (str): The key of the Jira issue for which acceptance criteria will be set.\n- acceptance_criteria (str): The acceptance criteria to be set for the Jira issue.\n\nReturn:\n- bool: True if acceptance criteria were successfully set.\n\nExceptions:\n- SetAcceptanceCriteriaError: If an error occurs while setting acceptance criteria.\n\nSide Effects:\n- Modifies the acceptance criteria for the specified Jira issue.\n- Prints a success message if the acceptance criteria are set successfully.\n- Prints an error message if setting acceptance criteria fails.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "0f51ce249afaa955459da45bdb53b01a4b40b9a5",
            "docstring": "\"\"\"\nSets acceptance criteria for a Jira issue.\n\nArguments:\n- jira (JIRA): A JIRA instance used to interact with Jira API.\n- args (Namespace): A namespace containing parsed arguments.\n- issue_key (str): The key of the Jira issue for which acceptance criteria will be set.\n- acceptance_criteria (str): The acceptance criteria to be set for the Jira issue.\n\nReturn:\n- bool: True if acceptance criteria were successfully set.\n\nExceptions:\n- SetAcceptanceCriteriaError: If an error occurs while setting acceptance criteria.\n\nSide Effects:\n- Modifies the acceptance criteria for the specified Jira issue.\n- Prints a success message if the acceptance criteria are set successfully.\n- Prints an error message if setting acceptance criteria fails.\n\"\"\"",
            "last_accessed": 1745613440
        },
        {
            "sha1": "82e3deb606d413ae2b274055520bddee19c26cf5",
            "docstring": "\"\"\"\nSets acceptance criteria for a Jira issue.\n\nArguments:\n- jira (JIRA): A JIRA instance used to interact with Jira API.\n- args (Namespace): A namespace containing parsed arguments.\n- issue_key (str): The key of the Jira issue for which acceptance criteria will be set.\n- acceptance_criteria (str): The acceptance criteria to be set for the Jira issue.\n\nReturn:\n- bool: True if acceptance criteria were successfully set.\n\nExceptions:\n- SetAcceptanceCriteriaError: If an error occurs while setting acceptance criteria.\n\nSide Effects:\n- Modifies the acceptance criteria for the specified Jira issue.\n- Prints a success message if the acceptance criteria are set successfully.\n- Prints an error message if setting acceptance criteria fails.\n\"\"\"",
            "last_accessed": 1745613440
        }
    ],
    "jira_creator/commands/cli_view_user.py": [
        {
            "sha1": "1ba730f84d5064b2fcb387cb45a17dee8f218265",
            "docstring": "\"\"\"\nThis module provides a function to view user details using a Jira instance.\nIt retrieves user information based on the provided account ID and displays it in a sorted manner.\nIf an error occurs during the retrieval process, it catches and handles the GetUserError exception.\n\nThe function cli_view_user(jira, args) retrieves information about a specific user from Jira.\nIt takes two arguments:\n- jira (JiraClient): An instance of the JiraClient class used to interact with the Jira API.\n- args (dict): A dictionary containing the arguments needed to identify the user. It should include the\n'account_id' key representing the unique identifier of the user.\n\nThis function may raise exceptions if there are issues with retrieving the user information from Jira.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "568b75d392e62620b3a7e1ddfaa885032942023e",
            "docstring": "\"\"\"\nRetrieve information about a specific user from Jira.\n\nArguments:\n- jira (JiraClient): An instance of the JiraClient class used to interact with the Jira API.\n- args (dict): A dictionary containing the arguments needed to identify the user. It should include the\n  'account_id' key representing the unique identifier of the user.\n\nExceptions:\n- This function may raise exceptions if there are issues with retrieving the user information from Jira.\n\"\"\"",
            "last_accessed": 1745613440
        },
        {
            "sha1": "d97601aa7b877e165f4a2dd7c973f401ca72b77d",
            "docstring": "\"\"\"\nThis module provides a function to view user details using a Jira instance.\nIt retrieves user information based on the provided account ID and displays it in a sorted manner.\nIf an error occurs during the retrieval process, it catches and handles the GetUserError exception.\n\nThe function cli_view_user(jira, args) retrieves information about a specific user from Jira.\nIt takes two arguments:\n- jira (JiraClient): An instance of the JiraClient class used to interact with the Jira API.\n- args (dict): A dictionary containing the arguments needed to identify the user. It should include the\n'account_id' key representing the unique identifier of the user.\n\nThis function may raise exceptions if there are issues with retrieving the user information from Jira.\n\"\"\"",
            "last_accessed": 1745613440
        }
    ],
    "jira_creator/commands/cli_ai_helper.py": [
        {
            "sha1": "9a4c3acf13a6d2931bce854786fa129aa3e9a7f9",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) helper for interacting with an AI provider, specifically designed\nto work with Jira. It allows users to query the AI for assistance with Jira commands and execute them accordingly.\n\nKey Functions:\n- `get_cli_command_metadata()`: Retrieves metadata about available CLI commands and their arguments.\n- `call_function(client, function_name, args_dict)`: Invokes a specified function on the client with the provided\narguments.\n- `clean_ai_output(ai_output: str)`: Cleans and parses the AI's output, removing markdown and converting it to a Python\nobject.\n- `ask_ai_question(client, ai_provider, system_prompt, user_prompt, voice=False)`: Sends a question to the AI and\nprocesses the response, optionally providing voice feedback.\n- `cli_ai_helper(client, ai_provider, system_prompt, args)`: Main entry point for the CLI helper, orchestrating the\ncommand metadata retrieval and AI interaction.\n\nDependencies:\n- argparse: For parsing command-line arguments.\n- json: For handling JSON data.\n- os: For interacting with the operating system.\n- re: For regular expression operations.\n- gtts: For converting text to speech.\n\nExceptions:\n- AIHelperError: Custom exception raised for errors related to AI helper operations.\n\"\"\"",
            "last_accessed": 1745517466
        },
        {
            "sha1": "3c38ae25d5e42fd40b6cffe98b75ea61ce82ecb5",
            "docstring": "\"\"\"\nRetrieve the command metadata for the Jira Command Line Interface (CLI).\n\nThis function imports the JiraCLI class from the rh_jira module, retrieves the command metadata associated with it,\nand returns a dictionary containing information about the available commands, their arguments, and help descriptions.\n\nArgs:\ncli: The cli object used to interact with the AI service.\n\nReturns:\ndict: A dictionary where keys are command names and values are dictionaries containing information about the\ncommand, including help description and arguments.\n\"\"\"",
            "last_accessed": 1745517468
        },
        {
            "sha1": "2c001725e5f09f75150aef08519e8cb161bbbcf7",
            "docstring": "\"\"\"\nBuilds a fake argparse Namespace object using the provided arguments dictionary and assigns the given function name\nas the \"command\" attribute.\n\nArgs:\nclient: An object representing the client.\nfunction_name: A string specifying the name of the function to call.\nargs_dict: A dictionary containing arguments to be used for building the Namespace object.\n\nSide Effects:\nModifies the 'args' Namespace object by setting the 'command' attribute to the provided function name.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "9912d00a3ed6f19d379e6a06ce0576391cc347fc",
            "docstring": "\"\"\"\nRemove Markdown-style code block wrappers from the AI output.\n\nArguments:\n- ai_output (str): The AI output containing Markdown-style code block wrappers.\n\nReturn:\n- list: A list of cleaned strings without Markdown-style code block wrappers.\n\nExceptions:\n- ValueError: Raised if the cleaned string cannot be parsed into a JSON object.\n\"\"\"",
            "last_accessed": 1745517473
        },
        {
            "sha1": "713da45fa2a40314b932bf276c3bc77be08871f9",
            "docstring": "\"\"\"\nAsk AI a question and generate steps based on the provided prompts.\n\nArgs:\ncli: The cli object used to interact with the AI service.\nai_provider: The AI provider object that provides the AI capabilities.\nsystem_prompt: The prompt representing the system's context for the AI question.\nuser_prompt: The prompt representing the user's input for the AI question.\nvoice (bool, optional): A flag indicating whether the AI response should be in voice format. Defaults to False.\n\nSide Effects:\nModifies the ai_generated_steps variable based on the AI response.\n\nNote:\nThe clean_ai_output function is assumed to be defined elsewhere in the code.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "0e102b3b6656a5899f0569b9eb1068647ecb2882",
            "docstring": "\"\"\"\nRetrieve CLI command metadata using the 'get_cli_command_metadata' function.\n\nArguments:\n- cli (object): The cli object used to interact with the CLI.\n- ai_provider (object): The AI provider object responsible for processing AI-related tasks.\n- system_prompt (str): The system prompt displayed to the user.\n- args (list): List of arguments passed to the function.\n\nExceptions:\n- AIHelperError: Raised when there is an issue inspecting public methods of JiraCLI.\n\"\"\"",
            "last_accessed": 1745517482
        },
        {
            "sha1": "4fdb96138c9e41994394cc948b007857c33c4386",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) helper for interacting with an AI provider, specifically designed\nto work with Jira. It allows users to query the AI for assistance with Jira commands and execute them accordingly.\n\nKey Functions:\n- `get_cli_command_metadata()`: Retrieves metadata about available CLI commands and their arguments.\n- `call_function(client, function_name, args_dict)`: Invokes a specified function on the client with the provided\narguments.\n- `clean_ai_output(ai_output: str)`: Cleans and parses the AI's output, removing markdown and converting it to a Python\nobject.\n- `ask_ai_question(client, ai_provider, system_prompt, user_prompt, voice=False)`: Sends a question to the AI and\nprocesses the response, optionally providing voice feedback.\n- `cli_ai_helper(client, ai_provider, system_prompt, args)`: Main entry point for the CLI helper, orchestrating the\ncommand metadata retrieval and AI interaction.\n\nDependencies:\n- argparse: For parsing command-line arguments.\n- json: For handling JSON data.\n- os: For interacting with the operating system.\n- re: For regular expression operations.\n- gtts: For converting text to speech.\n\nExceptions:\n- AIHelperError: Custom exception raised for errors related to AI helper operations.\n\"\"\"",
            "last_accessed": 1745613440
        },
        {
            "sha1": "e7857a7f9fd186808ce3da231b0ab92cba14a6e5",
            "docstring": "\"\"\"\nRetrieve the command metadata for the Jira Command Line Interface (CLI).\n\nThis function imports the JiraCLI class from the rh_jira module, retrieves the command metadata associated with it,\nand returns a dictionary containing information about the available commands, their arguments, and help descriptions.\n\nArgs:\ncli: The cli object used to interact with the AI service.\n\nReturns:\ndict: A dictionary where keys are command names and values are dictionaries containing information about the\ncommand, including help description and arguments.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "d2f20d6cab27fff67299949cbabff210333ea2f0",
            "docstring": "\"\"\"\nRemove Markdown-style code block wrappers from the AI output.\n\nArguments:\n- ai_output (str): The AI output containing Markdown-style code block wrappers.\n\nReturn:\n- list: A list of cleaned strings without Markdown-style code block wrappers.\n\nExceptions:\n- ValueError: Raised if the cleaned string cannot be parsed into a JSON object.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "0fe9e4f3b9e0e15de86ca935cb762b1597b4e5b1",
            "docstring": "\"\"\"\nRetrieve CLI command metadata using the 'get_cli_command_metadata' function.\n\nArguments:\n- cli (object): The cli object used to interact with the CLI.\n- ai_provider (object): The AI provider object responsible for processing AI-related tasks.\n- system_prompt (str): The system prompt displayed to the user.\n- args (list): List of arguments passed to the function.\n\nExceptions:\n- AIHelperError: Raised when there is an issue inspecting public methods of JiraCLI.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "ca52f3414b323486e6c8c3dd1c2b9d10547dc0cf",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) helper for interacting with an AI provider, specifically designed\nto work with Jira. It allows users to query the AI for assistance with Jira commands and execute them accordingly.\n\nKey Functions:\n- `get_cli_command_metadata()`: Retrieves metadata about available CLI commands and their arguments.\n- `call_function(client, function_name, args_dict)`: Invokes a specified function on the client with the provided\narguments.\n- `clean_ai_output(ai_output: str)`: Cleans and parses the AI's output, removing markdown and converting it to a Python\nobject.\n- `ask_ai_question(client, ai_provider, system_prompt, user_prompt, voice=False)`: Sends a question to the AI and\nprocesses the response, optionally providing voice feedback.\n- `cli_ai_helper(client, ai_provider, system_prompt, args)`: Main entry point for the CLI helper, orchestrating the\ncommand metadata retrieval and AI interaction.\n\nDependencies:\n- argparse: For parsing command-line arguments.\n- json: For handling JSON data.\n- os: For interacting with the operating system.\n- re: For regular expression operations.\n- gtts: For converting text to speech.\n\nExceptions:\n- AIHelperError: Custom exception raised for errors related to AI helper operations.\n\"\"\"",
            "last_accessed": 1745613275
        }
    ],
    "jira_creator/commands/cli_block.py": [
        {
            "sha1": "cc8b387b4555e62cf20d65b27faab70c760cb8df",
            "docstring": "\"\"\"\nMarks a Jira issue as blocked.\n\nArguments:\n- jira (JIRA): An instance of the JIRA API client.\n- args (Namespace): A namespace containing the following attributes:\n    - issue_key (str): The key of the issue to be blocked.\n    - reason (str): The reason for blocking the issue.\n\nReturn:\n- bool: True if the issue was successfully marked as blocked.\n\nExceptions:\n- BlockError: Raised if there is an error while trying to mark the issue as blocked.\n\"\"\"",
            "last_accessed": 1745613276
        },
        {
            "sha1": "886135320870e44782f3ec20a9956a41f2ce1dde",
            "docstring": "\"\"\"\nMarks a Jira issue as blocked.\n\nArguments:\n- jira (JIRA): An instance of the JIRA API client.\n- args (Namespace): A namespace containing the following attributes:\n    - issue_key (str): The key of the issue to be blocked.\n    - reason (str): The reason for blocking the issue.\n\nReturn:\n- bool: True if the issue was successfully marked as blocked.\n\nExceptions:\n- BlockError: Raised if there is an error while trying to mark the issue as blocked.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "951058f456992b2062877ec39a611a333ae5c13d",
            "docstring": "\"\"\"\nMarks a Jira issue as blocked.\n\nArguments:\n- jira (JIRA): An instance of the JIRA API client.\n- args (Namespace): A namespace containing the following attributes:\n  - issue_key (str): The key of the issue to be blocked.\n  - reason (str): The reason for blocking the issue.\n\nReturn:\n- bool: True if the issue was successfully marked as blocked.\n\nExceptions:\n- BlockError: Raised if there is an error while trying to mark the issue as blocked.\n\"\"\"",
            "last_accessed": 1745613441
        }
    ],
    "jira_creator/commands/cli_set_status.py": [
        {
            "sha1": "51febed492d6ad689b920b5d7cb0375b929fee27",
            "docstring": "\"\"\"\nSet the status of a JIRA issue using the provided JIRA client and arguments.\n\nArguments:\n- jira (JIRA): A JIRA client object used to interact with the JIRA API.\n- args (Namespace): A namespace object containing the following attributes:\n    - issue_key (str): The key of the JIRA issue to update.\n    - status (str): The new status to set for the JIRA issue.\n\nReturn:\n- bool: True if the status is successfully set.\n\nExceptions:\n- SetStatusError: Raised when there is an error setting the status of the JIRA issue.\n\nSide Effects:\n- Prints a success message if the status is set successfully.\n- Prints an error message and raises a SetStatusError if there is a failure.\n\"\"\"",
            "last_accessed": 1745613276
        },
        {
            "sha1": "e738417468333bbb5aeacf420ea45320f3cce429",
            "docstring": "\"\"\"\nSet the status of a JIRA issue using the provided JIRA client and arguments.\n\nArguments:\n- jira (JIRA): A JIRA client object used to interact with the JIRA API.\n- args (Namespace): A namespace object containing the following attributes:\n    - issue_key (str): The key of the JIRA issue to update.\n    - status (str): The new status to set for the JIRA issue.\n\nReturn:\n- bool: True if the status is successfully set.\n\nExceptions:\n- SetStatusError: Raised when there is an error setting the status of the JIRA issue.\n\nSide Effects:\n- Prints a success message if the status is set successfully.\n- Prints an error message and raises a SetStatusError if there is a failure.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "9abadd7f11ad780b1ea4806e28373a47a840eaf6",
            "docstring": "\"\"\"\nSet the status of a JIRA issue using the provided JIRA client and arguments.\n\nArguments:\n- jira (JIRA): A JIRA client object used to interact with the JIRA API.\n- args (Namespace): A namespace object containing the following attributes:\n    - issue_key (str): The key of the JIRA issue to update.\n    - status (str): The new status to set for the JIRA issue.\n\nReturn:\n- bool: True if the status is successfully set.\n\nExceptions:\n- SetStatusError: Raised when there is an error setting the status of the JIRA issue.\n\nSide Effects:\n- Prints a success message if the status is set successfully.\n- Prints an error message and raises a SetStatusError if there is a failure.\n\"\"\"",
            "last_accessed": 1745613441
        }
    ],
    "jira_creator/commands/cli_unblock.py": [
        {
            "sha1": "65cfc79eed4705e721375ac44e310f065924ec72",
            "docstring": "\"\"\"\nUnblocks a Jira issue.\n\nArguments:\n- jira (JIRA): A JIRA instance used to interact with the Jira API.\n- args (Namespace): A namespace object containing parsed command-line arguments. It should have an 'issue_key'\n  attribute representing the key of the issue to be unblocked.\n\nReturn:\n- bool: True if the issue was successfully unblocked.\n\nExceptions:\n- UnBlockError: Raised if there was an error while trying to unblock the issue.\n\nSide Effects:\n- Prints a success message if the issue is unblocked successfully.\n- Prints an error message if there is a failure while unblocking the issue.\n\"\"\"",
            "last_accessed": 1745613276
        },
        {
            "sha1": "f106ca083524ab987319267655ea0d373a8c6106",
            "docstring": "\"\"\"\nUnblocks a Jira issue.\n\nArguments:\n- jira (JIRA): A JIRA instance used to interact with the Jira API.\n- args (Namespace): A namespace object containing parsed command-line arguments. It should have an 'issue_key'\n  attribute representing the key of the issue to be unblocked.\n\nReturn:\n- bool: True if the issue was successfully unblocked.\n\nExceptions:\n- UnBlockError: Raised if there was an error while trying to unblock the issue.\n\nSide Effects:\n- Prints a success message if the issue is unblocked successfully.\n- Prints an error message if there is a failure while unblocking the issue.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "c18c5cb94a104627b0a0046c3b79f9444eeb7170",
            "docstring": "\"\"\"\nUnblocks a Jira issue.\n\nArguments:\n- jira (JIRA): A JIRA instance used to interact with the Jira API.\n- args (Namespace): A namespace object containing parsed command-line arguments. It should have an 'issue_key'\nattribute representing the key of the issue to be unblocked.\n\nReturn:\n- bool: True if the issue was successfully unblocked.\n\nExceptions:\n- UnBlockError: Raised if there was an error while trying to unblock the issue.\n\nSide Effects:\n- Prints a success message if the issue is unblocked successfully.\n- Prints an error message if there is a failure while unblocking the issue.\n\"\"\"",
            "last_accessed": 1745613441
        }
    ],
    "jira_creator/commands/cli_talk.py": [
        {
            "sha1": "23d3dc6ff2001760517a818c68f976f5b5f439cd",
            "docstring": "\"\"\"\nThis module provides functionality for processing audio input and converting spoken digit words into numerical\nrepresentations, while also handling issue references in a specified format.\n\nKey features include:\n- A context manager to suppress standard error output.\n- Functions to clean up fuzzy digit words, convert digit words to numbers, and normalize issue references.\n- Audio processing capabilities using the VOSK speech recognition model.\n- Integration with a command-line interface (CLI) to interact with an AI system based on recognized speech.\n\nFunctions:\n- `suppress_stderr`: Context manager to suppress standard error output.\n- `fuzzy_digit_cleanup`: Corrects fuzzy digit words in the input text.\n- `word_digits_to_numbers`: Converts digit words to their numeric representations.\n- `combine_consecutive_digits`: Combines sequences of digit strings into a single string.\n- `normalize_issue_references`: Normalizes issue references in the text to a specified format.\n- `flush_queue`: Clears a queue of audio data.\n- `do_once`: Placeholder function that returns False.\n- `initialize_recognizer`: Initializes the VOSK recognizer model.\n- `process_text_and_communicate`: Normalizes input text and communicates with an AI system.\n- `process_audio_data`: Processes audio data from a queue and returns recognized text.\n- `callback`: Handles audio input stream callback.\n- `cli_talk`: Main function to listen for audio input, process it, and communicate with the AI.\n\nDependencies:\n- `sounddevice`: For audio input handling.\n- `vosk`: For speech recognition.\n- `word2number`: For converting words to numbers.\n- `core.env_fetcher`: For fetching environment variables.\n\"\"\"",
            "last_accessed": 1745613276
        },
        {
            "sha1": "f8a4dffb8f29e6df6fe0eaf2cc2c70ff44b80931",
            "docstring": "\"\"\"\nSuppresses the standard error (stderr) output temporarily by redirecting it to /dev/null.\n\nThis function temporarily redirects the stderr output to /dev/null by using file descriptors.\nIt yields control back to the caller to execute the desired code block with suppressed stderr.\nAfter the execution of the code block, it restores the original stderr output.\n\nNo arguments are taken.\n\nExceptions:\nThis function does not raise any exceptions.\n\nSide Effects:\nTemporarily suppresses stderr output.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "02b8506715b29f39420e38fcae691d61aefc6b24",
            "docstring": "\"\"\"\nThis function cleans up fuzzy digits in a text by replacing them with their correct counterparts.\n\nArguments:\n- text (str): A string containing text with fuzzy digits.\n\nReturn:\n- str: A string with fuzzy digits replaced by their correct counterparts.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "3051b6accbd567c6c79bb62b583c291aa5a32c19",
            "docstring": "\"\"\"\nConvert digit words to individual digits: 'four three' \u2192 '4 3'\n\nArguments:\n- text (str): A string containing digit words to be converted to individual digits.\n\nReturn:\n- str: A string with individual digits corresponding to the digit words in the input text.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "3d7e994bb9b383bfbee46cc6ccb144ed6d5d47b5",
            "docstring": "\"\"\"\nCombine sequences of digits in a given text by removing spaces between consecutive digits.\n\nArguments:\n- text (str): A string containing digits separated by spaces.\n\nReturn:\n- str: A string with consecutive digits combined without spaces.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "a1cea3a5a5c1b016c1aafa67d52ad5670feabe53",
            "docstring": "\"\"\"\nConvert all 'issue <digits>' references to 'PROJECTKEY-<digits>' with fuzzy support.\n\nArguments:\n- text (str): The input text where 'issue <digits>' references will be normalized.\n\nReturn:\n- str: The text with normalized 'issue <digits>' references.\n\nSide Effects:\n- Uses EnvFetcher to retrieve the PROJECT_KEY environment variable. If not found, defaults to \"AAP\".\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "ee3cd263c9333e30d371f4344a1cea6f286869ca",
            "docstring": "\"\"\"\nClears all elements from the queue provided as input.\n\nArguments:\n- q (Queue): A queue object from which elements will be removed.\n\nExceptions:\n- No exceptions are raised within the function.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "98574cc3c19fbc98c2643427c93aeeda6bd8e76d",
            "docstring": "\"\"\"\nThis function returns a boolean value False.\n\nArguments:\nThis function does not take any arguments.\n\nReturn:\nbool: False\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "7b6473953be424c9654363398d6449c6b9b65276",
            "docstring": "\"\"\"\nInitializes the recognizer with the VOSK model.\n\nArguments:\nNo arguments.\n\nReturn:\nKaldiRecognizer: A KaldiRecognizer object initialized with the VOSK model.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "2b78c0bf271ff569da2ccbaa753c990b22442fdd",
            "docstring": "\"\"\"\nNormalizes the text by removing any issue references and splits it into words for further processing.\n\nArguments:\n- text (str): The input text to be processed.\n- cli (bool): A flag indicating whether to communicate via Command Line Interface (CLI).\n- voice (bool): A flag indicating whether to communicate via voice.\n\nSide Effects:\n- Modifies the 'text' variable by removing issue references.\n- Splits the normalized text into words and stores them in the 'words' variable for further processing.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "5a9b60d1526915f8b38747c1f3c256b0fd4ed76d",
            "docstring": "\"\"\"\nProcesses the audio data from the queue and returns the recognized text.\n\nArguments:\n- q (Queue): A queue containing audio data to be processed.\n- rec (Recognizer): An audio recognizer object used to process the audio data.\n\nReturn:\n- str or None: The recognized text from the audio data, or None if the recognition fails.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "f0e65ae589eadb5988cb2e79487b8bfb694a2f62",
            "docstring": "\"\"\"\nHandles the callback for the audio stream.\n\nArguments:\n- indata (array): Input audio data.\n- frames (int): Number of frames.\n- time (CData): Time information.\n- status (CallbackFlags): Status of the callback.\n- q (Queue): Queue to put the processed audio data.\n\nReturn: None\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "89d533eaa7d5656579b959e8bf5ceb46b2a72cea",
            "docstring": "\"\"\"\nCreates a queue object to store items for communication between a command-line interface (CLI) and a function.\n\nArguments:\n- cli: The command-line interface object used for communication.\n- args: Additional arguments passed to the function.\n\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "bad7f6b46d3f45bdb5298d905342dbe435d1c4c7",
            "docstring": "\"\"\"\nThis module provides functionality for processing audio input and converting spoken digit words into numerical\nrepresentations, while also handling issue references in a specified format.\n\nKey features include:\n- A context manager to suppress standard error output.\n- Functions to clean up fuzzy digit words, convert digit words to numbers, and normalize issue references.\n- Audio processing capabilities using the VOSK speech recognition model.\n- Integration with a command-line interface (CLI) to interact with an AI system based on recognized speech.\n\nFunctions:\n- `suppress_stderr`: Context manager to suppress standard error output.\n- `fuzzy_digit_cleanup`: Corrects fuzzy digit words in the input text.\n- `word_digits_to_numbers`: Converts digit words to their numeric representations.\n- `combine_consecutive_digits`: Combines sequences of digit strings into a single string.\n- `normalize_issue_references`: Normalizes issue references in the text to a specified format.\n- `flush_queue`: Clears a queue of audio data.\n- `do_once`: Placeholder function that returns False.\n- `initialize_recognizer`: Initializes the VOSK recognizer model.\n- `process_text_and_communicate`: Normalizes input text and communicates with an AI system.\n- `process_audio_data`: Processes audio data from a queue and returns recognized text.\n- `callback`: Handles audio input stream callback.\n- `cli_talk`: Main function to listen for audio input, process it, and communicate with the AI.\n\nDependencies:\n- `sounddevice`: For audio input handling.\n- `vosk`: For speech recognition.\n- `word2number`: For converting words to numbers.\n- `core.env_fetcher`: For fetching environment variables.\n\"\"\"",
            "last_accessed": 1745613441
        }
    ],
    "jira_creator/commands/_try_cleanup.py": [
        {
            "sha1": "98bbe436e02079c7ce0ba38d9be10d2b01d48048",
            "docstring": "\"\"\"\nThis script defines a function '_try_cleanup' that attempts to clean up text using an AI provider.\n\nThe function takes three arguments:\n- ai_provider (AiProvider): An AI provider object used to improve text.\n- prompt (str): A prompt or context for the text improvement process.\n- text (str): The text to be cleaned up.\n\nIt returns:\n- str: The cleaned up text.\n\nIt raises an AiError exception if the AI cleanup process fails.\n\"\"\"",
            "last_accessed": 1745613276
        },
        {
            "sha1": "bd47363ac23842ee2d67310e99e15562c9c57f34",
            "docstring": "\"\"\"\nAttempts to clean up text using an AI provider.\n\nArguments:\n- ai_provider (AiProvider): An AI provider object used to improve text.\n- prompt (str): A prompt or context for the text improvement process.\n- text (str): The text to be cleaned up.\n\nReturn:\n- str: The cleaned up text.\n\nExceptions:\n- AiError: If the AI cleanup process fails, an AiError is raised.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "0f1570c1d045a420b9b63a9a62d32c90b085d566",
            "docstring": "\"\"\"\nThis script defines a function '_try_cleanup' that attempts to clean up text using an AI provider.\n\nThe function takes three arguments:\n- ai_provider (AiProvider): An AI provider object used to improve text.\n- prompt (str): A prompt or context for the text improvement process.\n- text (str): The text to be cleaned up.\n\nIt returns:\n- str: The cleaned up text.\n\nIt raises an AiError exception if the AI cleanup process fails.\n\"\"\"",
            "last_accessed": 1745613441
        }
    ],
    "jira_creator/commands/cli_set_summary.py": [
        {
            "sha1": "d699e2d0b360a23f8a3ee399d4f5f395dad99eea",
            "docstring": "\"\"\"\nSets a flag to a specified Jira issue.\n\nArguments:\n- jira (JiraClient): An instance of the Jira client used to interact with the Jira API.\n- args (dict): A dictionary containing the arguments passed to the function.\n\nReturn:\n- dict: A response from the Jira API after adding the flag to the specified issue.\n\"\"\"",
            "last_accessed": 1745613276
        },
        {
            "sha1": "b4f7f1f3775d170079d8e210fc65e24df2f76fe1",
            "docstring": "\"\"\"\nSets a flag to a specified Jira issue.\n\nArguments:\n- jira (JiraClient): An instance of the Jira client used to interact with the Jira API.\n- args (dict): A dictionary containing the arguments passed to the function.\n- issue_key (str): The key of the Jira issue to which the flag will be added.\n\nReturn:\n- dict: A response from the Jira API after adding the flag to the specified issue.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "0a7c30fe62cf458adce29dc8fa0a1a4c92cca4d0",
            "docstring": "\"\"\"\nSets a flag to a specified Jira issue.\n\nArguments:\n- jira (JiraClient): An instance of the Jira client used to interact with the Jira API.\n- args (dict): A dictionary containing the arguments passed to the function.\n- issue_key (str): The key of the Jira issue to which the flag will be added.\n\nReturn:\n- dict: A response from the Jira API after adding the flag to the specified issue.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "c062f2d189ea2154f93b7d8e27e76d9562d108de",
            "docstring": "\"\"\"\nSets a flag to a specified Jira issue.\n\nArguments:\n- jira (JiraClient): An instance of the Jira client used to interact with the Jira API.\n- args (dict): A dictionary containing the arguments passed to the function.\n\nReturn:\n- dict: A response from the Jira API after adding the flag to the specified issue.\n\"\"\"",
            "last_accessed": 1745566251
        },
        {
            "sha1": "ad33e2fa35303d65475d362a36456acf5451e56b",
            "docstring": "\"\"\"\nSets a flag to a specified Jira issue.\n\nArguments:\n- jira (JiraClient): An instance of the Jira client used to interact with the Jira API.\n- args (dict): A dictionary containing the arguments passed to the function.\n- issue_key (str): The key of the Jira issue to which the flag will be added.\n\nReturn:\n- dict: A response from the Jira API after adding the flag to the specified issue.\n\"\"\"",
            "last_accessed": 1745610666
        }
    ],
    "jira_creator/commands/cli_create_issue.py": [
        {
            "sha1": "a838576da9ab5ff0835077f8ba2f7880c064846e",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) tool for creating and managing Jira issues with enhanced features.\n\nKey functionalities include:\n- Loading issue templates from a specified directory.\n- Interacting with users to gather input for issue creation.\n- Editing issue descriptions prior to submission.\n- Utilizing AI to improve text descriptions.\n- Building payloads for Jira API requests.\n- Handling exceptions related to file operations, AI processing, and issue creation.\n\nThe main function, `cli_create_issue`, orchestrates the process of creating a new Jira issue based on user input and\ntemplates, while managing potential errors and providing informative output.\n\"\"\"",
            "last_accessed": 1745517568
        },
        {
            "sha1": "d0a45dbf87fa821e3bcb61f587088c509f121abd",
            "docstring": "\"\"\"\nCreates a new issue in Jira based on a template.\n\nArguments:\n- jira (JIRA): An instance of the JIRA class for interacting with the Jira API.\n- ai_provider (str): The AI provider to use for generating content.\n- template_dir (str): The directory where the issue templates are stored.\n- args (Namespace): Command-line arguments containing the type of the issue.\n\nExceptions:\n- FileNotFoundError: Raised when the template file specified by 'args.type' is not found in 'template_dir'.\n\nSide Effects:\n- Prints an error message if the template file is not found.\n- Raises a FileNotFoundError exception with the original error message.\n- Prints warnings or errors related to AI cleanup failure or issue creation failure.\n\"\"\"",
            "last_accessed": 1745517570
        },
        {
            "sha1": "75807be7dcc99255cb784a27f2593bfb28eed4f5",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) tool for creating and managing Jira issues with enhanced features.\n\nKey functionalities include:\n- Loading issue templates from a specified directory.\n- Interacting with users to gather input for issue creation.\n- Editing issue descriptions prior to submission.\n- Utilizing AI to improve text descriptions.\n- Building payloads for Jira API requests.\n- Handling exceptions related to file operations, AI processing, and issue creation.\n\nThe main function, `cli_create_issue`, orchestrates the process of creating a new Jira issue based on user input and\ntemplates, while managing potential errors and providing informative output.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "e7e01bd4c23db40376ffce5018c7a86fd9546039",
            "docstring": "\"\"\"\nCreates a new issue in Jira based on a template.\n\nArguments:\n- jira (JIRA): An instance of the JIRA class for interacting with the Jira API.\n- ai_provider (str): The AI provider to use for generating content.\n- template_dir (str): The directory where the issue templates are stored.\n- args (Namespace): Command-line arguments containing the type of the issue.\n\nExceptions:\n- FileNotFoundError: Raised when the template file specified by 'args.type' is not found in 'template_dir'.\n\nSide Effects:\n- Prints an error message if the template file is not found.\n- Raises a FileNotFoundError exception with the original error message.\n- Prints warnings or errors related to AI cleanup failure or issue creation failure.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "aeea4d3e9c9d5c375e828bed091e571ac03c60bc",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) tool for creating and managing Jira issues with enhanced features.\n\nKey functionalities include:\n- Loading issue templates from a specified directory.\n- Interacting with users to gather input for issue creation.\n- Editing issue descriptions prior to submission.\n- Utilizing AI to improve text descriptions.\n- Building payloads for Jira API requests.\n- Handling exceptions related to file operations, AI processing, and issue creation.\n\nThe main function, `cli_create_issue`, orchestrates the process of creating a new Jira issue based on user input and\ntemplates, while managing potential errors and providing informative output.\n\"\"\"",
            "last_accessed": 1745613276
        }
    ],
    "jira_creator/commands/cli_search.py": [
        {
            "sha1": "0cbf97c2d9f214c9225e04e7aaa9aeaf6724d59a",
            "docstring": "\"\"\"\nThis module provides a CLI search function for querying JIRA issues based on a JQL query.\n\nThe 'cli_search' function takes a JIRA client and command-line arguments as input. It searches for issues using the\nprovided JQL query, retrieves relevant fields, and displays the results in a tabular format. The function also handles\nexceptions like 'SearchError' and prints appropriate error messages.\n\nNote: This script relies on external modules like 'core.env_fetcher' and 'exceptions.exceptions'.\n\nFunction:\n- cli_search(jira, args): Search for issues in Jira based on the provided JQL query.\n    Arguments:\n    - jira: A Jira client object used to communicate with the Jira API.\n    - args: An object containing the parsed command-line arguments with a 'jql' attribute representing the Jira Query Language query.\n    Exceptions:\n    - May raise exceptions related to the Jira API or invalid queries.\n    Note: Interacts with the Jira API to search for issues based on the provided JQL query.\n\"\"\"",
            "last_accessed": 1745517574
        },
        {
            "sha1": "538c5518d3418cb1a89571f0fff5e832e598bb16",
            "docstring": "\"\"\"\nSearch for issues in Jira based on the provided JQL query.\n\nArguments:\n- jira: A Jira client object used to communicate with the Jira API.\n- args: An object containing the parsed command-line arguments.\n  It should have a 'jql' attribute representing the Jira Query Language query.\n\nExceptions:\n- This function may raise exceptions related to the Jira API or invalid queries.\n\nNote: This function interacts with the Jira API to search for issues based on the provided JQL query.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "70919452535e80f496ccbc64ba96e867e783840b",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) function for searching JIRA issues using JIRA Query Language (JQL).\n\nThe `cli_search` function takes a JIRA client instance and command-line arguments, allowing users to search for issues\nbased on a specified JQL query. It retrieves relevant issue fields and displays the results in a neatly formatted table.\nThe function also includes error handling for search-related exceptions, ensuring appropriate messages are displayed\nwhen issues arise.\n\nFunctions:\n- cli_search(jira, args): Executes a search for issues in JIRA using the provided JQL query.\n\nArguments:\n- jira: A JIRA client object for API communication.\n- args: An object containing parsed command-line arguments, which must include a 'jql' attribute representing the JQL query.\n\nExceptions:\n- The function may raise exceptions related to the JIRA API or invalid queries.\n\nNote:\n- This script depends on external modules such as 'core.env_fetcher' and 'exceptions.exceptions' for environment variable fetching and exception handling, respectively.\n\"\"\"",
            "last_accessed": 1745518540
        },
        {
            "sha1": "0286f35d39bd9555c03caad6165ada4154390a3d",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) function for searching JIRA issues using JIRA Query Language (JQL).\n\nThe `cli_search` function allows users to search for issues based on a specified JQL query through a JIRA client instance. It retrieves relevant issue fields and displays the results in a formatted table. The function includes error handling for search-related exceptions to ensure appropriate messages are displayed when issues arise.\n\nFunctions:\n- cli_search(jira, args): Executes a search for issues in JIRA using the provided JQL query.\n\nArguments:\n- jira: A JIRA client object for API communication.\n- args: An object containing parsed command-line arguments, which must include a 'jql' attribute representing the JQL query.\n\nExceptions:\n- The function may raise exceptions related to the JIRA API or invalid queries.\n\nNote:\n- This script depends on external modules such as 'core.env_fetcher' and 'exceptions.exceptions' for environment variable fetching and exception handling, respectively.\n\"\"\"",
            "last_accessed": 1745518976
        },
        {
            "sha1": "3c3e454943b13f595cb65afd282f73563bb233a4",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) function for searching JIRA issues using JIRA Query Language (JQL).\n\nThe `cli_search` function allows users to search for issues based on a specified JQL query through a JIRA client\ninstance. It retrieves relevant issue fields and displays the results in a formatted table. The function includes error\nhandling for search-related exceptions to ensure appropriate messages are displayed when issues arise.\n\nFunctions:\n- cli_search(jira, args): Executes a search for issues in JIRA using the provided JQL query.\n\nArguments:\n- jira: A JIRA client object for API communication.\n- args: An object containing parsed command-line arguments, which must include a 'jql' attribute representing the JQL\nquery.\n\nExceptions:\n- The function may raise exceptions related to the JIRA API or invalid queries.\n\nNote:\n- This script depends on external modules such as 'core.env_fetcher' and 'exceptions.exceptions' for environment\nvariable fetching and exception handling, respectively.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "be8543d4a2404c2ac24b3b46b73ca23e767966f4",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) function for searching JIRA issues using JIRA Query Language (JQL).\n\nThe `cli_search` function allows users to search for issues based on a specified JQL query through a JIRA client\ninstance. It retrieves relevant issue fields and displays the results in a formatted table. The function includes error\nhandling for search-related exceptions to ensure appropriate messages are displayed when issues arise.\n\nFunctions:\n- cli_search(jira, args): Executes a search for issues in JIRA using the provided JQL query.\n\nArguments:\n- jira: A JIRA client object for API communication.\n- args: An object containing parsed command-line arguments, which must include a 'jql' attribute representing the JQL\nquery.\n\nExceptions:\n- The function may raise exceptions related to the JIRA API or invalid queries.\n\nNote:\n- This script depends on external modules such as 'core.env_fetcher' and 'exceptions.exceptions' for environment\nvariable fetching and exception handling, respectively.\n\"\"\"",
            "last_accessed": 1745613276
        }
    ],
    "jira_creator/commands/cli_change_type.py": [
        {
            "sha1": "5553f0f3456c98369c8b75737f8a9d3623344ee2",
            "docstring": "\"\"\"\nThis script defines a function cli_change_type that changes the issue type of a Jira issue. It takes two arguments:\n'jira' representing the Jira instance and 'args' containing the issue key and the new issue type.\nIf the issue type change is successful, it prints a success message; otherwise, it prints a failure message.\nIf an exception of type ChangeTypeError is caught during the process, it prints an error message, raises the same\nexception, and propagates it.\n\nFunction cli_change_type:\n- Change the type of a Jira issue.\n- Arguments:\n- jira (JIRA): A JIRA instance to interact with the Jira service.\n- args (Namespace): An object containing the following attributes:\n- issue_key (str): The key of the issue to be changed.\n- new_type (str): The new type to assign to the issue.\n- Return:\n- bool: True if the issue type change was successful, False otherwise.\n- Exceptions:\n- ChangeTypeError: Raised when an error occurs during the issue type change process.\n- Side Effects:\n- Prints a success or failure message indicating the result of the issue type change.\n\"\"\"",
            "last_accessed": 1745613319
        },
        {
            "sha1": "f3aeb28bf3366f2a431fb66c202024f200fe2444",
            "docstring": "\"\"\"\nChange the type of a Jira issue.\n\nArguments:\n- jira (JIRA): A JIRA instance to interact with the Jira service.\n- args (Namespace): An object containing the following attributes:\n    - issue_key (str): The key of the issue to be changed.\n    - new_type (str): The new type to assign to the issue.\n\nReturn:\n- bool: True if the issue type change was successful, False otherwise.\n\nExceptions:\n- ChangeTypeError: Raised when an error occurs during the issue type change process.\n\nSide Effects:\n- Prints a success or failure message indicating the result of the issue type change.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "4454abce515e06bc317d2a815d8f9efc48f81144",
            "docstring": "\"\"\"\nThis script defines a function cli_change_type that changes the issue type of a Jira issue. It takes two arguments:\n'jira' representing the Jira instance and 'args' containing the issue key and the new issue type.\nIf the issue type change is successful, it prints a success message; otherwise, it prints a failure message.\nIf an exception of type ChangeTypeError is caught during the process, it prints an error message, raises the same\nexception, and propagates it.\n\nFunction cli_change_type:\n- Change the type of a Jira issue.\n- Arguments:\n- jira (JIRA): A JIRA instance to interact with the Jira service.\n- args (Namespace): An object containing the following attributes:\n- issue_key (str): The key of the issue to be changed.\n- new_type (str): The new type to assign to the issue.\n- Return:\n- bool: True if the issue type change was successful, False otherwise.\n- Exceptions:\n- ChangeTypeError: Raised when an error occurs during the issue type change process.\n- Side Effects:\n- Prints a success or failure message indicating the result of the issue type change.\n\"\"\"",
            "last_accessed": 1745613441
        }
    ],
    "jira_creator/commands/cli_add_sprint.py": [
        {
            "sha1": "506dbf76e6de49ef6277b83607adce5b31466aa8",
            "docstring": "\"\"\"\nAdds an issue to a sprint in Jira.\n\nArguments:\n- jira (JIRA): An instance of the JIRA client.\n- args (Namespace): A namespace object containing 'issue_key' and 'sprint_name' attributes.\n- issue_key (str): The key of the issue to be added to the sprint.\n- sprint_name (str): The name of the sprint to add the issue to.\n\nReturn:\n- bool: True if the issue was successfully added to the sprint.\n\nExceptions:\n- AddSprintError: Raised when an error occurs while adding the issue to the sprint.\n\nSide Effects:\n- Prints a success message if the issue is added to the sprint.\n- Prints an error message and raises AddSprintError if an error occurs during the process.\n\"\"\"",
            "last_accessed": 1745517597
        },
        {
            "sha1": "192241d27b630e9be8d95a26a26794742a5662bf",
            "docstring": "\"\"\"\nAdds an issue to a sprint in Jira.\n\nArguments:\n- jira (JIRA): An instance of the JIRA client.\n- args (Namespace): A namespace object containing 'issue_key' and 'sprint_name' attributes.\n- issue_key (str): The key of the issue to be added to the sprint.\n- sprint_name (str): The name of the sprint to add the issue to.\n\nReturn:\n- bool: True if the issue was successfully added to the sprint.\n\nExceptions:\n- AddSprintError: Raised when an error occurs while adding the issue to the sprint.\n\nSide Effects:\n- Prints a success message if the issue is added to the sprint.\n- Prints an error message and raises AddSprintError if an error occurs during the process.\n\"\"\"",
            "last_accessed": 1745520328
        },
        {
            "sha1": "b18f9f52b643faa5589709ce0646191dd7c1e1de",
            "docstring": "\"\"\"\nAdds an issue to a sprint in Jira.\n\nArguments:\n- jira (JIRA): An instance of the JIRA client.\n- args (Namespace): A namespace object containing 'issue_key' and 'sprint_name' attributes.\n- issue_key (str): The key of the issue to be added to the sprint.\n- sprint_name (str): The name of the sprint to add the issue to.\n\nReturn:\n- bool: True if the issue was successfully added to the sprint.\n\nExceptions:\n- AddSprintError: Raised when an error occurs while adding the issue to the sprint.\n\nSide Effects:\n- Prints a success message if the issue is added to the sprint.\n- Prints an error message and raises AddSprintError if an error occurs during the process.\n\"\"\"",
            "last_accessed": 1745520328
        }
    ],
    "jira_creator/commands/cli_search_users.py": [
        {
            "sha1": "96d496b4a343ccfdb4aa84833c49622959179995",
            "docstring": "\"\"\"\nThis script defines a function 'cli_search_users' that takes a Jira instance and search arguments as input parameters.\nIt attempts to search for users using the provided query and prints the user details if found.\nIf no users are found, it prints a warning message. If an error occurs during the search, it raises a SearchUsersError\nexception.\n\nFunction cli_search_users:\n- Search for users in Jira based on the provided query.\n- Arguments:\n- jira (JIRA): An instance of the JIRA client.\n- args (Namespace): A namespace object containing the query to search for users.\n- Exceptions:\n- This function may raise an exception if there is an issue with searching for users in Jira.\n\"\"\"",
            "last_accessed": 1745613320
        },
        {
            "sha1": "0e6ede7f22a837d6963c014c621c2bd9e9f8d465",
            "docstring": "\"\"\"\nSearch for users in Jira based on the provided query.\n\nArguments:\n- jira (JIRA): An instance of the JIRA client.\n- args (Namespace): A namespace object containing the query to search for users.\n\nExceptions:\n- This function may raise an exception if there is an issue with searching for users in Jira.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "f0357412e28d1a0f2169a0e0ad46a050d207c4e4",
            "docstring": "\"\"\"\nThis script defines a function 'cli_search_users' that takes a Jira instance and search arguments as input parameters.\nIt attempts to search for users using the provided query and prints the user details if found.\nIf no users are found, it prints a warning message. If an error occurs during the search, it raises a SearchUsersError\nexception.\n\nFunction cli_search_users:\n- Search for users in Jira based on the provided query.\n- Arguments:\n- jira (JIRA): An instance of the JIRA client.\n- args (Namespace): A namespace object containing the query to search for users.\n- Exceptions:\n- This function may raise an exception if there is an issue with searching for users in Jira.\n\"\"\"",
            "last_accessed": 1745613441
        }
    ],
    "jira_creator/commands/cli_edit_issue.py": [
        {
            "sha1": "502d5e20ccc43b7a269df69077e42d8709ad94ba",
            "docstring": "\"\"\"\nThis module provides functionality for editing Jira issue descriptions using a command-line interface. It includes\nmethods to fetch, edit, and update issue descriptions, as well as validate and lint the descriptions for quality.\n\nKey Functions:\n- fetch_description(jira, issue_key): Retrieves the description of a Jira issue.\n- edit_description(original_description): Opens the issue description in a text editor for user modifications.\n- get_prompt(jira, issue_key, default_prompt): Retrieves a prompt based on the issue type from a prompt library.\n- lint_description_once(cleaned, ai_provider): Validates the cleaned description and prompts the user for additional\ninput if issues are found.\n- lint_description(cleaned, ai_provider): Continuously lints the description until no issues are detected.\n- update_jira_description(jira, issue_key, cleaned): Updates the Jira issue description with the cleaned text.\n- cli_edit_issue(jira, ai_provider, default_prompt, try_cleanup_fn, args): Main function for editing an issue\ndescription, coordinating the fetching, editing, linting, and updating processes.\n\nExceptions:\n- Various exceptions are raised for error handling, including issues related to editing, fetching, and updating\ndescriptions.\n\"\"\"",
            "last_accessed": 1745517611
        },
        {
            "sha1": "4fb96812e920437e17a4c53de7d9a7201ed4d33d",
            "docstring": "\"\"\"\nFetches the description of a Jira issue identified by the given issue key.\n\nArgs:\njira (JiraAPI): An instance of JiraAPI used to interact with the Jira service.\nissue_key (str): The key identifying the Jira issue for which the description needs to be fetched.\n\nReturns:\nstr: The description of the Jira issue.\n\nRaises:\nFetchDescriptionError: If an error occurs while fetching the description.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "53c9836b9bb414a2a76724c59bdfe7a783717ec4",
            "docstring": "\"\"\"\nEdit the description using the default text editor.\n\nArguments:\n- original_description (str): The original description to be edited.\n\nReturn:\n- str: The edited description after modifications.\n\nExceptions:\n- EditDescriptionError: Raised if an error occurs while editing the description.\n\nSide Effects:\n- Opens the default text editor to allow the user to modify the description.\n- Prints an error message if editing the description fails, which is captured in the logs.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "5063516ef0963b0c330c5d5161d818dfabfdefaa",
            "docstring": "\"\"\"\nRetrieve a prompt related to a Jira issue.\n\nArguments:\n- jira: An object representing the Jira instance.\n- issue_key: A string containing the key of the Jira issue.\n- default_prompt: A string representing the default prompt to be used if the Jira prompt cannot be retrieved.\n\nReturn:\n- A string containing the prompt related to the Jira issue. If the prompt cannot be retrieved, the default prompt\nis returned.\n\nExceptions:\n- GetPromptError: Raised if there is an error while trying to retrieve the Jira prompt.\n\nSide Effects:\n- Prints a message if the Jira prompt cannot be retrieved and the default prompt is used.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "cc702a5331322ff857c4186d972665a3d715f07f",
            "docstring": "\"\"\"\nLint a description once using a specified AI provider.\n\nArguments:\n- cleaned (str): The cleaned description to be linted.\n- ai_provider (str): The AI provider to use for linting.\n\nSide Effects:\n- Prints the validation issues found during linting.\n- Prompts the user to provide additional information based on linting problems.\n- Updates the description using the AI provider if issues are found.\n\"\"\"",
            "last_accessed": 1745517620
        },
        {
            "sha1": "1a8ba15e3a521d8501e0f997965c65b6b0e7049e",
            "docstring": "\"\"\"\nPrints the current cleaned description in a loop for linting purposes.\n\nArguments:\n- cleaned (str): The cleaned description that needs to be linted.\n- ai_provider: The AI provider used for linting.\n\nSide Effects:\nPrints the current cleaned description in a loop for linting purposes.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "bfa5a9e6c470a0dd6477badd4219c35d69e51c67",
            "docstring": "\"\"\"\nUpdate the description of a Jira issue.\n\nArguments:\n- jira: An instance of the Jira API client.\n- issue_key: A string representing the key of the Jira issue to update.\n- cleaned: A string containing the cleaned description to update the Jira issue with.\n\nExceptions:\n- UpdateDescriptionError: Raised if there is an error while updating the description.\n\nSide Effects:\n- Modifies the description of the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "d8f38f648f1070b312dcdb77b32ed7d6c09ed8ff",
            "docstring": "\"\"\"\nEdit an issue's description in a Jira instance using a command-line interface.\n\nArguments:\n- jira (JIRA): A Jira instance to interact with.\n- ai_provider (AIProvider): An AI provider for natural language processing.\n- default_prompt (str): The default prompt message for user input.\n- try_cleanup_fn (function): A function to attempt cleanup operations.\n- args (Namespace): The parsed command-line arguments.\n\nReturn:\n- bool: False if the original description is empty, indicating the issue was not edited.\n\nExceptions:\n- EditIssueError: Raised if an error occurs during the editing process.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "1b4047451bbbd8b4be6934b020b083489a56a392",
            "docstring": "\"\"\"\nThis module provides a command-line interface for editing Jira issue descriptions. It allows users to fetch, edit, lint, and update descriptions while ensuring quality through validation checks. The module integrates with an AI provider for enhanced description improvement.\n\nKey Functions:\n- fetch_description(jira, issue_key): Retrieves the description of a specified Jira issue.\n- edit_description(original_description): Opens the issue description in a text editor for user modifications.\n- get_prompt(jira, issue_key, default_prompt): Retrieves a prompt based on the issue type.\n- lint_description_once(cleaned, ai_provider): Validates the cleaned description and prompts for additional input if issues are found.\n- lint_description(cleaned, ai_provider): Continuously lints the description until no issues are detected.\n- update_jira_description(jira, issue_key, cleaned): Updates the Jira issue description with the cleaned text.\n- cli_edit_issue(jira, ai_provider, default_prompt, try_cleanup_fn, args): Main function coordinating the description editing process.\n\nExceptions:\n- Various exceptions are raised for error handling, including issues related to editing, fetching, and updating descriptions.\n\"\"\"",
            "last_accessed": 1745518569
        },
        {
            "sha1": "fcdaf3cca37c8d44826392827e5aaadc853272fa",
            "docstring": "\"\"\"\nLint a description once using a specified AI provider.\n\nArguments:\n- cleaned (str): The cleaned description to be linted.\n- ai_provider (str): The AI provider to use for linting.\n\nSide Effects:\n- Prints the validation issues found during linting.\n- Prompts the user to provide additional information based on linting problems.\n- Updates the description using the AI provider if issues are found.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "ef6e1d4becedd86c8652d41e45583401d34d679f",
            "docstring": "\"\"\"\nThis module provides a command-line interface for editing Jira issue descriptions. It allows users to fetch, edit,\nlint, and update descriptions while ensuring quality through validation checks. The module integrates with an AI\nprovider for enhanced description improvement.\n\nKey Functions:\n- fetch_description(jira, issue_key): Retrieves the description of a specified Jira issue.\n- edit_description(original_description): Opens the issue description in a text editor for user modifications.\n- get_prompt(jira, issue_key, default_prompt): Retrieves a prompt based on the issue type.\n- lint_description_once(cleaned, ai_provider): Validates the cleaned description and prompts for additional input if\nissues are found.\n- lint_description(cleaned, ai_provider): Continuously lints the description until no issues are detected.\n- update_jira_description(jira, issue_key, cleaned): Updates the Jira issue description with the cleaned text.\n- cli_edit_issue(jira, ai_provider, default_prompt, try_cleanup_fn, args): Main function coordinating the description\nediting process.\n\nExceptions:\n- Various exceptions are raised for error handling, including issues related to editing, fetching, and updating\ndescriptions.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "ed7c97961cd893719f4593f74839df3407291ff1",
            "docstring": "\"\"\"\nThis module provides a command-line interface for editing Jira issue descriptions. It allows users to fetch, edit,\nlint, and update descriptions while ensuring quality through validation checks. The module integrates with an AI\nprovider for enhanced description improvement.\n\nKey Functions:\n- fetch_description(jira, issue_key): Retrieves the description of a specified Jira issue.\n- edit_description(original_description): Opens the issue description in a text editor for user modifications.\n- get_prompt(jira, issue_key, default_prompt): Retrieves a prompt based on the issue type.\n- lint_description_once(cleaned, ai_provider): Validates the cleaned description and prompts for additional input if\nissues are found.\n- lint_description(cleaned, ai_provider): Continuously lints the description until no issues are detected.\n- update_jira_description(jira, issue_key, cleaned): Updates the Jira issue description with the cleaned text.\n- cli_edit_issue(jira, ai_provider, default_prompt, try_cleanup_fn, args): Main function coordinating the description\nediting process.\n\nExceptions:\n- Various exceptions are raised for error handling, including issues related to editing, fetching, and updating\ndescriptions.\n\"\"\"",
            "last_accessed": 1745613320
        }
    ],
    "jira_creator/commands/cli_remove_sprint.py": [
        {
            "sha1": "1206f2619e4339bf48003b02e3482f023cb5891a",
            "docstring": "\"\"\"\nRemove an issue from a sprint in Jira.\n\nArguments:\n- jira (JIRA): An instance of the JIRA API client.\n- args (Namespace): A namespace containing the issue key to be removed from the sprint.\n\nReturn:\n- bool: True if the issue was successfully removed from the sprint.\n\nExceptions:\n- RemoveFromSprintError: Raised if there is an error while removing the issue from the sprint.\n\nSide Effects:\n- Prints a success message if the issue is removed from the sprint.\n- Prints an error message and raises a RemoveFromSprintError if removal fails.\n\"\"\"",
            "last_accessed": 1745613320
        },
        {
            "sha1": "717dfd30d44aaf4e1638d36a06ee1915cff53f0f",
            "docstring": "\"\"\"\nRemove an issue from a sprint in Jira.\n\nArguments:\n- jira (JIRA): An instance of the JIRA API client.\n- args (Namespace): A namespace containing the issue key to be removed from the sprint.\n\nReturn:\n- bool: True if the issue was successfully removed from the sprint.\n\nExceptions:\n- RemoveFromSprintError: Raised if there is an error while removing the issue from the sprint.\n\nSide Effects:\n- Prints a success message if the issue is removed from the sprint.\n- Prints an error message and raises a RemoveFromSprintError if removal fails.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "7e1650e867b57f46615a6825be6888956be35e6f",
            "docstring": "\"\"\"\nRemove an issue from a sprint in Jira.\n\nArguments:\n- jira (JIRA): An instance of the JIRA API client.\n- args (Namespace): A namespace containing the issue key to be removed from the sprint.\n\nReturn:\n- bool: True if the issue was successfully removed from the sprint.\n\nExceptions:\n- RemoveFromSprintError: Raised if there is an error while removing the issue from the sprint.\n\nSide Effects:\n- Prints a success message if the issue is removed from the sprint.\n- Prints an error message and raises a RemoveFromSprintError if removal fails.\n\"\"\"",
            "last_accessed": 1745613445
        }
    ],
    "jira_creator/commands/cli_view_issue.py": [
        {
            "sha1": "e7afc80634c91b6e6d9ba6527345a8414c1fe2b3",
            "docstring": "\"\"\"\nThis script defines a function cli_view_issue that retrieves and displays information about a Jira issue. It handles\ncustom fields by replacing their keys with their real names using a helper function from the Jira object. The function\nthen sorts and prints the issue details. If an exception ViewIssueError is raised during the process, it catches the\nexception, prints an error message, and raises the exception again.\n\nFunction cli_view_issue:\n- View a specific issue in JIRA.\n- Arguments:\n- jira: A JIRA client object used to interact with the JIRA API.\n- args: A dictionary containing the following key:\n- issue_key: A string representing the key of the issue to be viewed.\n- Exceptions:\n- This function may raise exceptions if there are issues with accessing or viewing the specified issue in JIRA.\n- Note:\n- This function retrieves and displays information about a specific issue in JIRA using the provided JIRA client object.\n\"\"\"",
            "last_accessed": 1745613320
        },
        {
            "sha1": "6ed65e4232ce90f4f7994815630983e98e6bdddb",
            "docstring": "\"\"\"\nView a specific issue in JIRA.\n\nArguments:\n- jira: A JIRA client object used to interact with the JIRA API.\n- args: A dictionary containing the following key:\n  - issue_key: A string representing the key of the issue to be viewed.\n\nExceptions:\n- This function may raise exceptions if there are issues with accessing or viewing the specified issue in JIRA.\n\nNote:\n- This function retrieves and displays information about a specific issue in JIRA using the provided JIRA client\nobject.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "915fe0dd40772ae2aaff9f78c87f635d0f961c50",
            "docstring": "\"\"\"\nThis script defines a function cli_view_issue that retrieves and displays information about a Jira issue. It handles\ncustom fields by replacing their keys with their real names using a helper function from the Jira object. The function\nthen sorts and prints the issue details. If an exception ViewIssueError is raised during the process, it catches the\nexception, prints an error message, and raises the exception again.\n\nFunction cli_view_issue:\n- View a specific issue in JIRA.\n- Arguments:\n- jira: A JIRA client object used to interact with the JIRA API.\n- args: A dictionary containing the following key:\n- issue_key: A string representing the key of the issue to be viewed.\n- Exceptions:\n- This function may raise exceptions if there are issues with accessing or viewing the specified issue in JIRA.\n- Note:\n- This function retrieves and displays information about a specific issue in JIRA using the provided JIRA client object.\n\"\"\"",
            "last_accessed": 1745613445
        }
    ],
    "jira_creator/commands/cli_open_issue.py": [
        {
            "sha1": "ec63522af2387062ef27e119fce518c7d76e0d59",
            "docstring": "\"\"\"\nThis script defines a function cli_open_issue(args) that opens a JIRA issue in the default web browser using\nsubprocess.Popen. It retrieves the JIRA URL from the environment variables using the EnvFetcher class. If an\nOpenIssueError is raised during the process, it prints an error message and raises the exception again.\n\nFunction cli_open_issue(args):\n- Opens a JIRA issue in the default web browser using xdg-open.\n- Arguments:\n- args (Namespace): A namespace containing the parsed arguments. It should have an attribute 'issue_key'\nrepresenting the key of the JIRA issue to open.\n- Return:\n- bool: True if the issue was successfully opened in the browser.\n- Exceptions:\n- OpenIssueError: Raised if there is an issue opening the JIRA issue in the browser.\n- Side Effects:\n- Opens the default web browser to display the JIRA issue specified by the 'issue_key'.\n\"\"\"",
            "last_accessed": 1745613320
        },
        {
            "sha1": "e246c4edf0ffdbafc83b62a9abdb7338eafa36f9",
            "docstring": "\"\"\"\nOpens a JIRA issue in the default web browser using xdg-open.\n\nArguments:\n- args (Namespace): A namespace containing the parsed arguments. It should have an attribute 'issue_key'\n  representing the key of the JIRA issue to open.\n\nReturn:\n- bool: True if the issue was successfully opened in the browser.\n\nExceptions:\n- OpenIssueError: Raised if there is an issue opening the JIRA issue in the browser.\n\nSide Effects:\n- Opens the default web browser to display the JIRA issue specified by the 'issue_key'.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "38a835dc38d5e6e130d5f4b121c9e275b620eb59",
            "docstring": "\"\"\"\nThis script defines a function cli_open_issue(args) that opens a JIRA issue in the default web browser using\nsubprocess.Popen. It retrieves the JIRA URL from the environment variables using the EnvFetcher class. If an\nOpenIssueError is raised during the process, it prints an error message and raises the exception again.\n\nFunction cli_open_issue(args):\n- Opens a JIRA issue in the default web browser using xdg-open.\n- Arguments:\n- args (Namespace): A namespace containing the parsed arguments. It should have an attribute 'issue_key'\nrepresenting the key of the JIRA issue to open.\n- Return:\n- bool: True if the issue was successfully opened in the browser.\n- Exceptions:\n- OpenIssueError: Raised if there is an issue opening the JIRA issue in the browser.\n- Side Effects:\n- Opens the default web browser to display the JIRA issue specified by the 'issue_key'.\n\"\"\"",
            "last_accessed": 1745613446
        }
    ],
    "jira_creator/commands/cli_unassign.py": [
        {
            "sha1": "b08f5eaf45ba3676d5dddf3ccd277d4b733027f9",
            "docstring": "\"\"\"\nUnassign an issue in Jira.\n\nArguments:\n- jira: An instance of the Jira API client.\n- args: A namespace containing the issue key to unassign.\n\nReturn:\n- bool: True if the issue was successfully unassigned, False otherwise.\n\"\"\"",
            "last_accessed": 1745517651
        },
        {
            "sha1": "11ecb6c9b0de6938491599e09f7f74c41c059520",
            "docstring": "\"\"\"\nUnassign an issue in Jira.\n\nArguments:\n- jira: An instance of the Jira API client.\n- args: A namespace containing the issue key to unassign.\n\nReturn:\n- bool: True if the issue was successfully unassigned, False otherwise.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "c402d028102f13df6b869f97b9219f8ef191db2c",
            "docstring": "\"\"\"\nUnassign an issue in Jira.\n\nThis script defines a function 'cli_unassign' that unassigns an issue in Jira. It takes two arguments:\n- jira: An instance of the Jira API client.\n- args: A namespace containing the issue key to unassign.\n\nIt returns a boolean value:\n- True if the issue was successfully unassigned.\n- False otherwise.\n\"\"\"",
            "last_accessed": 1745518586
        },
        {
            "sha1": "7bba72769c6d9044b9d7cb0b287e7098d078820b",
            "docstring": "\"\"\"\nUnassign an issue in Jira.\n\nThis script defines a function 'cli_unassign' that unassigns an issue in Jira. It takes two arguments:\n- jira: An instance of the Jira API client.\n- args: A namespace containing the issue key to unassign.\n\nIt returns a boolean value:\n- True if the issue was successfully unassigned.\n- False otherwise.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "dfcc2b7a21e7d9e0ce5c47c4bae3e99ae9de2804",
            "docstring": "\"\"\"\nUnassign an issue in Jira.\n\nThis script defines a function 'cli_unassign' that unassigns an issue in Jira. It takes two arguments:\n- jira: An instance of the Jira API client.\n- args: A namespace containing the issue key to unassign.\n\nIt returns a boolean value:\n- True if the issue was successfully unassigned.\n- False otherwise.\n\"\"\"",
            "last_accessed": 1745613320
        }
    ],
    "jira_creator/commands/cli_blocked.py": [
        {
            "sha1": "303178d7f2c5a8db44831d473af5233a7b7219e8",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) function for fetching and displaying blocked issues from a Jira\nproject.\n\nThe primary function, `cli_blocked`, interfaces with the Jira API to retrieve issues based on specified criteria,\nincluding project, component, and optionally user. It handles the display of blocked issues, showing relevant details\nsuch as issue key, status, assignee, reason, and summary. If no issues are found, it notifies the user accordingly. The\nfunction also manages exceptions by raising a `ListBlockedError` when an error occurs during the issue retrieval\nprocess.\n\nNote: Sections of code marked with 'jscpd:ignore-start' and 'jscpd:ignore-end' are excluded from code duplication\nchecks.\n\"\"\"",
            "last_accessed": 1745517655
        },
        {
            "sha1": "275e6fc656057567affeb2fb8d91006697988ca9",
            "docstring": "\"\"\"\nRetrieve a list of blocked issues from Jira based on specified criteria.\n\nArguments:\n- jira (JIRA): An instance of the JIRA API client.\n- args (Namespace): An object containing the following attributes:\n  - project (str): The project key to filter the blocked issues.\n  - component (str): The component to filter the blocked issues.\n  - user (str, optional): The user to filter the blocked issues. If not provided, the current user will be used.\n\nReturn:\n- list: A list of blocked issues retrieved based on the specified criteria.\n\nExceptions:\n- ListBlockedError: Raised when there is an error listing blocked issues.\n\nSide Effects:\n- Prints information about the retrieved blocked issues and status messages.\n\"\"\"",
            "last_accessed": 1745517658
        },
        {
            "sha1": "cd026cf225266d86ba7ab831b82fd2da9a83ba75",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) function for fetching and displaying blocked issues from a Jira\nproject.\n\nThe primary function, `cli_blocked`, interfaces with the Jira API to retrieve issues based on specified criteria,\nincluding project, component, and optionally user. It handles the display of blocked issues, showing relevant details\nsuch as issue key, status, assignee, reason, and summary. If no issues are found, it notifies the user accordingly. The\nfunction also manages exceptions by raising a `ListBlockedError` when an error occurs during the issue retrieval\nprocess.\n\nNote: Sections of code marked with 'jscpd:ignore-start' and 'jscpd:ignore-end' are excluded from code duplication\nchecks.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "7c1ea180297d5825aedbee5c7bf9af83b9cb0fa5",
            "docstring": "\"\"\"\nRetrieve a list of blocked issues from Jira based on specified criteria.\n\nArguments:\n- jira (JIRA): An instance of the JIRA API client.\n- args (Namespace): An object containing the following attributes:\n  - project (str): The project key to filter the blocked issues.\n  - component (str): The component to filter the blocked issues.\n  - user (str, optional): The user to filter the blocked issues. If not provided, the current user will be used.\n\nReturn:\n- list: A list of blocked issues retrieved based on the specified criteria.\n\nExceptions:\n- ListBlockedError: Raised when there is an error listing blocked issues.\n\nSide Effects:\n- Prints information about the retrieved blocked issues and status messages.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "cadb8ee462b25e6046cdb6b47f75e335ffd55419",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) function for fetching and displaying blocked issues from a Jira\nproject.\n\nThe primary function, `cli_blocked`, interfaces with the Jira API to retrieve issues based on specified criteria,\nincluding project, component, and optionally user. It handles the display of blocked issues, showing relevant details\nsuch as issue key, status, assignee, reason, and summary. If no issues are found, it notifies the user accordingly. The\nfunction also manages exceptions by raising a `ListBlockedError` when an error occurs during the issue retrieval\nprocess.\n\nNote: Sections of code marked with 'jscpd:ignore-start' and 'jscpd:ignore-end' are excluded from code duplication\nchecks.\n\"\"\"",
            "last_accessed": 1745613320
        }
    ],
    "jira_creator/commands/cli_remove_flag.py": [
        {
            "sha1": "13c3f2afc7f3247cb67545b983557e911f16938c",
            "docstring": "\"\"\"\nThis module contains a function to remove a flag from a Jira issue using the provided Jira instance and command-line\narguments.\n\nThe 'cli_remove_flag' function takes two parameters:\n- jira: An instance of the Jira API client.\n- args: A dictionary containing the following key:\n- issue_key (str): The key of the issue from which the flag will be removed.\n\nIt attempts to remove the flag from the specified issue using the 'jira.remove_flag' method. If successful, it prints a\nsuccess message indicating the flag removal. If an exception occurs during the removal process, it prints an error\nmessage and raises a 'RemoveFlagError' with details of the failure.\n\nNote: The 'RemoveFlagError' exception is imported from 'exceptions.exceptions' module.\n\"\"\"\n\ndef cli_remove_flag(jira, args):\n    \"\"\"\n    Remove a flag from a Jira issue.\n\n    Arguments:\n    - jira: An instance of the Jira API client.\n    - args: A dictionary containing the following key:\n    - issue_key (str): The key of the issue from which the flag will be removed.\n\n    Return:\n    - The response from the Jira API after removing the flag.\n\n    Exceptions:\n    - RemoveFlagError: Raised if there is an issue while removing the flag from the Jira issue.\n\n    Side Effects:\n    - Prints a success message if the flag is removed successfully.\n    - Prints an error message if there is a failure while removing the flag.\n    \"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "48e0f8c2e64f8d743c7f82774dc903672c770b7b",
            "docstring": "\"\"\"\nRemove a flag from a Jira issue.\n\nArguments:\n- jira: An instance of the Jira API client.\n- args: A dictionary containing the following key:\n  - issue_key (str): The key of the issue from which the flag will be removed.\n\nReturn:\n- The response from the Jira API after removing the flag.\n\nExceptions:\n- RemoveFlagError: Raised if there is an issue while removing the flag from the Jira issue.\n\nSide Effects:\n- Prints a success message if the flag is removed successfully.\n- Prints an error message if there is a failure while removing the flag.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "8ad0635a1b1fb555db19bd541573982e5a082003",
            "docstring": "\"\"\"\nThis module contains a function to remove a flag from a Jira issue using the provided Jira instance and command-line\narguments.\n\nThe 'cli_remove_flag' function takes two parameters:\n- jira: An instance of the Jira API client.\n- args: A dictionary containing the following key:\n  - issue_key (str): The key of the issue from which the flag will be removed.\n\nIt attempts to remove the flag from the specified issue using the 'jira.remove_flag' method. If successful, it prints a\nsuccess message indicating the flag removal. If an exception occurs during the removal process, it prints an error\nmessage and raises a 'RemoveFlagError' with details of the failure.\n\nNote: The 'RemoveFlagError' exception is imported from 'exceptions.exceptions' module.\n\"\"\"",
            "last_accessed": 1745563933
        },
        {
            "sha1": "aad80bbb40f863666f711991a838feb62cee4382",
            "docstring": "\"\"\"\nRemove a flag from a Jira issue.\n\nArguments:\n- jira: An instance of the Jira API client.\n- args: A dictionary containing the following key:\n    - issue_key (str): The key of the issue from which the flag will be removed.\n\nReturn:\n- The response from the Jira API after removing the flag.\n\nExceptions:\n- RemoveFlagError: Raised if there is an issue while removing the flag from the Jira issue.\n\nSide Effects:\n- Prints a success message if the flag is removed successfully.\n- Prints an error message if there is a failure while removing the flag.\n\"\"\"",
            "last_accessed": 1745566272
        },
        {
            "sha1": "9780012e8c9205756f39c1ae5c66c56d5ebd00e5",
            "docstring": "\"\"\"\nThis module contains a function to remove a flag from a Jira issue using the provided Jira instance and command-line\narguments.\n\nThe 'cli_remove_flag' function takes two parameters:\n- jira: An instance of the Jira API client.\n- args: A dictionary containing the following key:\n- issue_key (str): The key of the issue from which the flag will be removed.\n\nIt attempts to remove the flag from the specified issue using the 'jira.remove_flag' method. If successful, it prints a\nsuccess message indicating the flag removal. If an exception occurs during the removal process, it prints an error\nmessage and raises a 'RemoveFlagError' with details of the failure.\n\nNote: The 'RemoveFlagError' exception is imported from 'exceptions.exceptions' module.\n\"\"\"",
            "last_accessed": 1745566272
        }
    ],
    "jira_creator/commands/__init__.py": [
        {
            "sha1": "0659b6d8c65a228a6be64945cb8ccb096f14afc1",
            "docstring": "\"\"\"\nThis file includes multiple CLI commands for managing issues and users in a project management system. Each CLI command\nis imported from a corresponding module in the package. The CLI commands cover various functionalities such as adding\ncomments, flags, sprints, assigning tasks, editing issues, linting, listing issues and sprints, searching, setting\ncriteria, priorities, status, story details, talking, unassigning, unblocking, validating, viewing, and voting on story\npoints. These commands provide a comprehensive set of tools for interacting with the project management system via the\ncommand line interface.\n\"\"\"",
            "last_accessed": 1745520328
        },
        {
            "sha1": "c752e0edea8be2b5c7b69bcb79b949aeed09e93e",
            "docstring": "\"\"\"\nThis file includes multiple CLI commands for managing issues and users in a project management system. Each CLI command\nis imported from a corresponding module in the package. The CLI commands cover various functionalities such as adding\ncomments, flags, sprints, assigning tasks, editing issues, linting, listing issues and sprints, searching, setting\ncriteria, priorities, status, story details, talking, unassigning, unblocking, validating, viewing, and voting on story\npoints. These commands provide a comprehensive set of tools for interacting with the project management system via the\ncommand line interface.\n\"\"\"",
            "last_accessed": 1745566272
        },
        {
            "sha1": "3006499a04636fa9c58e2d6dede1e005e796782d",
            "docstring": "\"\"\"\nThis file includes multiple CLI commands for managing issues and users in a project management system. Each CLI command\nis imported from a corresponding module in the package. The CLI commands cover various functionalities such as adding\ncomments, flags, sprints, assigning tasks, editing issues, linting, listing issues and sprints, searching, setting\ncriteria, priorities, status, story details, talking, unassigning, unblocking, validating, viewing, and voting on story\npoints. These commands provide a comprehensive set of tools for interacting with the project management system via the\ncommand line interface.\n\"\"\"",
            "last_accessed": 1745613446
        }
    ],
    "jira_creator/commands/cli_quarterly_connection.py": [
        {
            "sha1": "889c8d864ca979d4b607805cab3cce94120c8503",
            "docstring": "\"\"\"\nThis script defines a function cli_quarterly_connection that builds an employee report based on JIRA issues. It\nsearches for issues within the last 90 days, retrieves relevant information, and processes it using a PromptLibrary. In\ncase of a QuarterlyConnectionError, it handles the exception and re-raises it.\n\nFunctions:\n- cli_quarterly_connection: Builds a quarterly employee report based on JIRA issues assigned to the current user.\n\nArguments:\n- jira: A JIRA API client for interacting with JIRA issues.\n- ai_provider: An AI provider for generating insights from the JIRA issues.\n\nExceptions:\n- Raises exceptions if there are any issues with searching JIRA issues.\n\nSide Effects:\n- Prints \"Building employee report\".\n\nNote: This function fetches JIRA issues created, resolved, updated, or commented on by the current user within the\nlast 90 days.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "a91db1cd9c8ad40319a0f05069a274860a8c1f88",
            "docstring": "\"\"\"\nBuilds a quarterly employee report based on JIRA issues assigned to the current user.\n\nArguments:\n- jira: A JIRA API client for interacting with JIRA issues.\n- ai_provider: An AI provider for generating insights from the JIRA issues.\n\nExceptions:\n- Raises exceptions if there are any issues with searching JIRA issues.\n\nSide Effects:\n- Prints \"Building employee report\".\n\nNote: This function fetches JIRA issues created, resolved, updated, or commented on by the current user within the last 90 days.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "3b2774f29ca06c77beefa49583e32eafe21f566a",
            "docstring": "\"\"\"\nThis script defines a function cli_quarterly_connection that builds an employee report based on JIRA issues. It\nsearches for issues within the last 90 days, retrieves relevant information, and processes it using a PromptLibrary. In\ncase of a QuarterlyConnectionError, it handles the exception and re-raises it.\n\nFunctions:\n- cli_quarterly_connection: Builds a quarterly employee report based on JIRA issues assigned to the current user.\n\nArguments:\n- jira: A JIRA API client for interacting with JIRA issues.\n- ai_provider: An AI provider for generating insights from the JIRA issues.\n\nExceptions:\n- Raises exceptions if there are any issues with searching JIRA issues.\n\nSide Effects:\n- Prints \"Building employee report\".\n\nNote: This function fetches JIRA issues created, resolved, updated, or commented on by the current user within the\nlast 90 days.\n\"\"\"",
            "last_accessed": 1745566272
        }
    ],
    "jira_creator/commands/cli_vote_story_points.py": [
        {
            "sha1": "9ee1b7d1198981722cb12c0622110094893b399e",
            "docstring": "\"\"\"\nThis script defines a function 'cli_vote_story_points' that allows users to vote on story points in a Jira issue. The\nfunction takes two arguments: 'jira' (representing a Jira instance) and 'args' (containing issue key and points to\nvote). It attempts to convert the points to an integer and then calls the 'vote_story_points' method on the Jira\ninstance. If successful, it prints a success message. If an error occurs, it prints an error message and raises a\n'VoteStoryPointsError' exception.\n\nFunction 'cli_vote_story_points':\n- Validates and converts the story points provided as input to an integer.\n- Arguments:\n- jira: the Jira object used for interaction.\n- args: a dictionary containing the arguments passed from the command-line interface.\n- args.points: a string representing the story points to be converted to an integer.\n- Return:\n- False if the provided story points cannot be converted to an integer.\n- Exceptions:\n- ValueError: Raised when the provided story points cannot be converted to an integer.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "79dda0e4af32de8dc63a3e2ee448849614f37bbd",
            "docstring": "\"\"\"\nThis function validates and converts the story points provided as input to an integer.\n\nArguments:\n- jira: the Jira object used for interaction.\n- args: a dictionary containing the arguments passed from the command-line interface.\n    - args.points: a string representing the story points to be converted to an integer.\n\nReturn:\n- False if the provided story points cannot be converted to an integer.\n\nExceptions:\n- ValueError: Raised when the provided story points cannot be converted to an integer.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "d34c9e320a007abb1dd2cecb0c80bce4bbe5833e",
            "docstring": "\"\"\"\nThis script defines a function 'cli_vote_story_points' that allows users to vote on story points in a Jira issue. The\nfunction takes two arguments: 'jira' (representing a Jira instance) and 'args' (containing issue key and points to\nvote). It attempts to convert the points to an integer and then calls the 'vote_story_points' method on the Jira\ninstance. If successful, it prints a success message. If an error occurs, it prints an error message and raises a\n'VoteStoryPointsError' exception.\n\nFunction 'cli_vote_story_points':\n- Validates and converts the story points provided as input to an integer.\n- Arguments:\n  - jira: the Jira object used for interaction.\n  - args: a dictionary containing the arguments passed from the command-line interface.\n    - args.points: a string representing the story points to be converted to an integer.\n- Return:\n  - False if the provided story points cannot be converted to an integer.\n- Exceptions:\n  - ValueError: Raised when the provided story points cannot be converted to an integer.\n\"\"\"",
            "last_accessed": 1745566272
        }
    ],
    "jira_creator/commands/cli_assign.py": [
        {
            "sha1": "d39c9f373577599023ae4fc3101af982a67bec1f",
            "docstring": "\"\"\"\nAssigns an issue in Jira to a specific assignee.\n\nArguments:\n- jira (JIRA): A JIRA client object used to interact with the Jira API.\n- args (Namespace): An object containing parsed command-line arguments, including:\n    - issue_key (str): The key of the issue to be assigned.\n    - assignee (str): The username of the user to whom the issue will be assigned.\n\nReturn:\n- bool: True if the issue was successfully assigned, False otherwise.\n\nSide Effects:\n- Prints a message indicating whether the issue assignment was successful or not.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "b4bbb1659a72f580e7e6caf3fb10446c0d8cf011",
            "docstring": "\"\"\"\nAssigns an issue in Jira to a specific assignee.\n\nArguments:\n- jira (JIRA): A JIRA client object used to interact with the Jira API.\n- args (Namespace): An object containing parsed command-line arguments, including:\n  - issue_key (str): The key of the issue to be assigned.\n  - assignee (str): The username of the user to whom the issue will be assigned.\n\nReturn:\n- bool: True if the issue was successfully assigned, False otherwise.\n\nSide Effects:\n- Prints a message indicating whether the issue assignment was successful or not.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "b1ebc714bdaca71f441e314be07570f94527b92c",
            "docstring": "\"\"\"\nAssigns an issue in Jira to a specific assignee.\n\nArguments:\n- jira (JIRA): A JIRA client object used to interact with the Jira API.\n- args (Namespace): An object containing parsed command-line arguments, including:\n- issue_key (str): The key of the issue to be assigned.\n- assignee (str): The username of the user to whom the issue will be assigned.\n\nReturn:\n- bool: True if the issue was successfully assigned, False otherwise.\n\nSide Effects:\n- Prints a message indicating whether the issue assignment was successful or not.\n\"\"\"",
            "last_accessed": 1745566272
        }
    ],
    "jira_creator/commands/cli_lint.py": [
        {
            "sha1": "778f152964a1e7901fe1ec3155c4dffb2e5e5a2d",
            "docstring": "\"\"\"\nThis module provides a function cli_lint that performs linting on a Jira issue using an AI provider.\nIt makes a request to Jira to retrieve issue details, validates the fields with the AI provider, and prints lint issues\nif any.\nIf lint issues are found, it returns the problems; otherwise, it indicates a successful lint check.\nIn case of a LintError exception, it prints an error message and raises the exception.\n\nFunction cli_lint:\n- Fetches an issue from Jira using the provided issue key and performs linting on the issue fields.\n- Arguments:\n- jira: Jira client object used to interact with the Jira API.\n- ai_provider: AI provider object for performing linting operations.\n- args: Command-line arguments containing the issue key.\n- Exceptions:\n- This function does not handle any exceptions explicitly. Any exceptions raised during Jira API requests will\npropagate.\n- Side Effects:\n- Modifies the 'key' field in the retrieved Jira issue.\n- Note: This function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "0e297087320095621a66b2c566ad738f91416164",
            "docstring": "\"\"\"\nFetches an issue from Jira using the provided issue key and performs linting on the issue fields.\n\nArguments:\n- jira: Jira client object used to interact with the Jira API.\n- ai_provider: AI provider object for performing linting operations.\n- args: Command-line arguments containing the issue key.\n\nExceptions:\n- This function does not handle any exceptions explicitly. Any exceptions raised during Jira API requests will propagate.\n\nSide Effects:\n- Modifies the 'key' field in the retrieved Jira issue.\n\nNote: This function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "489dbd3b7955b70f77af9538e0b13885708f495e",
            "docstring": "\"\"\"\nThis module provides a function cli_lint that performs linting on a Jira issue using an AI provider.\nIt makes a request to Jira to retrieve issue details, validates the fields with the AI provider, and prints lint issues\nif any.\nIf lint issues are found, it returns the problems; otherwise, it indicates a successful lint check.\nIn case of a LintError exception, it prints an error message and raises the exception.\n\nFunction cli_lint:\n- Fetches an issue from Jira using the provided issue key and performs linting on the issue fields.\n- Arguments:\n    - jira: Jira client object used to interact with the Jira API.\n    - ai_provider: AI provider object for performing linting operations.\n    - args: Command-line arguments containing the issue key.\n- Exceptions:\n    - This function does not handle any exceptions explicitly. Any exceptions raised during Jira API requests will\n      propagate.\n- Side Effects:\n    - Modifies the 'key' field in the retrieved Jira issue.\n- Note: This function does not have a return value.\n\"\"\"",
            "last_accessed": 1745566272
        }
    ],
    "jira_creator/commands/cli_clone_issue.py": [
        {
            "sha1": "abc956645fb73ad38c7ba3f8a2b8c2624a04389b",
            "docstring": "\"\"\"\nClones a Jira issue by adding a flag to it.\n\nArguments:\n- jira (Jira): An instance of the Jira API client.\n- args (dict): A dictionary containing the following key:\n  - issue_key (str): The key of the issue to be cloned.\n\nReturn:\n- dict: The response from adding a flag to the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "1962366093dd6dc9bdc763a44093a696edf60e3b",
            "docstring": "\"\"\"\nClones a Jira issue by adding a flag to it.\n\nArguments:\n- jira (Jira): An instance of the Jira API client.\n- args (dict): A dictionary containing the following key:\n    - issue_key (str): The key of the issue to be cloned.\n\nReturn:\n- dict: The response from adding a flag to the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "af8baa4181cefebf09cab9d37a5dbdd858854221",
            "docstring": "\"\"\"\nClones a Jira issue by adding a flag to it.\n\nArguments:\n- jira (Jira): An instance of the Jira API client.\n- args (dict): A dictionary containing the following key:\n  - issue_key (str): The key of the issue to be cloned.\n\nReturn:\n- dict: The response from adding a flag to the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745566272
        }
    ],
    "jira_creator/commands/cli_lint_all.py": [
        {
            "sha1": "b73e309fdbff8503d50a1b0d140b7995aaa046d5",
            "docstring": "\"\"\"\nThis module provides functionality to lint Jira issues and display the results in a formatted table. It includes two main functions:\n\n1. `print_status_table(failure_statuses)`:\n   - Accepts a list of failure statuses and prints them in a structured table format.\n   - Normalizes status values for improved readability using visual indicators.\n\n2. `cli_lint_all(jira, ai_provider, args)`:\n   - Lints Jira issues based on specified command-line arguments such as project, component, reporter, or assignee.\n   - Retrieves issues from Jira, validates them with an AI provider, and summarizes the results.\n   - Outputs which issues passed or failed lint checks along with detailed problems for any issues that failed.\n\nExceptions:\n- Raises `LintAllError` if there is a failure during the linting process.\n\nThis module is designed for use in a command-line interface (CLI) environment, enabling users to validate Jira issues and receive formatted feedback on their status.\n\"\"\"",
            "last_accessed": 1745517702
        },
        {
            "sha1": "0df07dd716deb3ab0a831f6b4bc25b1c9443f528",
            "docstring": "\"\"\"\nCollects all unique keys from all rows in the failure_statuses table.\n\nArguments:\n- failure_statuses (list of dict): A list of dictionaries representing failure statuses.\n\nReturns:\nNone\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "8862ad55a8b9c4acceafa2c7ac1a6588c8b9f54f",
            "docstring": "\"\"\"\nLint all Jira issues based on specified criteria.\n\nArguments:\n- jira (JIRA): An instance of the JIRA client.\n- ai_provider (AIProvider): An instance of the AI provider.\n- args (Namespace): A namespace object containing parsed command-line arguments.\n- args.reporter (str): The reporter of the issues to filter by.\n- args.assignee (str): The assignee of the issues to filter by.\n- args.project (str): The project key to filter the issues.\n- args.component (str): The component to filter the issues.\n\nExceptions:\n- LintAllError: Raised if there is an issue during the linting process.\n\"\"\"",
            "last_accessed": 1745517705
        },
        {
            "sha1": "1665208254d19f9e652d46635449f8bf853cad87",
            "docstring": "\"\"\"\nThis module provides tools for linting Jira issues and presenting the results in a well-structured table format. It contains two primary functions:\n\n1. `print_status_table(failure_statuses)`:\n   - Takes a list of failure statuses and displays them in a formatted table.\n   - Normalizes status values for better readability with visual indicators.\n\n2. `cli_lint_all(jira, ai_provider, args)`:\n   - Lints Jira issues based on command-line arguments such as project, component, reporter, or assignee.\n   - Retrieves issues from Jira, validates them using an AI provider, and summarizes the results.\n   - Outputs the status of each issue, indicating which passed or failed lint checks, along with detailed feedback for any failures.\n\nExceptions:\n- Raises `LintAllError` if there is a failure during the linting process.\n\nThis module is intended for use in a command-line interface (CLI) environment, allowing users to validate and receive formatted feedback on Jira issues.\n\"\"\"",
            "last_accessed": 1745518623
        },
        {
            "sha1": "cb391dfe6d73b53d21dda0a8dd18d207267b7340",
            "docstring": "\"\"\"\nLint all Jira issues based on specified criteria.\n\nArguments:\n- jira (JIRA): An instance of the JIRA client.\n- ai_provider (AIProvider): An instance of the AI provider.\n- args (Namespace): A namespace object containing parsed command-line arguments.\n- args.reporter (str): The reporter of the issues to filter by.\n- args.assignee (str): The assignee of the issues to filter by.\n- args.project (str): The project key to filter the issues.\n- args.component (str): The component to filter the issues.\n\nExceptions:\n- LintAllError: Raised if there is an issue during the linting process.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "5cedc2819dc6678b3ce4921a54d35e3011f99291",
            "docstring": "\"\"\"\nThis module provides tools for linting Jira issues and presenting the results in a well-structured table format. It\ncontains two primary functions:\n\n1. `print_status_table(failure_statuses)`:\n   - Takes a list of failure statuses and displays them in a formatted table.\n   - Normalizes status values for better readability with visual indicators.\n\n2. `cli_lint_all(jira, ai_provider, args)`:\n   - Lints Jira issues based on command-line arguments such as project, component, reporter, or assignee.\n   - Retrieves issues from Jira, validates them using an AI provider, and summarizes the results.\n   - Outputs the status of each issue, indicating which passed or failed lint checks, along with detailed feedback for any\n     failures.\n\nExceptions:\n- Raises `LintAllError` if there is a failure during the linting process.\n\nThis module is intended for use in a command-line interface (CLI) environment, allowing users to validate and receive\nformatted feedback on Jira issues.\n\"\"\"",
            "last_accessed": 1745566272
        },
        {
            "sha1": "85f03f78731bfbe065cea27f7372cc1d2e32a281",
            "docstring": "\"\"\"\nThis module provides tools for linting Jira issues and presenting the results in a well-structured table format. \n\nIt contains two primary functions:\n\n1. `print_status_table(failure_statuses)`:\n   - Displays a formatted table of failure statuses.\n   - Normalizes status values for better readability using visual indicators.\n\n2. `cli_lint_all(jira, ai_provider, args)`:\n   - Lints Jira issues based on command-line arguments such as project, component, reporter, or assignee.\n   - Validates issues retrieved from Jira using an AI provider and summarizes the results.\n   - Outputs the status of each issue, indicating which passed or failed lint checks, along with detailed feedback for any failures.\n\nExceptions:\n- Raises `LintAllError` if there is a failure during the linting process.\n\nThis module is intended for use in a command-line interface (CLI) environment, allowing users to validate and receive formatted feedback on Jira issues.\n\"\"\"",
            "last_accessed": 1745608362
        },
        {
            "sha1": "b0bd2336867fe93b9246ff6add2949998535b71f",
            "docstring": "\"\"\"\nThis module provides tools for linting Jira issues and presenting the results in a well-structured table format.\n\nIt contains two primary functions:\n\n1. `print_status_table(failure_statuses)`:\n   - Displays a formatted table of failure statuses.\n   - Normalizes status values for better readability using visual indicators.\n\n2. `cli_lint_all(jira, ai_provider, args)`:\n   - Lints Jira issues based on command-line arguments such as project, component, reporter, or assignee.\n   - Validates issues retrieved from Jira using an AI provider and summarizes the results.\n   - Outputs the status of each issue, indicating which passed or failed lint checks, along with detailed feedback for any failures.\n\nExceptions:\n- Raises `LintAllError` if there is a failure during the linting process.\n\nThis module is intended for use in a command-line interface (CLI) environment, allowing users to validate and receive formatted feedback on Jira issues.\n\"\"\"",
            "last_accessed": 1745613446
        }
    ],
    "jira_creator/commands/cli_migrate.py": [
        {
            "sha1": "1ec26181f3d1a59285078666275781a47b8eabe6",
            "docstring": "\"\"\"\nThis script defines a function 'cli_migrate' that migrates an issue in Jira to a new issue type.\nIt takes Jira instance and command line arguments as input, migrates the issue, and prints the migration details.\nIf the migration fails, it raises a MigrateError with an appropriate error message.\n\nFunction:\n- cli_migrate(jira, args)\nMigrate an issue in Jira to a new type.\n\nArguments:\n- jira (JiraClient): An instance of the Jira client.\n- args (Namespace): A namespace containing the following attributes:\n    - issue_key (str): The key of the issue to be migrated.\n    - new_type (str): The new type to migrate the issue to.\n\nReturn:\n- str: The new key of the migrated issue.\n\nExceptions:\n- MigrateError: Raised if the migration process fails.\n\nSide Effects:\n- Prints the success message if the migration is successful.\n- Prints the error message if the migration fails.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "41beb5c7d39e8bf94d31e43d7cab5f5cb69ebe6e",
            "docstring": "\"\"\"\nMigrate an issue in Jira to a new type.\n\nArguments:\n- jira (JiraClient): An instance of the Jira client.\n- args (Namespace): A namespace containing the following attributes:\n    - issue_key (str): The key of the issue to be migrated.\n    - new_type (str): The new type to migrate the issue to.\n\nReturn:\n- str: The new key of the migrated issue.\n\nExceptions:\n- MigrateError: Raised if the migration process fails.\n\nSide Effects:\n- Prints the success message if the migration is successful.\n- Prints the error message if the migration fails.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "d92eade1e7147160aa172b2ea4e344d344d93d6a",
            "docstring": "\"\"\"\nThis script defines a function 'cli_migrate' that migrates an issue in Jira to a new issue type.\nIt takes Jira instance and command line arguments as input, migrates the issue, and prints the migration details.\nIf the migration fails, it raises a MigrateError with an appropriate error message.\n\nFunction:\n- cli_migrate(jira, args)\nMigrate an issue in Jira to a new type.\n\nArguments:\n- jira (JiraClient): An instance of the Jira client.\n- args (Namespace): A namespace containing the following attributes:\n- issue_key (str): The key of the issue to be migrated.\n- new_type (str): The new type to migrate the issue to.\n\nReturn:\n- str: The new key of the migrated issue.\n\nExceptions:\n- MigrateError: Raised if the migration process fails.\n\nSide Effects:\n- Prints the success message if the migration is successful.\n- Prints the error message if the migration fails.\n\"\"\"",
            "last_accessed": 1745566272
        }
    ],
    "jira_creator/rest/ops/set_summary.py": [
        {
            "sha1": "693d152f29d128d67cd964d4855ed81162282ce7",
            "docstring": "\"\"\"\nSets a summary for a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue for which the summary will be set.\n- summary (str): The new summary.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745517233
        },
        {
            "sha1": "d57871bcdda3543205740fa1e1ca15ed6c2c82b7",
            "docstring": "\"\"\"\nSets a summary for a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue for which the summary will be set.\n- summary (str): The new summary.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745520325
        },
        {
            "sha1": "2101858d08f077ddb2f6bbe436d84354f0b70460",
            "docstring": "\"\"\"\nSets a summary for a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue for which the summary will be set.\n- summary (str): The new summary.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745563495
        },
        {
            "sha1": "bfb9631cba0655584ce479622ada222d073e85dd",
            "docstring": "\"\"\"\nSets a summary for a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue for which the summary will be set.\n- summary (str): The new summary.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745563497
        },
        {
            "sha1": "71412ffc0ce4fd2d87ac921cc2ea3f164c6528be",
            "docstring": "\"\"\"\nSets a summary for a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue for which the summary will be set.\n- summary (str): The new summary.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745566155
        },
        {
            "sha1": "9c5d4fb2c44a1cc25a2bff1d71ce20f4d61cbfec",
            "docstring": "\"\"\"\nSets a summary for a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue for which the summary will be set.\n- summary (str): The new summary.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745566155
        },
        {
            "sha1": "a8abf3394934d9f9774a5777f4bdac378c0c700d",
            "docstring": "\"\"\"\nSets a summary for a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue for which the summary will be set.\n- summary (str): The new summary.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745613270
        },
        {
            "sha1": "30e49cad1d2fbbeb6464dc0b72ab0242f3ae300f",
            "docstring": "\"\"\"\nSets a summary for a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue for which the summary will be set.\n- summary (str): The new summary.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745613377
        },
        {
            "sha1": "39afae31849ebfff7d738e9a541d12c301fd516f",
            "docstring": "\"\"\"\nSets a summary for a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue for which the summary will be set.\n- summary (str): The new summary.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745613377
        }
    ],
    "jira_creator/rest/ops/set_status.py": [
        {
            "sha1": "c0954fe3ca5f66aeb74534fca1f0ebd42380cf93",
            "docstring": "\"\"\"\nThis module provides a function to set the status of an issue in a Jira system using the provided request function.\n\nFunctions:\n- set_status(request_fn, issue_key, target_status): Sets the status of the given issue to the provided target status by\nmaking API calls using the request function.\n\nRaises:\n- SetStatusError: Custom exception raised when the target status is not found in the valid transitions for the issue.\n\nNote:\n- The request function should be capable of making HTTP requests to the Jira API.\n\"\"\"\n\ndef set_status(request_fn, issue_key, target_status):\n    \"\"\"\n    Retrieve the available transitions for a given issue and set its status to a target status.\n\n    Arguments:\n    - request_fn (function): A function used to make HTTP requests.\n    - issue_key (str): The key identifying the issue to update.\n    - target_status (str): The desired status to set for the issue.\n\n    Returns:\n    This function does not return anything.\n\n    Exceptions:\n    - SetStatusError: Raised if the target status is not found in the available transitions.\n\n    Side Effects:\n    - Modifies the status of the specified issue.\n    - Prints the available transitions if the target status is not found.\n    - Prints a success message after changing the status of the issue.\n\n    \"\"\"\n\"\"\"",
            "last_accessed": 1745520325
        },
        {
            "sha1": "6a78b3ae16246a9d4003b7b79b93ce921b16c432",
            "docstring": "\"\"\"\nRetrieve the available transitions for a given issue and set its status to a target status.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key identifying the issue to update.\n- target_status (str): The desired status to set for the issue.\n\nExceptions:\n- SetStatusError: Raised if the target status is not found in the available transitions.\n\nSide Effects:\n- Modifies the status of the specified issue.\n- Prints the available transitions if the target status is not found.\n- Prints a success message after changing the status of the issue.\n\"\"\"",
            "last_accessed": 1745520325
        },
        {
            "sha1": "41ec2751eadc1e0db36602fd305851b2cfb954f2",
            "docstring": "\"\"\"\nThis module provides a function to set the status of an issue in a Jira system using the provided request function.\n\nFunctions:\n- set_status(request_fn, issue_key, target_status): Sets the status of the given issue to the provided target status by\nmaking API calls using the request function.\n\nRaises:\n- SetStatusError: Custom exception raised when the target status is not found in the valid transitions for the issue.\n\nNote:\n- The request function should be capable of making HTTP requests to the Jira API.\n\"\"\"",
            "last_accessed": 1745563500
        },
        {
            "sha1": "a79c7eaf2008fc2610b124e834e09b3a4bcb05d7",
            "docstring": "\"\"\"\nRetrieve the available transitions for a given issue and set its status to a target status.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key identifying the issue to update.\n- target_status (str): The desired status to set for the issue.\n\nReturns:\nThis function does not return anything.\n\nExceptions:\n- SetStatusError: Raised if the target status is not found in the available transitions.\n\nSide Effects:\n- Modifies the status of the specified issue.\n- Prints the available transitions if the target status is not found.\n- Prints a success message after changing the status of the issue.\n\"\"\"",
            "last_accessed": 1745563503
        },
        {
            "sha1": "4ef58728a6f169ce5c4f8bd1c673d6d280cafd04",
            "docstring": "\"\"\"\nThis module provides functionality to update the status of issues in a Jira system through a specified request function.\n\nFunctions:\n- set_status(request_fn, issue_key, target_status): Updates the status of a specified issue to the desired target status by making appropriate API calls.\n\nExceptions:\n- SetStatusError: Custom exception raised when the target status cannot be found in the available transitions for the issue.\n\nNotes:\n- The request function must be capable of making HTTP requests to the Jira API.\n- The module includes logic to handle special cases, such as moving an issue to the top of the backlog or its parent Epic when the target status is \"refinement\".\n\"\"\"",
            "last_accessed": 1745563854
        },
        {
            "sha1": "0cbfb3e897c52385fc5a00db3aab129d794dc343",
            "docstring": "\"\"\"\nRetrieve the available transitions for a given issue and set its status to a target status.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key identifying the issue to update.\n- target_status (str): The desired status to set for the issue.\n\nReturns:\nThis function does not return anything.\n\nExceptions:\n- SetStatusError: Raised if the target status is not found in the available transitions.\n\nSide Effects:\n- Modifies the status of the specified issue.\n- Prints the available transitions if the target status is not found.\n- Prints a success message after changing the status of the issue.\n\"\"\"",
            "last_accessed": 1745566155
        },
        {
            "sha1": "52d68bdd45e9bb024864d0eca9fda16acff6bada",
            "docstring": "\"\"\"\nThis module provides functionality to update the status of issues in a Jira system through a specified request function.\n\nFunctions:\n- set_status(request_fn, issue_key, target_status): Updates the status of a specified issue to the desired target\nstatus by making appropriate API calls.\n\nExceptions:\n- SetStatusError: Custom exception raised when the target status cannot be found in the available transitions for the\nissue.\n\nNotes:\n- The request function must be capable of making HTTP requests to the Jira API.\n- The module includes logic to handle special cases, such as moving an issue to the top of the backlog or its parent\nEpic when the target status is \"refinement\".\n\"\"\"",
            "last_accessed": 1745566155
        },
        {
            "sha1": "8bdd174cb03ab87374244a3c8950e435df077ff4",
            "docstring": "\"\"\"\nThis module provides functionality to update the status of issues in a Jira system through a specified request function.\n\nFunctions:\n- set_status(request_fn, issue_key, target_status): Updates the status of a specified issue to the desired target\nstatus by making appropriate API calls.\n\nExceptions:\n- SetStatusError: Custom exception raised when the target status cannot be found in the available transitions for the\nissue.\n\nNotes:\n- The request function must be capable of making HTTP requests to the Jira API.\n- The module includes logic to handle special cases, such as moving an issue to the top of the backlog or its parent\nEpic when the target status is \"refinement\".\n\"\"\"",
            "last_accessed": 1745613270
        },
        {
            "sha1": "0ebcd2fc0145b27ce170e85aec2b8f60dd3c0907",
            "docstring": "\"\"\"\nRetrieve the available transitions for a given issue and set its status to a target status.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key identifying the issue to update.\n- target_status (str): The desired status to set for the issue.\n\nReturns:\nThis function does not return anything.\n\nExceptions:\n- SetStatusError: Raised if the target status is not found in the available transitions.\n\nSide Effects:\n- Modifies the status of the specified issue.\n- Prints the available transitions if the target status is not found.\n- Prints a success message after changing the status of the issue.\n\"\"\"",
            "last_accessed": 1745613380
        },
        {
            "sha1": "556b25dd6ab1fe7497624367418eaa36877746ed",
            "docstring": "\"\"\"\nThis module provides functionality to update the status of issues in a Jira system through a specified request function.\n\nFunctions:\n- set_status(request_fn, issue_key, target_status): Updates the status of a specified issue to the desired target\nstatus by making appropriate API calls.\n\nExceptions:\n- SetStatusError: Custom exception raised when the target status cannot be found in the available transitions for the\nissue.\n\nNotes:\n- The request function must be capable of making HTTP requests to the Jira API.\n- The module includes logic to handle special cases, such as moving an issue to the top of the backlog or its parent\nEpic when the target status is \"refinement\".\n\"\"\"",
            "last_accessed": 1745613380
        }
    ],
    "jira_creator/rest/ops/add_to_sprint_by_name.py": [
        {
            "sha1": "21006e1cc9fd8197d47517d513bd445731aba8e0",
            "docstring": "\"\"\"\nThis module provides a function to add an issue to a sprint in JIRA.\n\nThe function 'add_to_sprint_by_name' takes four parameters:\n- request_fn: a function for making HTTP requests\n- board_id: the ID of the JIRA board\n- issue_key: the key of the issue to be added to the sprint\n- sprint_name: the name of the sprint to which the issue will be added\n\nIf the 'board_id' is not provided, it raises an AddSprintError indicating that the JIRA_BOARD_ID is not set in the\nenvironment.\n\nIt retrieves the list of sprints associated with the board using the 'request_fn' function, then finds the sprint ID\ncorresponding to the provided 'sprint_name'.\n\nIf the sprint ID is not found, it raises an AddSprintError indicating that the sprint with the provided name could not\nbe found.\n\nFinally, it adds the 'issue_key' to the identified sprint using a POST request and prints a success message.\n\nNote: This function assumes the 'request_fn' function is implemented elsewhere to handle HTTP requests.\n\"\"\"",
            "last_accessed": 1745517244
        },
        {
            "sha1": "f3f55e4705afa5ee818db03ca246878a3f498d00",
            "docstring": "\"\"\"\nAdd a specified sprint to a JIRA board using its name.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- board_id (str): The ID of the JIRA board to which the sprint will be added.\n- issue_key (str): The key of the JIRA issue to be added to the sprint.\n- sprint_name (str): The name of the sprint to be added to the board.\n\nExceptions:\n- AddSprintError: Raised when the 'board_id' is not provided in the environment variables.\n\"\"\"",
            "last_accessed": 1745520325
        },
        {
            "sha1": "8bb44fd68ae49c590ed7d4ca265683bb674e9984",
            "docstring": "\"\"\"\nThis module provides a function to add an issue to a sprint in JIRA.\n\nThe function 'add_to_sprint_by_name' takes four parameters:\n- request_fn: a function for making HTTP requests\n- board_id: the ID of the JIRA board\n- issue_key: the key of the issue to be added to the sprint\n- sprint_name: the name of the sprint to which the issue will be added\n\nIf the 'board_id' is not provided, it raises an AddSprintError indicating that the JIRA_BOARD_ID is not set in the\nenvironment.\n\nIt retrieves the list of sprints associated with the board using the 'request_fn' function, then finds the sprint ID\ncorresponding to the provided 'sprint_name'.\n\nIf the sprint ID is not found, it raises an AddSprintError indicating that the sprint with the provided name could not\nbe found.\n\nFinally, it adds the 'issue_key' to the identified sprint using a POST request and prints a success message.\n\nNote: This function assumes the 'request_fn' function is implemented elsewhere to handle HTTP requests.\n\"\"\"\n\ndef add_to_sprint_by_name(request_fn, board_id, issue_key, sprint_name):\n    \"\"\"\n    Add a specified sprint to a JIRA board using its name.\n    \n    Arguments:\n    - request_fn (function): A function used to make HTTP requests.\n    - board_id (str): The ID of the JIRA board to which the sprint will be added.\n    - issue_key (str): The key of the JIRA issue to be added to the sprint.\n    - sprint_name (str): The name of the sprint to be added to the board.\n    \n    Exceptions:\n    - AddSprintError: Raised when the 'board_id' is not provided in the environment variables.\n    \"\"\"",
            "last_accessed": 1745520325
        }
    ],
    "jira_creator/rest/ops/assign_issue.py": [
        {
            "sha1": "2db19e4553a171a4c09b2f61901ad4877a6162c0",
            "docstring": "\"\"\"\nThis module provides a function to assign an issue to a specific user using a given request function.\n\nThe assign_issue function takes three parameters:\n- request_fn: a function to make a request (e.g., from requests library)\n- issue_key: the key of the issue to be assigned\n- assignee: the username of the user to whom the issue will be assigned\n\nIf successful, the function returns True. If an AssignIssueError is raised during the process, it prints an error\nmessage and raises AssignIssueError with a custom message.\n\"\"\"",
            "last_accessed": 1745517248
        },
        {
            "sha1": "c5ab0b566223a7efd1e5855f6daca422b4b0746a",
            "docstring": "\"\"\"\nAssign the specified issue to the given assignee using the provided request function.\n\nArguments:\n- request_fn (function): The function used to make HTTP requests.\n- issue_key (str): The key identifying the issue to be assigned.\n- assignee (str): The username of the user to whom the issue will be assigned.\n\nReturn:\n- bool: True if the issue was successfully assigned.\n\nExceptions:\n- AssignIssueError: Raised if there is an error while assigning the issue.\n\nSide Effects:\n- Makes an HTTP PUT request to assign the specified issue.\n- Prints an error message if the assignment fails.\n\"\"\"",
            "last_accessed": 1745566155
        },
        {
            "sha1": "61b03adb797e2d6a6cce7060391b3b7fb67a3d5d",
            "docstring": "\"\"\"\nThis module provides a function to assign an issue to a specific user using a given request function.\n\nThe assign_issue function takes three parameters:\n- request_fn: a function to make a request (e.g., from requests library)\n- issue_key: the key of the issue to be assigned\n- assignee: the username of the user to whom the issue will be assigned\n\nIf successful, the function returns True. If an AssignIssueError is raised during the process, it prints an error\nmessage and raises AssignIssueError with a custom message.\n\"\"\"",
            "last_accessed": 1745566155
        },
        {
            "sha1": "483e665652c6c380d3191b490cfe2cd344f863e7",
            "docstring": "\"\"\"\nThis module provides a function to assign an issue to a specific user using a given request function.\n\nThe assign_issue function takes three parameters:\n- request_fn: a function to make a request (e.g., from requests library)\n- issue_key: the key of the issue to be assigned\n- assignee: the username of the user to whom the issue will be assigned\n\nIf successful, the function returns True. If an AssignIssueError is raised during the process, it prints an error\nmessage and raises AssignIssueError with a custom message.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "3219eb9d787490bd33158997b4c233ee73e1832a",
            "docstring": "\"\"\"\nAssign the specified issue to the given assignee using the provided request function.\n\nArguments:\n- request_fn (function): The function used to make HTTP requests.\n- issue_key (str): The key identifying the issue to be assigned.\n- assignee (str): The username of the user to whom the issue will be assigned.\n\nReturn:\n- bool: True if the issue was successfully assigned.\n\nExceptions:\n- AssignIssueError: Raised if there is an error while assigning the issue.\n\nSide Effects:\n- Makes an HTTP PUT request to assign the specified issue.\n- Prints an error message if the assignment fails.\n\"\"\"",
            "last_accessed": 1745613382
        },
        {
            "sha1": "e94b88240b8ce0937e5ced41eccb16930b822794",
            "docstring": "\"\"\"\nThis module provides a function to assign an issue to a specific user using a given request function.\n\nThe assign_issue function takes three parameters:\n- request_fn: a function to make a request (e.g., from requests library)\n- issue_key: the key of the issue to be assigned\n- assignee: the username of the user to whom the issue will be assigned\n\nIf successful, the function returns True. If an AssignIssueError is raised during the process, it prints an error\nmessage and raises AssignIssueError with a custom message.\n\"\"\"",
            "last_accessed": 1745613382
        }
    ],
    "jira_creator/rest/ops/blocked.py": [
        {
            "sha1": "9f86aaeda0d1f7e5958bb67899e2c253f7f2295c",
            "docstring": "\"\"\"\nThis module includes a function called blocked that retrieves a list of issues based on certain criteria and filters\nout the blocked issues.\nThe function takes a list_issues_fn function as input along with optional project, component, and assignee parameters.\nIt checks each issue for a specific field value (JIRA_BLOCKED_FIELD) to determine if it is blocked.\nIf an issue is blocked, it constructs a dictionary containing key information about the issue like key, status,\nassignee, reason, and summary.\nThe function returns a list of dictionaries representing the blocked issues.\n\nFunction 'blocked':\n- Retrieve a list of issues based on specified project, component, and assignee.\n\nArguments:\n- list_issues_fn (function): A function that returns a list of issues based on project, component, and assignee\nparameters.\n- project (str): The project name to filter the issues. Defaults to None.\n- component (str): The component name to filter the issues. Defaults to None.\n- assignee (str): The assignee name to filter the issues. Defaults to None.\n\nNo return value.\n\nSide Effects:\n- Modifies the 'issues' list by populating it with the filtered list of issues.\n\"\"\"",
            "last_accessed": 1745517262
        },
        {
            "sha1": "27c360b4864256a7d88d50e6118d601db9177d01",
            "docstring": "\"\"\"\nRetrieve a list of blocked issues based on specified project, component, and assignee.\n\nArguments:\n- list_issues_fn (function): A function that returns a list of issues based on project, component, and assignee parameters.\n- project (str): The project name to filter the issues. Defaults to None.\n- component (str): The component name to filter the issues. Defaults to None.\n- assignee (str): The assignee name to filter the issues. Defaults to None.\n\nReturn:\n- List of dictionaries containing details of blocked issues.\n\nSide Effects:\n- Modifies the 'issues' list by populating it with the filtered list of issues.\n\"\"\"",
            "last_accessed": 1745613386
        },
        {
            "sha1": "39ad07a425c64407e57d464c2f411ad9152e5aeb",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve and filter blocked issues from a list of issues based on specified criteria.\nThe primary function, `blocked`, takes a function that returns a list of issues and optional parameters for project, \ncomponent, and assignee. It identifies blocked issues by checking a specific field value and constructs a dictionary \nwith key details for each blocked issue. The function returns a list of these dictionaries.\n\nFunction `blocked`:\n- Retrieves a list of blocked issues based on specified project, component, and assignee.\n\nArguments:\n- list_issues_fn (function): A function that returns a list of issues filtered by project, component, and assignee.\n- project (str): The project name to filter issues. Defaults to None.\n- component (str): The component name to filter issues. Defaults to None.\n- assignee (str): The assignee name to filter issues. Defaults to None.\n\nReturns:\n- List of dictionaries containing details of blocked issues.\n\nSide Effects:\n- Modifies the 'issues' list by populating it with the filtered list of blocked issues.\n\"\"\"",
            "last_accessed": 1745518419
        },
        {
            "sha1": "88aed7bc9c2ecc48151e2b804b151ad7f0451917",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve and filter blocked issues from a list of issues based on specified\ncriteria.\nThe primary function, `blocked`, takes a function that returns a list of issues and optional parameters for project,\ncomponent, and assignee. It identifies blocked issues by checking a specific field value and constructs a dictionary\nwith key details for each blocked issue. The function returns a list of these dictionaries.\n\nFunction `blocked`:\n- Retrieves a list of blocked issues based on specified project, component, and assignee.\n\nArguments:\n- list_issues_fn (function): A function that returns a list of issues filtered by project, component, and assignee.\n- project (str): The project name to filter issues. Defaults to None.\n- component (str): The component name to filter issues. Defaults to None.\n- assignee (str): The assignee name to filter issues. Defaults to None.\n\nReturns:\n- List of dictionaries containing details of blocked issues.\n\nSide Effects:\n- Modifies the 'issues' list by populating it with the filtered list of blocked issues.\n\"\"\"",
            "last_accessed": 1745613386
        },
        {
            "sha1": "3c103577e67a61e3fd799278bf399454f1622e72",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve and filter blocked issues from a list of issues based on specified\ncriteria.\nThe primary function, `blocked`, takes a function that returns a list of issues and optional parameters for project,\ncomponent, and assignee. It identifies blocked issues by checking a specific field value and constructs a dictionary\nwith key details for each blocked issue. The function returns a list of these dictionaries.\n\nFunction `blocked`:\n- Retrieves a list of blocked issues based on specified project, component, and assignee.\n\nArguments:\n- list_issues_fn (function): A function that returns a list of issues filtered by project, component, and assignee.\n- project (str): The project name to filter issues. Defaults to None.\n- component (str): The component name to filter issues. Defaults to None.\n- assignee (str): The assignee name to filter issues. Defaults to None.\n\nReturns:\n- List of dictionaries containing details of blocked issues.\n\nSide Effects:\n- Modifies the 'issues' list by populating it with the filtered list of blocked issues.\n\"\"\"",
            "last_accessed": 1745613271
        }
    ],
    "jira_creator/rest/ops/set_story_points.py": [
        {
            "sha1": "2d701ba3354d31aea81a6cfdd3cdc5fc818776c0",
            "docstring": "\"\"\"\nThis script defines a function set_story_points that updates the story points of a JIRA issue.\nIt takes three parameters: request_fn for making HTTP requests, issue_key for identifying the issue, and points for\nspecifying the new story points value.\nThe function constructs a payload with the new story points value and sends a PUT request to update the issue in JIRA\nusing the provided request_fn.\nThe JIRA field used for story points is fetched from the environment variables using the EnvFetcher class.\n\nFunction:\n- set_story_points(request_fn, issue_key, points): Set the story points of a JIRA issue.\n\nArguments:\n- request_fn (function): The function used to make requests to the JIRA API.\n- issue_key (str): The key of the JIRA issue for which the story points need to be set.\n- points (int): The number of story points to set for the issue.\n\nSide Effects:\n- Retrieves the JIRA story points field from the environment using EnvFetcher.\n\nNote: This function is expected to continue with the logic to set the story points for the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745517268
        },
        {
            "sha1": "76b3b34601d99cfc684d8f4a59fe0b923b2edf75",
            "docstring": "\"\"\"\nSet the story points of a JIRA issue.\n\nArguments:\n- request_fn (function): The function used to make requests to the JIRA API.\n- issue_key (str): The key of the JIRA issue for which the story points need to be set.\n- points (int): The number of story points to set for the issue.\n\nSide Effects:\n- Retrieves the JIRA story points field from the environment using EnvFetcher.\n\nNote: This function is expected to continue with the logic to set the story points for the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745566163
        },
        {
            "sha1": "2118711ece13d264e1a9e99c2ec7530fc27e386a",
            "docstring": "\"\"\"\nThis script defines a function set_story_points that updates the story points of a JIRA issue.\nIt takes three parameters: request_fn for making HTTP requests, issue_key for identifying the issue, and points for\nspecifying the new story points value.\nThe function constructs a payload with the new story points value and sends a PUT request to update the issue in JIRA\nusing the provided request_fn.\nThe JIRA field used for story points is fetched from the environment variables using the EnvFetcher class.\n\nFunction:\n- set_story_points(request_fn, issue_key, points): Set the story points of a JIRA issue.\n\nArguments:\n- request_fn (function): The function used to make requests to the JIRA API.\n- issue_key (str): The key of the JIRA issue for which the story points need to be set.\n- points (int): The number of story points to set for the issue.\n\nSide Effects:\n- Retrieves the JIRA story points field from the environment using EnvFetcher.\n\nNote: This function is expected to continue with the logic to set the story points for the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745566163
        },
        {
            "sha1": "4fa64d76b8f0df6a4ec2ceb8acf20718a15d46f9",
            "docstring": "\"\"\"\nThis script defines a function set_story_points that updates the story points of a JIRA issue.\nIt takes three parameters: request_fn for making HTTP requests, issue_key for identifying the issue, and points for\nspecifying the new story points value.\nThe function constructs a payload with the new story points value and sends a PUT request to update the issue in JIRA\nusing the provided request_fn.\nThe JIRA field used for story points is fetched from the environment variables using the EnvFetcher class.\n\nFunction:\n- set_story_points(request_fn, issue_key, points): Set the story points of a JIRA issue.\n\nArguments:\n- request_fn (function): The function used to make requests to the JIRA API.\n- issue_key (str): The key of the JIRA issue for which the story points need to be set.\n- points (int): The number of story points to set for the issue.\n\nSide Effects:\n- Retrieves the JIRA story points field from the environment using EnvFetcher.\n\nNote: This function is expected to continue with the logic to set the story points for the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "4857f151ac072d4002424bbcaebaabd838840dff",
            "docstring": "\"\"\"\nSet the story points of a JIRA issue.\n\nArguments:\n- request_fn (function): The function used to make requests to the JIRA API.\n- issue_key (str): The key of the JIRA issue for which the story points need to be set.\n- points (int): The number of story points to set for the issue.\n\nSide Effects:\n- Retrieves the JIRA story points field from the environment using EnvFetcher.\n\nNote: This function is expected to continue with the logic to set the story points for the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745613389
        },
        {
            "sha1": "cdfe4fb71c5f6febdbe0c7285aaf1f152ec2f3c5",
            "docstring": "\"\"\"\nThis script defines a function set_story_points that updates the story points of a JIRA issue.\nIt takes three parameters: request_fn for making HTTP requests, issue_key for identifying the issue, and points for\nspecifying the new story points value.\nThe function constructs a payload with the new story points value and sends a PUT request to update the issue in JIRA\nusing the provided request_fn.\nThe JIRA field used for story points is fetched from the environment variables using the EnvFetcher class.\n\nFunction:\n- set_story_points(request_fn, issue_key, points): Set the story points of a JIRA issue.\n\nArguments:\n- request_fn (function): The function used to make requests to the JIRA API.\n- issue_key (str): The key of the JIRA issue for which the story points need to be set.\n- points (int): The number of story points to set for the issue.\n\nSide Effects:\n- Retrieves the JIRA story points field from the environment using EnvFetcher.\n\nNote: This function is expected to continue with the logic to set the story points for the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745613389
        }
    ],
    "jira_creator/rest/ops/view_issue.py": [
        {
            "sha1": "0805413b9b8c93dc4b9b6ef8f07b443939f18cc9",
            "docstring": "\"\"\"\nRetrieves and returns the fields of a specific issue using the provided request function.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key identifying the specific issue to retrieve.\n\nReturn:\n- dict: A dictionary containing the fields of the specified issue.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "8b73f017cbc93ea450b8dff1e6bda02a692ef49b",
            "docstring": "\"\"\"\nRetrieves and returns the fields of a specific issue using the provided request function.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key identifying the specific issue to retrieve.\n\nReturn:\n- dict: A dictionary containing the fields of the specified issue.\n\"\"\"",
            "last_accessed": 1745613393
        },
        {
            "sha1": "5d20752e69ed5f87a3f529356dc9b7f8de6b3d85",
            "docstring": "\"\"\"\nRetrieves and returns the fields of a specific issue using the provided request function.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key identifying the specific issue to retrieve.\n\nReturn:\n- dict: A dictionary containing the fields of the specified issue.\n\"\"\"",
            "last_accessed": 1745613393
        }
    ],
    "jira_creator/rest/ops/update_description.py": [
        {
            "sha1": "23151262bb96cee7a2c9d9d991bd951eced258d0",
            "docstring": "\"\"\"\nUpdates the description of a Jira issue using the provided request function.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- new_description (str): The new description to set for the Jira issue.\n\"\"\"",
            "last_accessed": 1745517274
        },
        {
            "sha1": "339bb332d0e0c9cfc71ed96c7c95f17d8e102617",
            "docstring": "\"\"\"\nUpdates the description of a Jira issue using the provided request function.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- new_description (str): The new description to set for the Jira issue.\n\"\"\"",
            "last_accessed": 1745566171
        },
        {
            "sha1": "f129a0210830d77597dadf9518c4d2a8f3e50f89",
            "docstring": "\"\"\"\nUpdates the description of a Jira issue using the provided request function.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- new_description (str): The new description to set for the Jira issue.\n\"\"\"",
            "last_accessed": 1745566171
        },
        {
            "sha1": "d406e79c4d267f0ee287820156046cdb5b5e5f8c",
            "docstring": "\"\"\"\nUpdates the description of a Jira issue using the provided request function.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- new_description (str): The new description to set for the Jira issue.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "3a18f9ef55e73c0a05ae4d122aca1e5db50ac31e",
            "docstring": "\"\"\"\nUpdates the description of a Jira issue using the provided request function.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- new_description (str): The new description to set for the Jira issue.\n\"\"\"",
            "last_accessed": 1745613394
        },
        {
            "sha1": "d3ab2bbc8652e2d8a0ad287e48fae2a46768b3ea",
            "docstring": "\"\"\"\nUpdates the description of a Jira issue using the provided request function.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- new_description (str): The new description to set for the Jira issue.\n\"\"\"",
            "last_accessed": 1745613394
        }
    ],
    "jira_creator/rest/ops/block_issue.py": [
        {
            "sha1": "984df203116ec17ec28ee13699577cf35c9dcdd5",
            "docstring": "\"\"\"\nUpdates a JIRA issue by setting the blocked status and reason.\n\nThis module contains a function 'block_issue' that updates a specified JIRA issue by setting the blocked status and reason for blocking. It takes the request function, JIRA issue key, and a reason as arguments to update the specified issue.\n\nArguments:\n- request_fn (function): The function used to make requests to JIRA.\n- issue_key (str): The key of the JIRA issue to be updated.\n- reason (str): The reason for blocking the JIRA issue.\n\nSide Effects:\n- Modifies the blocked status and reason fields of the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745517287
        },
        {
            "sha1": "cfeee8a1d8d9f3d449e532fc2e9c0cb60f6009e0",
            "docstring": "\"\"\"\nUpdates a JIRA issue by setting the blocked status and reason.\n\nArguments:\n- request_fn (function): The function used to make requests to JIRA.\n- issue_key (str): The key of the JIRA issue to be updated.\n- reason (str): The reason for blocking the JIRA issue.\n\nSide Effects:\n- Modifies the blocked status and reason fields of the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "a904f88200f379ab72ed59835376aebd5fd2f753",
            "docstring": "\"\"\"\nUpdates a JIRA issue by setting the blocked status and reason.\n\nThis module contains a function 'block_issue' that updates a specified JIRA issue by setting the blocked status and\nreason for blocking. It takes the request function, JIRA issue key, and a reason as arguments to update the specified\nissue.\n\nArguments:\n- request_fn (function): The function used to make requests to JIRA.\n- issue_key (str): The key of the JIRA issue to be updated.\n- reason (str): The reason for blocking the JIRA issue.\n\nSide Effects:\n- Modifies the blocked status and reason fields of the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "6253ebd4581eb11e911ba474799b4132d111afe8",
            "docstring": "\"\"\"\nUpdates a JIRA issue by setting the blocked status and reason.\n\nThis module contains a function 'block_issue' that updates a specified JIRA issue by setting the blocked status and\nreason for blocking. It takes the request function, JIRA issue key, and a reason as arguments to update the specified\nissue.\n\nArguments:\n- request_fn (function): The function used to make requests to JIRA.\n- issue_key (str): The key of the JIRA issue to be updated.\n- reason (str): The reason for blocking the JIRA issue.\n\nSide Effects:\n- Modifies the blocked status and reason fields of the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "015a3491a5f2f45a6b42bfa6bb4dc43331de9764",
            "docstring": "\"\"\"\nUpdates a JIRA issue by setting the blocked status and reason.\n\nArguments:\n- request_fn (function): The function used to make requests to JIRA.\n- issue_key (str): The key of the JIRA issue to be updated.\n- reason (str): The reason for blocking the JIRA issue.\n\nSide Effects:\n- Modifies the blocked status and reason fields of the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745613401
        },
        {
            "sha1": "c81df2074bebc25178adf59627e89014d55665d3",
            "docstring": "\"\"\"\nUpdates a JIRA issue by setting the blocked status and reason.\n\nThis module contains a function 'block_issue' that updates a specified JIRA issue by setting the blocked status and\nreason for blocking. It takes the request function, JIRA issue key, and a reason as arguments to update the specified\nissue.\n\nArguments:\n- request_fn (function): The function used to make requests to JIRA.\n- issue_key (str): The key of the JIRA issue to be updated.\n- reason (str): The reason for blocking the JIRA issue.\n\nSide Effects:\n- Modifies the blocked status and reason fields of the specified JIRA issue.\n\"\"\"",
            "last_accessed": 1745613401
        }
    ],
    "jira_creator/rest/ops/get_acceptance_criteria.py": [
        {
            "sha1": "e4aa05881b80a49929b0a50bf007da07e0603edd",
            "docstring": "\"\"\"\nRetrieve the acceptance criteria for a given JIRA issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue for which acceptance criteria are needed.\n\nReturn:\n- str: The acceptance criteria for the specified JIRA issue. If not found, an empty string is returned.\n\nExceptions:\n- Raises an exception if there is an issue with the HTTP request or if the acceptance criteria field is not found.\n\nSide Effects:\n- None\n\"\"\"",
            "last_accessed": 1745517291
        },
        {
            "sha1": "4e9e67e52ddc72665046097f22b414046bb47be1",
            "docstring": "\"\"\"\nRetrieve the acceptance criteria for a given JIRA issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue for which acceptance criteria are needed.\n\nReturn:\n- str: The acceptance criteria for the specified JIRA issue. If not found, an empty string is returned.\n\nExceptions:\n- Raises an exception if there is an issue with the HTTP request or if the acceptance criteria field is not found.\n\nSide Effects:\n- None\n\"\"\"",
            "last_accessed": 1745613401
        },
        {
            "sha1": "ced9806eb8ab88febb324f68f9d2c946e92327a6",
            "docstring": "\"\"\"\nRetrieve the acceptance criteria for a given JIRA issue.\n\nThis module provides a function to retrieve the acceptance criteria for a specified JIRA issue using a given function for making HTTP requests.\n\nFunctions:\n- get_acceptance_criteria(request_fn, issue_key): Retrieve the acceptance criteria for a given JIRA issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue for which acceptance criteria are needed.\n\nReturn:\n- str: The acceptance criteria for the specified JIRA issue. If not found, an empty string is returned.\n\nExceptions:\n- Raises an exception if there is an issue with the HTTP request or if the acceptance criteria field is not found.\n\nSide Effects:\n- None\n\"\"\"",
            "last_accessed": 1745518429
        },
        {
            "sha1": "7123836c36273f1531ed73f0fa1f62c69ac53a8e",
            "docstring": "\"\"\"\nRetrieve the acceptance criteria for a given JIRA issue.\n\nThis module provides a function to retrieve the acceptance criteria for a specified JIRA issue using a given function\nfor making HTTP requests.\n\nFunctions:\n- get_acceptance_criteria(request_fn, issue_key): Retrieve the acceptance criteria for a given JIRA issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue for which acceptance criteria are needed.\n\nReturn:\n- str: The acceptance criteria for the specified JIRA issue. If not found, an empty string is returned.\n\nExceptions:\n- Raises an exception if there is an issue with the HTTP request or if the acceptance criteria field is not found.\n\nSide Effects:\n- None\n\"\"\"",
            "last_accessed": 1745613401
        },
        {
            "sha1": "cd9cc30dbf04554af37a2e5411ef0d93922af91d",
            "docstring": "\"\"\"\nRetrieve the acceptance criteria for a given JIRA issue.\n\nThis module provides a function to retrieve the acceptance criteria for a specified JIRA issue using a given function\nfor making HTTP requests.\n\nFunctions:\n- get_acceptance_criteria(request_fn, issue_key): Retrieve the acceptance criteria for a given JIRA issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue for which acceptance criteria are needed.\n\nReturn:\n- str: The acceptance criteria for the specified JIRA issue. If not found, an empty string is returned.\n\nExceptions:\n- Raises an exception if there is an issue with the HTTP request or if the acceptance criteria field is not found.\n\nSide Effects:\n- None\n\"\"\"",
            "last_accessed": 1745613271
        }
    ],
    "jira_creator/rest/ops/get_issue_type.py": [
        {
            "sha1": "f707606518d1a2849db581a4afa4da3e1b21f69c",
            "docstring": "\"\"\"\nRetrieve the type of an issue identified by the given key.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): A string representing the unique key of the issue to retrieve.\n\nReturn:\n- str: A string indicating the type of the issue identified by the provided key.\n\nExceptions:\n- This function does not explicitly handle any exceptions. Any exceptions raised during the HTTP request will propagate.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "25c507078d65bec4a546d60475aceeee6aed3b3e",
            "docstring": "\"\"\"\nRetrieve the type of an issue identified by the given key.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): A string representing the unique key of the issue to retrieve.\n\nReturn:\n- str: A string indicating the type of the issue identified by the provided key.\n\nExceptions:\n- This function does not explicitly handle any exceptions. Any exceptions raised during the HTTP request will propagate.\n\"\"\"",
            "last_accessed": 1745613401
        },
        {
            "sha1": "79aad722af4a1c68ce7b82b91c0d5c8347f554b5",
            "docstring": "\"\"\"\nRetrieve the type of an issue identified by the given key.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): A string representing the unique key of the issue to retrieve.\n\nReturn:\n- str: A string indicating the type of the issue identified by the provided key.\n\nExceptions:\n- This function does not explicitly handle any exceptions. Any exceptions raised during the HTTP request will propagate.\n\"\"\"",
            "last_accessed": 1745613401
        }
    ],
    "jira_creator/rest/ops/remove_flag.py": [
        {
            "sha1": "4297021c2c77839d7b990411bbf945a5c74cd365",
            "docstring": "\"\"\"\nRemove a flag from a specific issue on a Jira board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue from which the flag should be removed.\n\nReturn:\n- dict: A dictionary containing the response data from the request.\n\"\"\"",
            "last_accessed": 1745517297
        },
        {
            "sha1": "374f87e875d72309cbc04528354ece4f1562e4cc",
            "docstring": "\"\"\"\nRemove a flag from a specific issue on a Jira board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue from which the flag should be removed.\n\nReturn:\n- dict: A dictionary containing the response data from the request.\n\"\"\"",
            "last_accessed": 1745520326
        },
        {
            "sha1": "2fe1707c8ca90db74623f06835b5098b2b0566bb",
            "docstring": "\"\"\"\nRemove a flag from a specific issue on a Jira board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue from which the flag should be removed.\n\nReturn:\n- dict: A dictionary containing the response data from the request.\n\"\"\"",
            "last_accessed": 1745563521
        },
        {
            "sha1": "a30b8c7dd1926fe40f6223fbcb56299633b54519",
            "docstring": "\"\"\"\nRemove a flag from a specific issue on a Jira board.\n    \nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue from which the flag should be removed.\n    \nReturn:\n- dict: A dictionary containing the response data from the request.\n\"\"\"",
            "last_accessed": 1745563523
        },
        {
            "sha1": "7596146ba89c25d2e84a4a8fecdb88778e4bfdcb",
            "docstring": "\"\"\"\nRemove a flag from a specific issue on a Jira board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue from which the flag should be removed.\n\nReturn:\n- dict: A dictionary containing the response data from the request.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "2ab6d34b0bca3d9ca3a58eab4f191fe21109c9ef",
            "docstring": "\"\"\"\nRemove a flag from a specific issue on a Jira board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue from which the flag should be removed.\n\nReturn:\n- dict: A dictionary containing the response data from the request.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "70c54fc77f6c74ca04d0770e5d45d058caa82cd9",
            "docstring": "\"\"\"\nRemove a flag from a specific issue on a Jira board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue from which the flag should be removed.\n\nReturn:\n- dict: A dictionary containing the response data from the request.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "2f1c62a55dc5ba81f4d9c35c2646c1156864d13c",
            "docstring": "\"\"\"\nRemove a flag from a specific issue on a Jira board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue from which the flag should be removed.\n\nReturn:\n- dict: A dictionary containing the response data from the request.\n\"\"\"",
            "last_accessed": 1745613402
        },
        {
            "sha1": "dd539da827466844479c47ba7ce3cb1a61bdb709",
            "docstring": "\"\"\"\nRemove a flag from a specific issue on a Jira board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue from which the flag should be removed.\n\nReturn:\n- dict: A dictionary containing the response data from the request.\n\"\"\"",
            "last_accessed": 1745613402
        }
    ],
    "jira_creator/rest/ops/add_flag.py": [
        {
            "sha1": "629aa54162ddbb0358007f89f5f5118d9374c569",
            "docstring": "\"\"\"\nAdd a flag to an issue on a board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_keys (str): The key of the issue to add the flag to.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745517300
        },
        {
            "sha1": "043de0807fb22f73097350b99e43bae534eb48cf",
            "docstring": "\"\"\"\nAdd a flag to an issue on a board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_keys (str): The key of the issue to add the flag to.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745520326
        },
        {
            "sha1": "6dd212f520e0de0f75679de652aa2ed566299e12",
            "docstring": "\"\"\"\nAdd a flag to an issue on a board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_keys (str): The key of the issue to add the flag to.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745563523
        },
        {
            "sha1": "7c8005481313a9a87d4e708ad2a8d4ddb513967c",
            "docstring": "\"\"\"\nAdd a flag to an issue on a board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_keys (str): The key of the issue to add the flag to.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745563526
        },
        {
            "sha1": "8851f73c8ecf6c76dbb135ee5e2502f035ed1a32",
            "docstring": "\"\"\"\nAdd a flag to an issue on a board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_keys (str): The key of the issue to add the flag to.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "b5c4da22fcbb0d058c515fa777a6605b3b0a5e07",
            "docstring": "\"\"\"\nAdd a flag to an issue on a board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_keys (str): The key of the issue to add the flag to.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "411f9e20d8a7869d5e53e6e88b7bc528423553d5",
            "docstring": "\"\"\"\nAdd a flag to an issue on a board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_keys (str): The key of the issue to add the flag to.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "ad7d6e6707e889f13d91143370b81f352e431150",
            "docstring": "\"\"\"\nAdd a flag to an issue on a board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_keys (str): The key of the issue to add the flag to.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745613404
        },
        {
            "sha1": "756862ffe4ce0839637b2304017ff9e7c55197b8",
            "docstring": "\"\"\"\nAdd a flag to an issue on a board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_keys (str): The key of the issue to add the flag to.\n\nReturn:\n- dict: A dictionary containing the response from the HTTP POST request.\n\"\"\"",
            "last_accessed": 1745613404
        }
    ],
    "jira_creator/rest/ops/search_issues.py": [
        {
            "sha1": "d47c4160eb11d989777e716689233a6d3f7b58c0",
            "docstring": "\"\"\"\nThis module contains a function to search for JIRA issues based on a JQL query.\n\nThe 'search_issues' function takes two parameters: 'request_fn' for making HTTP requests and 'jql' for the JIRA Query\nLanguage query.\nIt constructs the necessary parameters for the JIRA API request, including specific fields to retrieve.\nThe function then retrieves a list of issues matching the JQL query and processes each issue to extract sprint\ninformation.\nIf an issue is associated with an active sprint, it updates the issue with the active sprint name; otherwise, it sets\nthe sprint as 'No active sprint'.\nThe function returns a list of processed issues.\n\nNote: This function relies on the 'EnvFetcher' class from 'core.env_fetcher' for fetching environment variables related\nto JIRA fields.\n\"\"\"",
            "last_accessed": 1745517306
        },
        {
            "sha1": "c93f6f01241f4a4e5854d9a78805546a9cf89777",
            "docstring": "\"\"\"\nSearch for issues in JIRA based on the provided JQL query.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- jql (str): JIRA Query Language (JQL) query to filter the search results.\n\nReturn:\n- list: A list of dictionaries representing the searched JIRA issues. Each dictionary contains information about\nthe issue, including summary, status, assignee, priority, story points, sprint, and blocked status.\n\"\"\"",
            "last_accessed": 1745517308
        },
        {
            "sha1": "4d10a9a295a473399e99a90b46bb658ebe37c693",
            "docstring": "\"\"\"\nThis module contains a function to search for JIRA issues based on a JQL query.\n\nThe 'search_issues' function takes two parameters: 'request_fn' for making HTTP requests and 'jql' for the JIRA Query\nLanguage query.\nIt constructs the necessary parameters for the JIRA API request, including specific fields to retrieve.\nThe function then retrieves a list of issues matching the JQL query and processes each issue to extract sprint\ninformation.\nIf an issue is associated with an active sprint, it updates the issue with the active sprint name; otherwise, it sets\nthe sprint as 'No active sprint'.\nThe function returns a list of processed issues.\n\nNote: This function relies on the 'EnvFetcher' class from 'core.env_fetcher' for fetching environment variables related\nto JIRA fields.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "c106ab9a9f8f2815e2f30e5126c0e6eb449f6477",
            "docstring": "\"\"\"\nSearch for issues in JIRA based on the provided JQL query.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- jql (str): JIRA Query Language (JQL) query to filter the search results.\n\nReturn:\n- list: A list of dictionaries representing the searched JIRA issues. Each dictionary contains information about\nthe issue, including summary, status, assignee, priority, story points, sprint, and blocked status.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "80ff72dfa13931b76d5101c4fa8b39edbc5d01dd",
            "docstring": "\"\"\"\nThis module contains a function to search for JIRA issues based on a JQL query.\n\nThe 'search_issues' function takes two parameters: 'request_fn' for making HTTP requests and 'jql' for the JIRA Query\nLanguage query.\nIt constructs the necessary parameters for the JIRA API request, including specific fields to retrieve.\nThe function then retrieves a list of issues matching the JQL query and processes each issue to extract sprint\ninformation.\nIf an issue is associated with an active sprint, it updates the issue with the active sprint name; otherwise, it sets\nthe sprint as 'No active sprint'.\nThe function returns a list of processed issues.\n\nNote: This function relies on the 'EnvFetcher' class from 'core.env_fetcher' for fetching environment variables related\nto JIRA fields.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "333b04b010fe2e64ab82477b0eddd2d55d122380",
            "docstring": "\"\"\"\nSearch for issues in JIRA based on the provided JQL query.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- jql (str): JIRA Query Language (JQL) query to filter the search results.\n\nReturn:\n- list: A list of dictionaries representing the searched JIRA issues. Each dictionary contains information about\nthe issue, including summary, status, assignee, priority, story points, sprint, and blocked status.\n\"\"\"",
            "last_accessed": 1745613406
        },
        {
            "sha1": "444135ac05c78bafda53e739a902ce605414c115",
            "docstring": "\"\"\"\nThis module contains a function to search for JIRA issues based on a JQL query.\n\nThe 'search_issues' function takes two parameters: 'request_fn' for making HTTP requests and 'jql' for the JIRA Query\nLanguage query.\nIt constructs the necessary parameters for the JIRA API request, including specific fields to retrieve.\nThe function then retrieves a list of issues matching the JQL query and processes each issue to extract sprint\ninformation.\nIf an issue is associated with an active sprint, it updates the issue with the active sprint name; otherwise, it sets\nthe sprint as 'No active sprint'.\nThe function returns a list of processed issues.\n\nNote: This function relies on the 'EnvFetcher' class from 'core.env_fetcher' for fetching environment variables related\nto JIRA fields.\n\"\"\"",
            "last_accessed": 1745613406
        }
    ],
    "jira_creator/rest/ops/vote_story_points.py": [
        {
            "sha1": "697102f9b3e0d29e56c93070865bd4cce9b1bea0",
            "docstring": "\"\"\"\nThis module provides a function to vote on story points for a JIRA issue. It handles fetching the issue ID,\nconstructing the payload, and making the API request to submit the vote. In case of errors during the process, custom\nexceptions FetchIssueIDError and VoteStoryPointsError are raised and handled accordingly.\n\nFunction:\n- vote_story_points(request_fn, issue_key, points): Vote story points for a given Jira issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to vote story points for.\n- points (int): The number of story points to vote for the issue.\n\nExceptions:\n- FetchIssueIDError: Raised when there is an issue fetching the ID of the Jira issue.\n\nSide Effects:\n- Makes an HTTP request to fetch the Jira issue ID.\n- Prints an error message if there is a failure in fetching the issue ID.\n\nNote:\nThis function is responsible for voting story points for a specific Jira issue by using the provided request\nfunction to fetch the issue ID.\n\"\"\"",
            "last_accessed": 1745517315
        },
        {
            "sha1": "fd8e66da5d0352540ba028ad9a3e28b6783a8678",
            "docstring": "\"\"\"\nVote story points for a given Jira issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to vote story points for.\n- points (int): The number of story points to vote for the issue.\n\nExceptions:\n- FetchIssueIDError: Raised when there is an issue fetching the ID of the Jira issue.\n\nSide Effects:\n- Makes an HTTP request to fetch the Jira issue ID.\n- Prints an error message if there is a failure in fetching the issue ID.\n\nNote:\nThis function is responsible for voting story points for a specific Jira issue by using the provided request\nfunction to fetch the issue ID.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "6a684924c4c7a5434c292605a7ad8fbf29ea195a",
            "docstring": "\"\"\"\nThis module provides a function to vote on story points for a JIRA issue. It handles fetching the issue ID,\nconstructing the payload, and making the API request to submit the vote. In case of errors during the process, custom\nexceptions FetchIssueIDError and VoteStoryPointsError are raised and handled accordingly.\n\nFunction:\n- vote_story_points(request_fn, issue_key, points): Vote story points for a given Jira issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to vote story points for.\n- points (int): The number of story points to vote for the issue.\n\nExceptions:\n- FetchIssueIDError: Raised when there is an issue fetching the ID of the Jira issue.\n\nSide Effects:\n- Makes an HTTP request to fetch the Jira issue ID.\n- Prints an error message if there is a failure in fetching the issue ID.\n\nNote:\nThis function is responsible for voting story points for a specific Jira issue by using the provided request\nfunction to fetch the issue ID.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "7e0159aafae8969185593754bb7b5ddccc2866cc",
            "docstring": "\"\"\"\nThis module provides a function to vote on story points for a JIRA issue. It handles fetching the issue ID,\nconstructing the payload, and making the API request to submit the vote. In case of errors during the process, custom\nexceptions FetchIssueIDError and VoteStoryPointsError are raised and handled accordingly.\n\nFunction:\n- vote_story_points(request_fn, issue_key, points): Vote story points for a given Jira issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to vote story points for.\n- points (int): The number of story points to vote for the issue.\n\nExceptions:\n- FetchIssueIDError: Raised when there is an issue fetching the ID of the Jira issue.\n\nSide Effects:\n- Makes an HTTP request to fetch the Jira issue ID.\n- Prints an error message if there is a failure in fetching the issue ID.\n\nNote:\nThis function is responsible for voting story points for a specific Jira issue by using the provided request\nfunction to fetch the issue ID.\n\"\"\"",
            "last_accessed": 1745608222
        },
        {
            "sha1": "5933de64650a1fa1552f6e4e5a913aa37b6a60dc",
            "docstring": "\"\"\"\nVote story points for a given Jira issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to vote story points for.\n- points (int): The number of story points to vote for the issue.\n\nExceptions:\n- FetchIssueIDError: Raised when there is an issue fetching the ID of the Jira issue.\n- VoteStoryPointsError: Raised when there is an error in voting for story points.\n\nSide Effects:\n- Makes an HTTP request to fetch the Jira issue ID.\n- Prints an error message if there is a failure in fetching the issue ID.\n- Prints a success message after voting for story points.\n\nNote:\nThis function is responsible for voting story points for a specific Jira issue by using the provided request\nfunction to fetch the issue ID and then submitting the vote with the specified points.\n\"\"\"",
            "last_accessed": 1745608225
        },
        {
            "sha1": "54e74c26dca81e57af1370513c433c87d5bb4c61",
            "docstring": "\"\"\"\nThis module provides functionality to vote on story points for a JIRA issue via the JIRA API. It includes error handling \nfor issues related to fetching the issue ID and submitting the vote, utilizing custom exceptions for clarity.\n\nFunctionality:\n- vote_story_points(request_fn, issue_key, points): Submits a vote for story points on a specified JIRA issue.\n\nParameters:\n- request_fn (function): A callable for making HTTP requests to the JIRA API.\n- issue_key (str): The unique identifier of the JIRA issue for which story points are being voted.\n- points (int): The number of story points to be voted for the issue.\n\nCustom Exceptions:\n- FetchIssueIDError: Raised when unable to retrieve the ID of the specified JIRA issue.\n- VoteStoryPointsError: Raised when there is an error in submitting the vote for story points.\n\nSide Effects:\n- Initiates an HTTP request to obtain the JIRA issue ID.\n- Outputs error messages in case of failures during the fetching or voting process.\n- Confirms successful voting with a message if the operation completes successfully.\n\nNote:\nThe module is designed to facilitate the voting process on story points for JIRA issues, leveraging a provided request function \nto interact with the JIRA API.\n\"\"\"",
            "last_accessed": 1745609781
        },
        {
            "sha1": "34638b34f64648d49fc5223dcdd8a29914f64060",
            "docstring": "\"\"\"\nVote story points for a given Jira issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to vote story points for.\n- points (int): The number of story points to vote for the issue.\n\nExceptions:\n- FetchIssueIDError: Raised when there is an issue fetching the ID of the Jira issue.\n- VoteStoryPointsError: Raised when there is an error in voting for story points.\n\nSide Effects:\n- Makes an HTTP request to fetch the Jira issue ID.\n- Prints an error message if there is a failure in fetching the issue ID.\n- Prints a success message after voting for story points.\n\nNote:\nThis function is responsible for voting story points for a specific Jira issue by using the provided request\nfunction to fetch the issue ID and then submitting the vote with the specified points.\n\"\"\"",
            "last_accessed": 1745613410
        },
        {
            "sha1": "12d72f97208f9055b86e482285835f7a0ae41505",
            "docstring": "\"\"\"\nThis module provides functionality to vote on story points for a JIRA issue via the JIRA API. It includes error handling\nfor issues related to fetching the issue ID and submitting the vote, utilizing custom exceptions for clarity.\n\nFunctionality:\n- vote_story_points(request_fn, issue_key, points): Submits a vote for story points on a specified JIRA issue.\n\nParameters:\n- request_fn (function): A callable for making HTTP requests to the JIRA API.\n- issue_key (str): The unique identifier of the JIRA issue for which story points are being voted.\n- points (int): The number of story points to be voted for the issue.\n\nCustom Exceptions:\n- FetchIssueIDError: Raised when unable to retrieve the ID of the specified JIRA issue.\n- VoteStoryPointsError: Raised when there is an error in submitting the vote for story points.\n\nSide Effects:\n- Initiates an HTTP request to obtain the JIRA issue ID.\n- Outputs error messages in case of failures during the fetching or voting process.\n- Confirms successful voting with a message if the operation completes successfully.\n\nNote:\nThe module is designed to facilitate the voting process on story points for JIRA issues, leveraging a provided request\nfunction to interact with the JIRA API.\n\"\"\"",
            "last_accessed": 1745609992
        },
        {
            "sha1": "c0ec6b299eb79e041422ea15baff840ae8718b6a",
            "docstring": "\"\"\"\nThis module provides functionality to vote on story points for a JIRA issue via the JIRA API. It includes error handling\nfor issues related to fetching the issue ID and submitting the vote, utilizing custom exceptions for clarity.\n\nFunctionality:\n- vote_story_points(request_fn, issue_key, points): Submits a vote for story points on a specified JIRA issue.\n\nParameters:\n- request_fn (function): A callable for making HTTP requests to the JIRA API.\n- issue_key (str): The unique identifier of the JIRA issue for which story points are being voted.\n- points (int): The number of story points to be voted for the issue.\n\nCustom Exceptions:\n- FetchIssueIDError: Raised when unable to retrieve the ID of the specified JIRA issue.\n- VoteStoryPointsError: Raised when there is an error in submitting the vote for story points.\n\nSide Effects:\n- Initiates an HTTP request to obtain the JIRA issue ID.\n- Outputs error messages in case of failures during the fetching or voting process.\n- Confirms successful voting with a message if the operation completes successfully.\n\nNote:\nThe module is designed to facilitate the voting process on story points for JIRA issues, leveraging a provided request\nfunction to interact with the JIRA API.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "c67b4f9df7382842f178b78dbced43d8bae7baab",
            "docstring": "\"\"\"\nThis module provides functionality to vote on story points for a JIRA issue via the JIRA API. It includes error handling\nfor issues related to fetching the issue ID and submitting the vote, utilizing custom exceptions for clarity.\n\nFunctionality:\n- vote_story_points(request_fn, issue_key, points): Submits a vote for story points on a specified JIRA issue.\n\nParameters:\n- request_fn (function): A callable for making HTTP requests to the JIRA API.\n- issue_key (str): The unique identifier of the JIRA issue for which story points are being voted.\n- points (int): The number of story points to be voted for the issue.\n\nCustom Exceptions:\n- FetchIssueIDError: Raised when unable to retrieve the ID of the specified JIRA issue.\n- VoteStoryPointsError: Raised when there is an error in submitting the vote for story points.\n\nSide Effects:\n- Initiates an HTTP request to obtain the JIRA issue ID.\n- Outputs error messages in case of failures during the fetching or voting process.\n- Confirms successful voting with a message if the operation completes successfully.\n\nNote:\nThe module is designed to facilitate the voting process on story points for JIRA issues, leveraging a provided request\nfunction to interact with the JIRA API.\n\"\"\"",
            "last_accessed": 1745613410
        }
    ],
    "jira_creator/rest/ops/set_story_epic.py": [
        {
            "sha1": "5217d3779298212b21ab9c6872c0d94cdc1e322e",
            "docstring": "\"\"\"\nSet the epic for a specific JIRA issue.\n\nThis script contains a function 'set_story_epic' that takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to update.\n- epic_key (str): The key of the epic to set for the issue.\n\nWhen called, this function modifies the JIRA issue specified by 'issue_key' to set the epic to the one specified by 'epic_key'.\n\"\"\"",
            "last_accessed": 1745517320
        },
        {
            "sha1": "47f7ee18a312a0cc01146bf874eddecec88c1360",
            "docstring": "\"\"\"\nSet the epic for a specific JIRA issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to update.\n- epic_key (str): The key of the epic to set for the issue.\n\nSide Effects:\n- Modifies the JIRA issue specified by 'issue_key' to set the epic to the one specified by 'epic_key'.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "274103db86d48587008d3106ae1e84ae72a77e4d",
            "docstring": "\"\"\"\nSet the epic for a specific JIRA issue.\n\nThis script contains a function 'set_story_epic' that takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to update.\n- epic_key (str): The key of the epic to set for the issue.\n\nWhen called, this function modifies the JIRA issue specified by 'issue_key' to set the epic to the one specified by\n'epic_key'.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "d0f0c0ad8c9c02bbdf02375a71d3d417375d4eb9",
            "docstring": "\"\"\"\nSet the epic for a specific JIRA issue.\n\nThis script contains a function 'set_story_epic' that takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to update.\n- epic_key (str): The key of the epic to set for the issue.\n\nWhen called, this function modifies the JIRA issue specified by 'issue_key' to set the epic to the one specified by\n'epic_key'.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "3521c10c7c64b7fb505553fedc8b3b344ed6633f",
            "docstring": "\"\"\"\nSet the epic for a specific JIRA issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to update.\n- epic_key (str): The key of the epic to set for the issue.\n\nSide Effects:\n- Modifies the JIRA issue specified by 'issue_key' to set the epic to the one specified by 'epic_key'.\n\"\"\"",
            "last_accessed": 1745613412
        },
        {
            "sha1": "565679dfd6ad92c28df60e8d3cc3b1f71a9ab372",
            "docstring": "\"\"\"\nSet the epic for a specific JIRA issue.\n\nThis script contains a function 'set_story_epic' that takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to update.\n- epic_key (str): The key of the epic to set for the issue.\n\nWhen called, this function modifies the JIRA issue specified by 'issue_key' to set the epic to the one specified by\n'epic_key'.\n\"\"\"",
            "last_accessed": 1745613412
        }
    ],
    "jira_creator/rest/ops/get_current_user.py": [
        {
            "sha1": "83bd5b12ff754345434638f6a5c4d2631db411b2",
            "docstring": "\"\"\"\nRetrieve the current user's name or account ID.\n\nArguments:\n- request_fn (function): A function used to make a request to an API endpoint.\n\nReturn:\n- str: The name of the current user if available, otherwise the account ID.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "4b36c9b1dab74ef33fe4f0eae770dbb74846b4c3",
            "docstring": "\"\"\"\nRetrieve the current user's name or account ID.\n\nArguments:\n- request_fn (function): A function used to make a request to an API endpoint.\n\nReturn:\n- str: The name of the current user if available, otherwise the account ID.\n\"\"\"",
            "last_accessed": 1745613412
        },
        {
            "sha1": "a29fe265bbf093dd1afdc55389463a398263367f",
            "docstring": "\"\"\"\nRetrieve the current user's name or account ID.\n\nArguments:\n- request_fn (function): A function used to make a request to an API endpoint.\n\nReturn:\n- str: The name of the current user if available, otherwise the account ID.\n\"\"\"",
            "last_accessed": 1745613412
        }
    ],
    "jira_creator/rest/ops/change_issue_type.py": [
        {
            "sha1": "2137106044d1800e919c96289956ca614ad6900d",
            "docstring": "\"\"\"\nThis script defines a function 'change_issue_type' that changes the type of a given issue in a Jira instance. It takes\nthree parameters: 'request_fn' for making HTTP requests, 'issue_key' to identify the issue, and 'new_type' to specify\nthe new issue type.\nIt retrieves issue data using the 'request_fn', modifies the type in the payload, and updates the issue type via a PUT\nrequest to the Jira API. If the issue is a subtask, it also handles removing the parent link.\nIn case of a 'ChangeIssueTypeError', it raises and logs an exception with an error message.\n\nFunction 'change_issue_type':\n- Arguments:\n    - request_fn (function): A function used to make HTTP requests.\n    - issue_key (str): The key of the issue to be updated.\n    - new_type (str): The new issue type to assign to the issue.\n- Side Effects:\n    - Modifies the issue type of the specified Jira issue.\n- Exceptions:\n    - ChangeIssueTypeError: Raised if there is an issue with changing the issue type.\n\"\"\"",
            "last_accessed": 1745517328
        },
        {
            "sha1": "99a1b5dd525441b846f2c11ff4d2e218f072b3af",
            "docstring": "\"\"\"\nChange the issue type of a Jira issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be updated.\n- new_type (str): The new issue type to assign to the issue.\n\nSide Effects:\n- Modifies the issue type of the specified Jira issue.\n\nExceptions:\n- ChangeIssueTypeError: Raised if there is an issue with changing the issue type.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "03ec20bb8643e36da23e60e76b1dfca80e7164e0",
            "docstring": "\"\"\"\nThis script defines a function 'change_issue_type' that changes the type of a given issue in a Jira instance. It takes\nthree parameters: 'request_fn' for making HTTP requests, 'issue_key' to identify the issue, and 'new_type' to specify\nthe new issue type.\nIt retrieves issue data using the 'request_fn', modifies the type in the payload, and updates the issue type via a PUT\nrequest to the Jira API. If the issue is a subtask, it also handles removing the parent link.\nIn case of a 'ChangeIssueTypeError', it raises and logs an exception with an error message.\n\nFunction 'change_issue_type':\n- Arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be updated.\n- new_type (str): The new issue type to assign to the issue.\n- Side Effects:\n- Modifies the issue type of the specified Jira issue.\n- Exceptions:\n- ChangeIssueTypeError: Raised if there is an issue with changing the issue type.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "da625f100b68489c010b4a4bb5bc5e4923466a92",
            "docstring": "\"\"\"\nThis script defines a function 'change_issue_type' that changes the type of a given issue in a Jira instance. It takes\nthree parameters: 'request_fn' for making HTTP requests, 'issue_key' to identify the issue, and 'new_type' to specify\nthe new issue type.\nIt retrieves issue data using the 'request_fn', modifies the type in the payload, and updates the issue type via a PUT\nrequest to the Jira API. If the issue is a subtask, it also handles removing the parent link.\nIn case of a 'ChangeIssueTypeError', it raises and logs an exception with an error message.\n\nFunction 'change_issue_type':\n- Arguments:\n    - request_fn (function): A function used to make HTTP requests.\n    - issue_key (str): The key of the issue to be updated.\n    - new_type (str): The new issue type to assign to the issue.\n- Side Effects:\n    - Modifies the issue type of the specified Jira issue.\n- Exceptions:\n    - ChangeIssueTypeError: Raised if there is an issue with changing the issue type.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "e24ae1f067590355a3c5b939f45216a8eda88b58",
            "docstring": "\"\"\"\nChange the issue type of a Jira issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be updated.\n- new_type (str): The new issue type to assign to the issue.\n\nSide Effects:\n- Modifies the issue type of the specified Jira issue.\n\nExceptions:\n- ChangeIssueTypeError: Raised if there is an issue with changing the issue type.\n\"\"\"",
            "last_accessed": 1745613415
        },
        {
            "sha1": "c61293458bd052b1295d7fe83225ed3809929cc5",
            "docstring": "\"\"\"\nThis script defines a function 'change_issue_type' that changes the type of a given issue in a Jira instance. It takes\nthree parameters: 'request_fn' for making HTTP requests, 'issue_key' to identify the issue, and 'new_type' to specify\nthe new issue type.\nIt retrieves issue data using the 'request_fn', modifies the type in the payload, and updates the issue type via a PUT\nrequest to the Jira API. If the issue is a subtask, it also handles removing the parent link.\nIn case of a 'ChangeIssueTypeError', it raises and logs an exception with an error message.\n\nFunction 'change_issue_type':\n- Arguments:\n    - request_fn (function): A function used to make HTTP requests.\n    - issue_key (str): The key of the issue to be updated.\n    - new_type (str): The new issue type to assign to the issue.\n- Side Effects:\n    - Modifies the issue type of the specified Jira issue.\n- Exceptions:\n    - ChangeIssueTypeError: Raised if there is an issue with changing the issue type.\n\"\"\"",
            "last_accessed": 1745613414
        }
    ],
    "jira_creator/rest/ops/set_acceptance_criteria.py": [
        {
            "sha1": "88c5f936fa771c4ce6c2af291940e7409ea97950",
            "docstring": "\"\"\"\nThis script defines a function set_acceptance_criteria that updates the acceptance criteria of a JIRA issue. It takes\nthree parameters: request_fn, issue_key, and acceptance_criteria. The function constructs a payload with the acceptance\ncriteria data and performs a PUT request to update the issue in JIRA. It also prints a success message after updating\nthe acceptance criteria.\n\nThe set_acceptance_criteria function takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to set acceptance criteria for.\n- acceptance_criteria (str): The acceptance criteria to set for the JIRA issue.\n\"\"\"",
            "last_accessed": 1745517332
        },
        {
            "sha1": "db22616bc77457c06b63861a05dc75736d77d293",
            "docstring": "\"\"\"\nSet acceptance criteria for a JIRA issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to set acceptance criteria for.\n- acceptance_criteria (str): The acceptance criteria to set for the JIRA issue.\n\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "34cc8cda264abc83afe3e06ca072ad68584e5c7f",
            "docstring": "\"\"\"\nThis script defines a function set_acceptance_criteria that updates the acceptance criteria of a JIRA issue. It takes\nthree parameters: request_fn, issue_key, and acceptance_criteria. The function constructs a payload with the acceptance\ncriteria data and performs a PUT request to update the issue in JIRA. It also prints a success message after updating\nthe acceptance criteria.\n\nThe set_acceptance_criteria function takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to set acceptance criteria for.\n- acceptance_criteria (str): The acceptance criteria to set for the JIRA issue.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "17b13ca2ee4fcceb217401ca901e5268cf0727de",
            "docstring": "\"\"\"\nThis script defines a function set_acceptance_criteria that updates the acceptance criteria of a JIRA issue. It takes\nthree parameters: request_fn, issue_key, and acceptance_criteria. The function constructs a payload with the acceptance\ncriteria data and performs a PUT request to update the issue in JIRA. It also prints a success message after updating\nthe acceptance criteria.\n\nThe set_acceptance_criteria function takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to set acceptance criteria for.\n- acceptance_criteria (str): The acceptance criteria to set for the JIRA issue.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "40cc5290d562c5003c06e30bf69ba29586bf0a74",
            "docstring": "\"\"\"\nSet acceptance criteria for a JIRA issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to set acceptance criteria for.\n- acceptance_criteria (str): The acceptance criteria to set for the JIRA issue.\n\n\"\"\"",
            "last_accessed": 1745613417
        },
        {
            "sha1": "1e8a59604c569abfbcf7c600cdc6d6a29a1f2cef",
            "docstring": "\"\"\"\nThis script defines a function set_acceptance_criteria that updates the acceptance criteria of a JIRA issue. It takes\nthree parameters: request_fn, issue_key, and acceptance_criteria. The function constructs a payload with the acceptance\ncriteria data and performs a PUT request to update the issue in JIRA. It also prints a success message after updating\nthe acceptance criteria.\n\nThe set_acceptance_criteria function takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the JIRA issue to set acceptance criteria for.\n- acceptance_criteria (str): The acceptance criteria to set for the JIRA issue.\n\"\"\"",
            "last_accessed": 1745613417
        }
    ],
    "jira_creator/rest/ops/get_description.py": [
        {
            "sha1": "9168e9812e42ffa7d9e6d629a7e08d09d18a9232",
            "docstring": "\"\"\"\nRetrieve the description of a specific issue from a Jira instance.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests. It should accept HTTP method and URL parameters.\n- issue_key (str): The key of the issue for which the description is to be retrieved.\n\nReturn:\n- str: The description of the specified issue. If the description is not available, an empty string is returned.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "7f1179fd53c4d564f1ad2b91ee5e32af97696d71",
            "docstring": "\"\"\"\nRetrieve the description of a specific issue from a Jira instance.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests. It should accept HTTP method and URL parameters.\n- issue_key (str): The key of the issue for which the description is to be retrieved.\n\nReturn:\n- str: The description of the specified issue. If the description is not available, an empty string is returned.\n\"\"\"",
            "last_accessed": 1745613417
        },
        {
            "sha1": "6d0a92b10b2b0bab69d7764e72a3d2add3155f6d",
            "docstring": "\"\"\"\nRetrieve the description of a specific issue from a Jira instance.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests. It should accept HTTP method and URL parameters.\n- issue_key (str): The key of the issue for which the description is to be retrieved.\n\nReturn:\n- str: The description of the specified issue. If the description is not available, an empty string is returned.\n\"\"\"",
            "last_accessed": 1745613417
        }
    ],
    "jira_creator/rest/ops/create_issue.py": [
        {
            "sha1": "79d552fc34acf178f5131627e170017410879b8a",
            "docstring": "\"\"\"\nCreates an issue by sending a POST request using the provided request function.\n\nArgs:\nrequest_fn (function): A function that sends HTTP requests. It is expected to accept at least the following\nparameters:\n- method (str): The HTTP method to use (e.g., \"GET\", \"POST\").\n- url (str): The URL to send the request to.\n- json (dict): A dictionary containing the payload data to be sent in JSON format.\npayload (dict): A dictionary representing the data to be sent as the payload for creating the issue.\n\nReturns:\nstr: The key of the created issue, or an empty string if the key is not found in the response.\n\"\"\"",
            "last_accessed": 1745613272
        },
        {
            "sha1": "9e1262453ce8199844896f0e47e5c6c83233b22c",
            "docstring": "\"\"\"\nCreates an issue by sending a POST request using the provided request function.\n\nArgs:\n    request_fn (function): A function that sends HTTP requests. It is expected to accept at least the following\n        parameters:\n        - method (str): The HTTP method to use (e.g., \"GET\", \"POST\").\n        - url (str): The URL to send the request to.\n        - json (dict): A dictionary containing the payload data to be sent in JSON format.\n    payload (dict): A dictionary representing the data to be sent as the payload for creating the issue.\n\nReturns:\n    str: The key of the created issue, or an empty string if the key is not found in the response.\n\"\"\"",
            "last_accessed": 1745613417
        },
        {
            "sha1": "06ef449c4755d54aff209b9fde47328398b51488",
            "docstring": "\"\"\"\nCreates an issue by sending a POST request using the provided request function.\n\nArgs:\nrequest_fn (function): A function that sends HTTP requests. It is expected to accept at least the following\nparameters:\n- method (str): The HTTP method to use (e.g., \"GET\", \"POST\").\n- url (str): The URL to send the request to.\n- json (dict): A dictionary containing the payload data to be sent in JSON format.\npayload (dict): A dictionary representing the data to be sent as the payload for creating the issue.\n\nReturns:\nstr: The key of the created issue, or an empty string if the key is not found in the response.\n\"\"\"",
            "last_accessed": 1745613417
        }
    ],
    "jira_creator/rest/ops/migrate_issue.py": [
        {
            "sha1": "5163c5742fee5c21d9271603350c570f894960d1",
            "docstring": "\"\"\"\nThis script defines a function 'migrate_issue' that facilitates migrating an issue in Jira from one type to another.\nThe function takes several parameters including request_fn for making HTTP requests, jira_url for the Jira instance URL,\nbuild_payload_fn for constructing the payload for the new issue, old_key for the key of the issue to be migrated, and\nnew_type for the type of the new issue.\n\nThe function retrieves information about the old issue, creates a new issue with the specified type, and updates the old\nissue with a comment indicating the migration. It also transitions the old issue to a final state if possible.\n\nThe function returns the key of the newly created issue.\n\"\"\"",
            "last_accessed": 1745517347
        },
        {
            "sha1": "a3d62164202004f4bee86050711441e21e701670",
            "docstring": "\"\"\"\nRetrieve issue details from Jira and prepare data for migration.\n\nArguments:\n- request_fn (function): A function to make HTTP requests.\n- jira_url (str): The base URL of the Jira instance.\n- build_payload_fn (function): A function to construct payload for HTTP requests.\n- old_key (str): The key of the issue to be migrated.\n- new_type (str): The type of the new issue after migration.\n\nReturns:\nThis function does not return any value.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "149e5b8f2b9737df4aab2db6c93c3e44d1659d69",
            "docstring": "\"\"\"\nThis script defines a function 'migrate_issue' that facilitates migrating an issue in Jira from one type to another.\nThe function takes several parameters including request_fn for making HTTP requests, jira_url for the Jira instance URL,\nbuild_payload_fn for constructing the payload for the new issue, old_key for the key of the issue to be migrated, and\nnew_type for the type of the new issue.\n\nThe function retrieves information about the old issue, creates a new issue with the specified type, and updates the old\nissue with a comment indicating the migration. It also transitions the old issue to a final state if possible.\n\nThe function returns the key of the newly created issue.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "4090504d72a279c0048cfc813b2f2a9a44c38981",
            "docstring": "\"\"\"\nThis script defines a function 'migrate_issue' that facilitates migrating an issue in Jira from one type to another.\nThe function takes several parameters including request_fn for making HTTP requests, jira_url for the Jira instance URL,\nbuild_payload_fn for constructing the payload for the new issue, old_key for the key of the issue to be migrated, and\nnew_type for the type of the new issue.\n\nThe function retrieves information about the old issue, creates a new issue with the specified type, and updates the old\nissue with a comment indicating the migration. It also transitions the old issue to a final state if possible.\n\nThe function returns the key of the newly created issue.\n\"\"\"",
            "last_accessed": 1745613272
        },
        {
            "sha1": "d8baafb5e263cfa106e7bb9a3e3349d8b28094b3",
            "docstring": "\"\"\"\nRetrieve issue details from Jira and prepare data for migration.\n\nArguments:\n- request_fn (function): A function to make HTTP requests.\n- jira_url (str): The base URL of the Jira instance.\n- build_payload_fn (function): A function to construct payload for HTTP requests.\n- old_key (str): The key of the issue to be migrated.\n- new_type (str): The type of the new issue after migration.\n\nReturns:\nThis function does not return any value.\n\"\"\"",
            "last_accessed": 1745613419
        },
        {
            "sha1": "73083742449215c6ca3474ab0cdc7996b1af9daa",
            "docstring": "\"\"\"\nThis script defines a function 'migrate_issue' that facilitates migrating an issue in Jira from one type to another.\nThe function takes several parameters including request_fn for making HTTP requests, jira_url for the Jira instance URL,\nbuild_payload_fn for constructing the payload for the new issue, old_key for the key of the issue to be migrated, and\nnew_type for the type of the new issue.\n\nThe function retrieves information about the old issue, creates a new issue with the specified type, and updates the old\nissue with a comment indicating the migration. It also transitions the old issue to a final state if possible.\n\nThe function returns the key of the newly created issue.\n\"\"\"",
            "last_accessed": 1745613419
        }
    ],
    "jira_creator/rest/ops/add_comment.py": [
        {
            "sha1": "dec67717cebae847f1c97cd4da9c1f1121c51332",
            "docstring": "\"\"\"\nSends a POST request to add a comment to a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to send HTTP requests.\n- issue_key (str): The key of the issue to which the comment will be added.\n- comment (str): The text of the comment to be added.\n\nReturn:\n- dict: A dictionary representing the response of the POST request.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745517352
        },
        {
            "sha1": "46f301f345edfcba0a095c0fab9cce8c1e3b5fdc",
            "docstring": "\"\"\"\nSends a POST request to add a comment to a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to send HTTP requests.\n- issue_key (str): The key of the issue to which the comment will be added.\n- comment (str): The text of the comment to be added.\n\nReturn:\n- dict: A dictionary representing the response of the POST request.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745520326
        },
        {
            "sha1": "4d42bb702ef845a5f418337040aea2fb07183f6c",
            "docstring": "\"\"\"\nSends a POST request to add a comment to a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to send HTTP requests.\n- issue_key (str): The key of the issue to which the comment will be added.\n- comment (str): The text of the comment to be added.\n\nReturn:\n- dict: A dictionary representing the response of the POST request.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745563526
        },
        {
            "sha1": "e02b6bc5124e7f50ab1bb66ac4a915af768f0d7c",
            "docstring": "\"\"\"\nSends a POST request to add a comment to a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to send HTTP requests.\n- issue_key (str): The key of the issue to which the comment will be added.\n- comment (str): The text of the comment to be added.\n\nReturn:\n- dict: A dictionary representing the response of the POST request.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745563527
        },
        {
            "sha1": "7c26a77c527a1b84b3ffc8710bf9ac60523fc430",
            "docstring": "\"\"\"\nSends a POST request to add a comment to a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to send HTTP requests.\n- issue_key (str): The key of the issue to which the comment will be added.\n- comment (str): The text of the comment to be added.\n\nReturn:\n- dict: A dictionary representing the response of the POST request.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "3b3a1224b6a61523720a30ce7468085fa72b3d1b",
            "docstring": "\"\"\"\nSends a POST request to add a comment to a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to send HTTP requests.\n- issue_key (str): The key of the issue to which the comment will be added.\n- comment (str): The text of the comment to be added.\n\nReturn:\n- dict: A dictionary representing the response of the POST request.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "8e80af9e0bc94c22075f884f02d69956a328a950",
            "docstring": "\"\"\"\nSends a POST request to add a comment to a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to send HTTP requests.\n- issue_key (str): The key of the issue to which the comment will be added.\n- comment (str): The text of the comment to be added.\n\nReturn:\n- dict: A dictionary representing the response of the POST request.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613272
        },
        {
            "sha1": "0e3a4cf553402c177934988cf3e19420344f4d29",
            "docstring": "\"\"\"\nSends a POST request to add a comment to a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to send HTTP requests.\n- issue_key (str): The key of the issue to which the comment will be added.\n- comment (str): The text of the comment to be added.\n\nReturn:\n- dict: A dictionary representing the response of the POST request.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613421
        },
        {
            "sha1": "3162741b84fae35363e0b41ddec0af1265239ae5",
            "docstring": "\"\"\"\nSends a POST request to add a comment to a specific issue in Jira.\n\nArguments:\n- request_fn (function): A function used to send HTTP requests.\n- issue_key (str): The key of the issue to which the comment will be added.\n- comment (str): The text of the comment to be added.\n\nReturn:\n- dict: A dictionary representing the response of the POST request.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613421
        }
    ],
    "jira_creator/rest/ops/unassign_issue.py": [
        {
            "sha1": "61b5fdd0f36d88480f6880758b9454cc2abf191e",
            "docstring": "\"\"\"\nThis module provides a function to unassign an issue in Jira by sending a PUT request to the Jira API.\nIf successful, it returns True. If an error occurs during the unassignment process, it raises an UnassignIssueError.\n\nThe unassign_issue function unassigns the assignee from a specified issue.\n\nArguments:\n- request_fn (function): A function used to make API requests.\n- issue_key (str): The key of the issue to unassign.\n\nReturn:\n- bool: True if the issue was successfully unassigned.\n\nExceptions:\n- UnassignIssueError: Raised if there is an issue with unassigning the specified issue.\n\"\"\"",
            "last_accessed": 1745517357
        },
        {
            "sha1": "56fc9945b8899d817a4f58f8973a4bb3a43c27cf",
            "docstring": "\"\"\"\nUnassigns the assignee from a specified issue.\n\nArguments:\n- request_fn (function): A function used to make API requests.\n- issue_key (str): The key of the issue to unassign.\n\nReturn:\n- bool: True if the issue was successfully unassigned.\n\nExceptions:\n- UnassignIssueError: Raised if there is an issue with unassigning the specified issue.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "c8549536ac5d138a4551d2afd6316db33c64d1b1",
            "docstring": "\"\"\"\nThis module provides a function to unassign an issue in Jira by sending a PUT request to the Jira API.\nIf successful, it returns True. If an error occurs during the unassignment process, it raises an UnassignIssueError.\n\nThe unassign_issue function unassigns the assignee from a specified issue.\n\nArguments:\n- request_fn (function): A function used to make API requests.\n- issue_key (str): The key of the issue to unassign.\n\nReturn:\n- bool: True if the issue was successfully unassigned.\n\nExceptions:\n- UnassignIssueError: Raised if there is an issue with unassigning the specified issue.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "831e8e236673622b6e27ee3e6a27181cd1932531",
            "docstring": "\"\"\"\nThis module provides a function to unassign an issue in Jira by sending a PUT request to the Jira API.\nIf successful, it returns True. If an error occurs during the unassignment process, it raises an UnassignIssueError.\n\nThe unassign_issue function unassigns the assignee from a specified issue.\n\nArguments:\n- request_fn (function): A function used to make API requests.\n- issue_key (str): The key of the issue to unassign.\n\nReturn:\n- bool: True if the issue was successfully unassigned.\n\nExceptions:\n- UnassignIssueError: Raised if there is an issue with unassigning the specified issue.\n\"\"\"",
            "last_accessed": 1745613272
        },
        {
            "sha1": "2c8a299905f5cb8a494abfa1ce41a6fa8ac1ab3a",
            "docstring": "\"\"\"\nUnassigns the assignee from a specified issue.\n\nArguments:\n- request_fn (function): A function used to make API requests.\n- issue_key (str): The key of the issue to unassign.\n\nReturn:\n- bool: True if the issue was successfully unassigned.\n\nExceptions:\n- UnassignIssueError: Raised if there is an issue with unassigning the specified issue.\n\"\"\"",
            "last_accessed": 1745613423
        },
        {
            "sha1": "39df9e2c5c57dd4b64c2d5bea3dfacf3fe1bb5f3",
            "docstring": "\"\"\"\nThis module provides a function to unassign an issue in Jira by sending a PUT request to the Jira API.\nIf successful, it returns True. If an error occurs during the unassignment process, it raises an UnassignIssueError.\n\nThe unassign_issue function unassigns the assignee from a specified issue.\n\nArguments:\n- request_fn (function): A function used to make API requests.\n- issue_key (str): The key of the issue to unassign.\n\nReturn:\n- bool: True if the issue was successfully unassigned.\n\nExceptions:\n- UnassignIssueError: Raised if there is an issue with unassigning the specified issue.\n\"\"\"",
            "last_accessed": 1745613423
        }
    ],
    "jira_creator/rest/ops/get_user.py": [
        {
            "sha1": "384e6b7b5babd6a8f09e1281897e13519bdf28ad",
            "docstring": "\"\"\"\nRetrieves user information by sending a GET request to the specified API endpoint.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- username (str): The username of the user whose information is being retrieved.\n\nReturn:\n- dict: A dictionary containing the user information retrieved from the API.\n\"\"\"",
            "last_accessed": 1745613272
        },
        {
            "sha1": "64a557c1494c1f98026a3b6e4cacb223414149f2",
            "docstring": "\"\"\"\nRetrieves user information by sending a GET request to the specified API endpoint.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- username (str): The username of the user whose information is being retrieved.\n\nReturn:\n- dict: A dictionary containing the user information retrieved from the API.\n\"\"\"",
            "last_accessed": 1745613423
        },
        {
            "sha1": "658c87d849152d07fcfdf3313ed53d6a71a1077d",
            "docstring": "\"\"\"\nRetrieves user information by sending a GET request to the specified API endpoint.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- username (str): The username of the user whose information is being retrieved.\n\nReturn:\n- dict: A dictionary containing the user information retrieved from the API.\n\"\"\"",
            "last_accessed": 1745613423
        },
        {
            "sha1": "96f16af4aee00ae8e847a423cdf09fecf9d22931",
            "docstring": "\"\"\"\nRetrieves user information by sending a GET request to the specified API endpoint.\n    \nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- username (str): The username of the user whose information is being retrieved.\n    \nReturn:\n- dict: A dictionary containing the user information retrieved from the API.\n\"\"\"",
            "last_accessed": 1745563529
        },
        {
            "sha1": "fd0b31b6e3211055d4c5f298f3752890e5bcc9fb",
            "docstring": "\"\"\"\nRetrieves user information by sending a GET request to the specified API endpoint.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- username (str): The username of the user whose information is being retrieved.\n\nReturn:\n- dict: A dictionary containing the user information retrieved from the API.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "39b95e02a921377cf01b20ed809b6d08e778f02d",
            "docstring": "\"\"\"\nRetrieves user information by sending a GET request to the specified API endpoint.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- username (str): The username of the user whose information is being retrieved.\n\nReturn:\n- dict: A dictionary containing the user information retrieved from the API.\n\"\"\"",
            "last_accessed": 1745566178
        }
    ],
    "jira_creator/rest/ops/__init__.py": [
        {
            "sha1": "fb65c48f356d1bb5519d29e6562e49091546aa3f",
            "docstring": "\"\"\"\nThis file includes various functions for interacting with an issue tracking system.\nFunctions are available for tasks such as adding comments, flags, assigning issues, blocking/unblocking issues,\ncreating, cloning, and migrating issues, as well as setting and updating various attributes of the issues like\nacceptance criteria, priority, sprint, status, story epic, story points, and summary.\nAdditionally, functions for listing and searching for issues and users, viewing issues, and getting current user\ndetails are provided.\n\"\"\"",
            "last_accessed": 1745520326
        },
        {
            "sha1": "3e067dc900e1649d4c6dacadba3eafab0c6c6579",
            "docstring": "\"\"\"\nThis file includes various functions for interacting with an issue tracking system.\nFunctions are available for tasks such as adding comments, flags, assigning issues, blocking/unblocking issues,\ncreating, cloning, and migrating issues, as well as setting and updating various attributes of the issues like\nacceptance criteria, priority, sprint, status, story epic, story points, and summary.\nAdditionally, functions for listing and searching for issues and users, viewing issues, and getting current user\ndetails are provided.\n\"\"\"",
            "last_accessed": 1745566178
        },
        {
            "sha1": "a51d3bb67250ec8956f91093e0840789cd6cf7b5",
            "docstring": "\"\"\"\nThis file includes various functions for interacting with an issue tracking system.\nFunctions are available for tasks such as adding comments, flags, assigning issues, blocking/unblocking issues,\ncreating, cloning, and migrating issues, as well as setting and updating various attributes of the issues like\nacceptance criteria, priority, sprint, status, story epic, story points, and summary.\nAdditionally, functions for listing and searching for issues and users, viewing issues, and getting current user\ndetails are provided.\n\"\"\"",
            "last_accessed": 1745613423
        }
    ],
    "jira_creator/rest/ops/list_sprints.py": [
        {
            "sha1": "963565d8afbecd88432ef27342593cdd35674253",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745517371
        },
        {
            "sha1": "f22942e8e045cb9a1ffc3b9d2731e824897915a3",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745613426
        },
        {
            "sha1": "53f45e329120280c3a839a678abcd43efdf05d18",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745563531
        },
        {
            "sha1": "2a25a40cfa690e141ef2c10ca8650ef218059480",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745563532
        },
        {
            "sha1": "0260c8baed7d1903ab97983c2387cbe9f569e792",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745563882
        },
        {
            "sha1": "5a140a4a62c8278bcdf19024d5a01130e5e2ac0f",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n    \nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n    \nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n    \nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745563883
        },
        {
            "sha1": "cc7331f015bb854da8b42ec338af19d3f7f7d1d7",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745564529
        },
        {
            "sha1": "c09e2f3890985e9d47d972e3d9b35a8336570f38",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n    \nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n    \nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n    \nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745564530
        },
        {
            "sha1": "0a529f4272f481c56e266a5a2c930144bbd0712d",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565378
        },
        {
            "sha1": "f9468665d2b3e2cf8f1226ca258cbbcbe2c8a48d",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565379
        },
        {
            "sha1": "3abf7d2efef3ea1f7c530798c9d75474c6bdbba3",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565438
        },
        {
            "sha1": "5d820b7f8de06322b77ae171f02013564d62721d",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565439
        },
        {
            "sha1": "224f9abaf1dfdde00b10cd702e631e4d12d5130a",
            "docstring": "\"\"\"\nThis module provides a function to retrieve a list of open sprints for a specified board using an HTTP request.\n\nFunctions:\n- list_sprints(request_fn, board_id: str) -> list[str]:\n    Retrieves a list of names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable that makes HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings representing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565501
        },
        {
            "sha1": "1b73f0941df3d8a8b7cff0e9479e300ac8105d6d",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565503
        },
        {
            "sha1": "a659abaacb4256b63e16a6ed213bc7d9e24ae4a2",
            "docstring": "\"\"\"\nThis module provides a function to retrieve a list of open sprints for a specified board using an HTTP request.\n\nFunctions:\n- list_sprints(request_fn, board_id: str) -> list[str]:\n    Retrieves a list of names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable that makes HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings representing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565553
        },
        {
            "sha1": "992ac94afa0bc94a0e8e59e977bcaa7c196a7ff0",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565556
        },
        {
            "sha1": "10816a39a424051a0405d6ef7ccea7c2e598b060",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve a list of open sprints for a specified board using an HTTP request.\n\nFunction:\n- list_sprints(request_fn, board_id: str) -> list[str]:\n  Retrieves the names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable function that performs HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings containing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565629
        },
        {
            "sha1": "5d874a8a49dc555b3077a72a9472d654419592df",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565631
        },
        {
            "sha1": "88a34e51a4830936c00457bde11f00f9b21bccb5",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve a list of open sprints for a specified board using an HTTP request.\n\nFunction:\n- list_sprints(request_fn, board_id: str) -> list[str]:\nRetrieves the names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable function that performs HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings containing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565699
        },
        {
            "sha1": "8800a9f96625b97a8d51b53b914e5c0a66e54e17",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565701
        },
        {
            "sha1": "3b66f02f3fc5095992df7b63864dc1ba50e9dfba",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve a list of open sprints for a specified board using an HTTP request.\n\nFunction:\n- list_sprints(request_fn, board_id: str) -> list[str]:\n  Retrieves the names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable function that performs HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings containing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565770
        },
        {
            "sha1": "21bc18f32faf051eea6372c7389c6244e59c5413",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565773
        },
        {
            "sha1": "d7b86726f62b1c4909e023f555ad14a55d8e2d00",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve a list of open sprints for a specified board using an HTTP request.\n\nFunction:\n- list_sprints(request_fn, board_id: str) -> list[str]:\n  Retrieves the names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable function that performs HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings containing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565835
        },
        {
            "sha1": "fe5b048fbb08f7bc7d516abf5593e14603fd6edf",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565837
        },
        {
            "sha1": "e6ee4ee79dcca2175a294fa4613d882f4d358c6d",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve a list of open sprints for a specified board using an HTTP request.\n\nThe primary function in this module is `list_sprints`, which retrieves the names of open sprints associated with a given board.\n\nFunctions:\n- list_sprints(request_fn, board_id: str) -> list[str]:\n    Retrieves the names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable function that performs HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings containing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565886
        },
        {
            "sha1": "c023a9dd99a98fa09e381caacffb2e50c27d0fa1",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745565888
        },
        {
            "sha1": "4181d8a87ace1b13c8ed25f096ebe6c6a0aa7ca9",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve a list of open sprints for a specified board using an HTTP request.\n\nThe primary function in this module is `list_sprints`, which retrieves the names of open sprints associated with a\ngiven board.\n\nFunctions:\n- list_sprints(request_fn, board_id: str) -> list[str]:\n    Retrieves the names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable function that performs HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings containing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745566033
        },
        {
            "sha1": "d5dd088b2bd578e5973d781e3715d4bffd0ee04b",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\"\"\"",
            "last_accessed": 1745566036
        },
        {
            "sha1": "901e7ec57655048d398ec1bdff6d0cd090769f22",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve a list of open sprints for a specified board using an HTTP request.\n\nThe primary function in this module is `list_sprints`, which retrieves the names of open sprints associated with a\ngiven board.\n\nFunctions:\n- list_sprints(request_fn, board_id: str) -> list[str]:\n    Retrieves the names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable function that performs HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings containing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745566182
        },
        {
            "sha1": "61e9233905ea41b8c8eddbc98aadf33e78bfea00",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745566184
        },
        {
            "sha1": "d5dc5e7c24dcf11b166d1d94b6cb9982b4084035",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve a list of open sprints for a specified board using an HTTP request.\n\nThe primary function in this module is `list_sprints`, which retrieves the names of open sprints associated with a\ngiven board.\n\nFunctions:\n- list_sprints(request_fn, board_id: str) -> list[str]:\nRetrieves the names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable function that performs HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings containing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "36050945c3e8b98528e4554cb919854af4981056",
            "docstring": "\"\"\"\nRetrieve a list of open sprints for a specified board.\n\nArguments:\n- request_fn: A function used to make HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturn:\n- list[str]: A list of names of open sprints associated with the specified board.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745608267
        },
        {
            "sha1": "0531b9fee87bae67884e6d04685bedfd0cfddb00",
            "docstring": "\"\"\"\nThis module provides functionality to retrieve a list of open sprints for a specified board using an HTTP request.\n\nThe primary function in this module is `list_sprints`, which retrieves the names of open sprints associated with a\ngiven board.\n\nFunctions:\n- list_sprints(request_fn, board_id: str) -> list[str]:\nRetrieves the names of open sprints associated with the specified board.\n\nParameters:\n- request_fn: A callable function that performs HTTP requests.\n- board_id (str): The identifier of the board for which to retrieve the sprints.\n\nReturns:\n- A list of strings containing the names of open sprints.\n\nExceptions:\n- This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745613426
        }
    ],
    "jira_creator/rest/ops/search_users.py": [
        {
            "sha1": "034ea998164d5b0c81ccb9ee7c6bfb047d9e3f88",
            "docstring": "\"\"\"\nSearch for users based on a query string.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- query (str): The query string used to search for users by username.\n- max_results (int): The maximum number of results to return (default is 10).\n\nReturn:\n- list: A list of user objects matching the search query.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "95a7b85de3f363acf89ac7ddfd505e2cdf151d8d",
            "docstring": "\"\"\"\nSearch for users based on a query string.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- query (str): The query string used to search for users by username.\n- max_results (int): The maximum number of results to return (default is 10).\n\nReturn:\n- list: A list of user objects matching the search query.\n\"\"\"",
            "last_accessed": 1745613426
        },
        {
            "sha1": "86f408e67129ae09690dad31c0ee0817b00cd374",
            "docstring": "\"\"\"\nSearch for users based on a query string.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- query (str): The query string used to search for users by username.\n- max_results (int): The maximum number of results to return (default is 10).\n\nReturn:\n- list: A list of user objects matching the search query.\n\"\"\"",
            "last_accessed": 1745613426
        },
        {
            "sha1": "1198e177085839d779187bb054964c6bccc2c1c6",
            "docstring": "\"\"\"\nSearch for users based on a query string.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- query (str): The query string used to search for users by username.\n- max_results (int): The maximum number of results to return (default is 10).\n\nReturn:\n- list: A list of user objects matching the search query.\n\"\"\"",
            "last_accessed": 1745563534
        },
        {
            "sha1": "af7634933d559f31198acc6997a9ce6e99480b69",
            "docstring": "\"\"\"\nSearch for users based on a query string.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- query (str): The query string used to search for users by username.\n- max_results (int): The maximum number of results to return (default is 10).\n\nReturn:\n- list: A list of user objects matching the search query.\n\"\"\"",
            "last_accessed": 1745566184
        },
        {
            "sha1": "f9dbeb6a37e8259d69ac8e57a4b0b2ecf893f49f",
            "docstring": "\"\"\"\nSearch for users based on a query string.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- query (str): The query string used to search for users by username.\n- max_results (int): The maximum number of results to return (default is 10).\n\nReturn:\n- list: A list of user objects matching the search query.\n\"\"\"",
            "last_accessed": 1745566184
        }
    ],
    "jira_creator/rest/ops/set_sprint.py": [
        {
            "sha1": "b742bf8ee5d1486c6aaacabff91ec07d2cd1d671",
            "docstring": "\"\"\"\nThis script defines a function set_sprint that updates the sprint field of a JIRA issue using the provided request\nfunction, issue key, and sprint ID. It constructs a payload with the sprint information and makes a PUT request to the\nJIRA API endpoint to update the issue. The sprint ID can be None to remove the issue from the sprint. The function\nrelies on the EnvFetcher class from core.env_fetcher to retrieve the JIRA sprint field name.\n\nThe set_sprint function takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- sprint_id (int): The ID of the sprint to set for the issue. If sprint_id is not provided (or 0), the issue will\nbe removed from any sprint.\n\nSide Effects:\n- Modifies the sprint field of the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745517381
        },
        {
            "sha1": "3d82bd9225a78bae24aa6bdcd159a4f3cd552c95",
            "docstring": "\"\"\"\nSet the sprint for a specific Jira issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- sprint_id (int): The ID of the sprint to set for the issue. If sprint_id is not provided (or 0), the issue will\n  be removed from any sprint.\n\nSide Effects:\n- Modifies the sprint field of the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745566184
        },
        {
            "sha1": "c8f71db4f903a6dfb17a02ec182278cc5e0e47c0",
            "docstring": "\"\"\"\nThis script defines a function set_sprint that updates the sprint field of a JIRA issue using the provided request\nfunction, issue key, and sprint ID. It constructs a payload with the sprint information and makes a PUT request to the\nJIRA API endpoint to update the issue. The sprint ID can be None to remove the issue from the sprint. The function\nrelies on the EnvFetcher class from core.env_fetcher to retrieve the JIRA sprint field name.\n\nThe set_sprint function takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- sprint_id (int): The ID of the sprint to set for the issue. If sprint_id is not provided (or 0), the issue will\nbe removed from any sprint.\n\nSide Effects:\n- Modifies the sprint field of the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745566184
        },
        {
            "sha1": "8633a2c437158319e9857b7993187514cdb4b1a9",
            "docstring": "\"\"\"\nThis script defines a function set_sprint that updates the sprint field of a JIRA issue using the provided request\nfunction, issue key, and sprint ID. It constructs a payload with the sprint information and makes a PUT request to the\nJIRA API endpoint to update the issue. The sprint ID can be None to remove the issue from the sprint. The function\nrelies on the EnvFetcher class from core.env_fetcher to retrieve the JIRA sprint field name.\n\nThe set_sprint function takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- sprint_id (int): The ID of the sprint to set for the issue. If sprint_id is not provided (or 0), the issue will\nbe removed from any sprint.\n\nSide Effects:\n- Modifies the sprint field of the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "dba0228214e185c14c0d0739764a0fb237aabc12",
            "docstring": "\"\"\"\nSet the sprint for a specific Jira issue.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- sprint_id (int): The ID of the sprint to set for the issue. If sprint_id is not provided (or 0), the issue will\nbe removed from any sprint.\n\nSide Effects:\n- Modifies the sprint field of the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745613428
        },
        {
            "sha1": "e8ace0ae1b5033ac50026a3b1e0abf5b54cbbaf1",
            "docstring": "\"\"\"\nThis script defines a function set_sprint that updates the sprint field of a JIRA issue using the provided request\nfunction, issue key, and sprint ID. It constructs a payload with the sprint information and makes a PUT request to the\nJIRA API endpoint to update the issue. The sprint ID can be None to remove the issue from the sprint. The function\nrelies on the EnvFetcher class from core.env_fetcher to retrieve the JIRA sprint field name.\n\nThe set_sprint function takes three arguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the Jira issue to update.\n- sprint_id (int): The ID of the sprint to set for the issue. If sprint_id is not provided (or 0), the issue will\nbe removed from any sprint.\n\nSide Effects:\n- Modifies the sprint field of the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745613428
        }
    ],
    "jira_creator/rest/ops/remove_from_sprint.py": [
        {
            "sha1": "1f926f4d972c002d44ef33123534781ec27f4bb7",
            "docstring": "\"\"\"\nThis module defines a function 'remove_from_sprint' that is used to remove an issue from a sprint in an Agile project\nmanagement tool. It takes two parameters: 'request_fn' which is a function for making HTTP requests and 'issue_key'\nwhich is the key of the issue to be removed from the sprint. If the issue is successfully removed from the sprint, a\nsuccess message is printed. If an error occurs during the removal process, a failure message is printed and a\n'RemoveFromSprintError' exception is raised with an error message.\n\nThe 'remove_from_sprint' function removes an issue from the current sprint backlog. It takes 'request_fn' as a function\nused to make HTTP requests and 'issue_key' as the key of the issue to be removed. It may raise a 'RemoveFromSprintError'\nexception if there is an issue removing the specified issue from the sprint backlog. Upon successful removal, it prints\na message indicating that the issue has been moved to the backlog. If an error occurs, it prints a failure message and\nraises a 'RemoveFromSprintError' exception.\n\"\"\"",
            "last_accessed": 1745517398
        },
        {
            "sha1": "d33a1b3c37558f366cfdf53e0ea9666a7b9451cd",
            "docstring": "\"\"\"\nRemoves an issue from the current sprint backlog.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be removed from the sprint backlog.\n\nExceptions:\n- RemoveFromSprintError: Raised when there is an issue removing the specified issue from the sprint backlog.\n\nSide Effects:\n- If successful, prints a message indicating that the issue has been moved to the backlog.\n- If an error occurs, prints a message indicating the failure and raises a RemoveFromSprintError.\n\"\"\"",
            "last_accessed": 1745566193
        },
        {
            "sha1": "c79e1eea885e4ca9dc6ee84d36691d8e0e172913",
            "docstring": "\"\"\"\nThis module defines a function 'remove_from_sprint' that is used to remove an issue from a sprint in an Agile project\nmanagement tool. It takes two parameters: 'request_fn' which is a function for making HTTP requests and 'issue_key'\nwhich is the key of the issue to be removed from the sprint. If the issue is successfully removed from the sprint, a\nsuccess message is printed. If an error occurs during the removal process, a failure message is printed and a\n'RemoveFromSprintError' exception is raised with an error message.\n\nThe 'remove_from_sprint' function removes an issue from the current sprint backlog. It takes 'request_fn' as a function\nused to make HTTP requests and 'issue_key' as the key of the issue to be removed. It may raise a 'RemoveFromSprintError'\nexception if there is an issue removing the specified issue from the sprint backlog. Upon successful removal, it prints\na message indicating that the issue has been moved to the backlog. If an error occurs, it prints a failure message and\nraises a 'RemoveFromSprintError' exception.\n\"\"\"",
            "last_accessed": 1745566193
        },
        {
            "sha1": "3cf9906fc09b3df9c75ce000f1761b07dd4d3217",
            "docstring": "\"\"\"\nThis module defines a function 'remove_from_sprint' that is used to remove an issue from a sprint in an Agile project\nmanagement tool. It takes two parameters: 'request_fn' which is a function for making HTTP requests and 'issue_key'\nwhich is the key of the issue to be removed from the sprint. If the issue is successfully removed from the sprint, a\nsuccess message is printed. If an error occurs during the removal process, a failure message is printed and a\n'RemoveFromSprintError' exception is raised with an error message.\n\nThe 'remove_from_sprint' function removes an issue from the current sprint backlog. It takes 'request_fn' as a function\nused to make HTTP requests and 'issue_key' as the key of the issue to be removed. It may raise a 'RemoveFromSprintError'\nexception if there is an issue removing the specified issue from the sprint backlog. Upon successful removal, it prints\na message indicating that the issue has been moved to the backlog. If an error occurs, it prints a failure message and\nraises a 'RemoveFromSprintError' exception.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "1991ba38855436f9c57876592b90e362294790ef",
            "docstring": "\"\"\"\nRemoves an issue from the current sprint backlog.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be removed from the sprint backlog.\n\nExceptions:\n- RemoveFromSprintError: Raised when there is an issue removing the specified issue from the sprint backlog.\n\nSide Effects:\n- If successful, prints a message indicating that the issue has been moved to the backlog.\n- If an error occurs, prints a message indicating the failure and raises a RemoveFromSprintError.\n\"\"\"",
            "last_accessed": 1745613434
        },
        {
            "sha1": "cf820276d8f0d7b07bb3c69d4f688ebb095d14da",
            "docstring": "\"\"\"\nThis module defines a function 'remove_from_sprint' that is used to remove an issue from a sprint in an Agile project\nmanagement tool. It takes two parameters: 'request_fn' which is a function for making HTTP requests and 'issue_key'\nwhich is the key of the issue to be removed from the sprint. If the issue is successfully removed from the sprint, a\nsuccess message is printed. If an error occurs during the removal process, a failure message is printed and a\n'RemoveFromSprintError' exception is raised with an error message.\n\nThe 'remove_from_sprint' function removes an issue from the current sprint backlog. It takes 'request_fn' as a function\nused to make HTTP requests and 'issue_key' as the key of the issue to be removed. It may raise a 'RemoveFromSprintError'\nexception if there is an issue removing the specified issue from the sprint backlog. Upon successful removal, it prints\na message indicating that the issue has been moved to the backlog. If an error occurs, it prints a failure message and\nraises a 'RemoveFromSprintError' exception.\n\"\"\"",
            "last_accessed": 1745613434
        }
    ],
    "jira_creator/rest/ops/clone_issue.py": [
        {
            "sha1": "7c61fb6be5bd0fe4298a424f9100e039abb8e456",
            "docstring": "\"\"\"\nClones an issue by creating a new flag for the specified issue key.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be cloned.\n\nReturn:\n- dict: A dictionary representing the response from the request function.\n\"\"\"",
            "last_accessed": 1745517402
        },
        {
            "sha1": "21b99d248a4a180f5263f80b7bae28a683ae84c6",
            "docstring": "\"\"\"\nClones an issue by creating a new flag for the specified issue key.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be cloned.\n\nReturn:\n- dict: A dictionary representing the response from the request function.\n\"\"\"",
            "last_accessed": 1745566193
        },
        {
            "sha1": "743bccf4f5011d6074bded4d272e6b7739faa265",
            "docstring": "\"\"\"\nClones an issue by creating a new flag for the specified issue key.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be cloned.\n\nReturn:\n- dict: A dictionary representing the response from the request function.\n\"\"\"",
            "last_accessed": 1745566193
        },
        {
            "sha1": "05b9b53e82d1ba81fdc52466cb1a04ea64546445",
            "docstring": "\"\"\"\nClones an issue by creating a new flag for the specified issue key.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be cloned.\n\nReturn:\n- dict: A dictionary representing the response from the request function.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "b58ccda25eafe7fe3aab075c42b0cdb985ac36c7",
            "docstring": "\"\"\"\nClones an issue by creating a new flag for the specified issue key.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be cloned.\n\nReturn:\n- dict: A dictionary representing the response from the request function.\n\"\"\"",
            "last_accessed": 1745613436
        },
        {
            "sha1": "bdf3b8ad8ee1e5b97298fbe15a2a062d6b403520",
            "docstring": "\"\"\"\nClones an issue by creating a new flag for the specified issue key.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- issue_key (str): The key of the issue to be cloned.\n\nReturn:\n- dict: A dictionary representing the response from the request function.\n\"\"\"",
            "last_accessed": 1745613436
        }
    ],
    "jira_creator/providers/openai_provider.py": [
        {
            "sha1": "b03c3c285e631dae8c95f9b8364afb0b644ec219",
            "docstring": "\"\"\"\nThis module provides a class, OpenAIProvider, for interacting with the OpenAI API to improve text based on a given\nprompt and text. It includes a method, improve_text, that sends a request to the OpenAI API and returns the improved\ntext. The class initializes with API key, endpoint, and model fetched from environment variables using the EnvFetcher\nclass. It also handles exceptions by raising AiError in case of API call failure.\n\nClass OpenAIProvider:\nThis class provides a wrapper to interact with the OpenAI API for text completion and improvement.\n\nAttributes:\n- api_key (str): The API key used to authenticate requests to the OpenAI API.\n- endpoint (str): The URL endpoint for making requests to the OpenAI API chat completions.\n- model (str): The model identifier used for text completion and improvement.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str: Sends a request to the OpenAI API to improve the given text based on\na prompt. It returns the improved text after processing. Raises an AiError if the API call fails.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "6ab64f094fd86f2dd5414298968788bcc0fc99b4",
            "docstring": "\"\"\"\nThis class provides a wrapper to interact with the OpenAI API for text completion and improvement.\n\nAttributes:\n- api_key (str): The API key used to authenticate requests to the OpenAI API.\n- endpoint (str): The URL endpoint for making requests to the OpenAI API chat completions.\n- model (str): The model identifier used for text completion and improvement.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str: Sends a request to the OpenAI API to improve the given text based on\na prompt. It returns the improved text after processing. Raises an AiError if the API call fails.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "42b93f9465978f56b3c5a1bf6ea404f1df8bfa14",
            "docstring": "\"\"\"\nInitialize a Chatbot instance with API key, endpoint, and model information.\n\nArguments:\n- self: The Chatbot instance itself.\n\nSide Effects:\n- Sets the API key, endpoint URL, and model information for the Chatbot instance.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "d5401089d56c7acd11dca9e2e3e44ab109364da4",
            "docstring": "\"\"\"\nImproves the given text using an external API.\n\nArguments:\n- prompt (str): The prompt to provide context for improving the text.\n- text (str): The text to be improved.\n\nReturn:\n- str: The improved text after processing with the external API.\n\nSide Effects:\n- Makes a request to an external API using the provided prompt and text.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "7ad11ded58c4ea5bbada6236b52d680645aae58d",
            "docstring": "\"\"\"\nThis module provides a class, OpenAIProvider, for interacting with the OpenAI API to improve text based on a given\nprompt and text. It includes a method, improve_text, that sends a request to the OpenAI API and returns the improved\ntext. The class initializes with API key, endpoint, and model fetched from environment variables using the EnvFetcher\nclass. It also handles exceptions by raising AiError in case of API call failure.\n\nClass OpenAIProvider:\nThis class provides a wrapper to interact with the OpenAI API for text completion and improvement.\n\nAttributes:\n- api_key (str): The API key used to authenticate requests to the OpenAI API.\n- endpoint (str): The URL endpoint for making requests to the OpenAI API chat completions.\n- model (str): The model identifier used for text completion and improvement.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str: Sends a request to the OpenAI API to improve the given text based on\na prompt. It returns the improved text after processing. Raises an AiError if the API call fails.\n\"\"\"",
            "last_accessed": 1745566272
        }
    ],
    "jira_creator/providers/instructlab_provider.py": [
        {
            "sha1": "19c732980cbdd3fd268b69ba026c2994308c24b4",
            "docstring": "\"\"\"\nThis module defines the InstructLabProvider class, which facilitates interaction with an AI service for text improvement. \nThe class utilizes the requests library to send POST requests to a specified AI model server, identified by the \nenvironment variables \"AI_URL\" and \"AI_MODEL\". \n\nThe primary functionality is encapsulated in the improve_text method, which combines a given prompt with text, sends \nthe request to the AI service, and returns the enhanced text. In case of request failures, an AiError exception is \nraised, providing details about the failure.\n\nClasses:\n- InstructLabProvider: A class for interacting with an AI model to improve text generation.\n\nAttributes:\n- url (str): The URL of the AI model server.\n- model (str): The name or identifier of the AI model used for text generation.\n\nMethods:\n- __init__(self): Initializes the class instance with AI-related environment variables.\n- improve_text(self, prompt: str, text: str) -> str: Improves the provided text using the AI model and returns the \n  improved text.\n\nExceptions:\n- AiError: Raised when the POST request to the AI service fails, indicating an issue with the service.\n\"\"\"",
            "last_accessed": 1745517728
        },
        {
            "sha1": "26c8df9079d341458906a3f9791c6e0b555e3ab4",
            "docstring": "\"\"\"\nThis class provides a way to interact with an AI model hosted on a specified URL for improving text generation.\n\nAttributes:\n- url (str): The URL of the AI model server.\n- model (str): The name or identifier of the AI model used for text generation.\n\nMethods:\n- __init__(self): Initializes the class instance with AI-related environment variables.\n- improve_text(self, prompt: str, text: str) -> str: Sends a POST request to a specified URL with a given prompt\nand text to improve the text using a specific model. It then returns the improved text obtained from the response.\nRaises AiError if the POST request fails, providing details of the failure.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "01b2a7db5691dbce8b8a7978990f773b53a0507c",
            "docstring": "\"\"\"\nInitialize the class instance with AI-related environment variables.\n\nArguments:\n- self: The class instance itself.\n\nSide Effects:\n- Sets the 'url' attribute to the value of the environment variable \"AI_URL\".\n- Sets the 'model' attribute to the value of the environment variable \"AI_MODEL\".\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "96a41e272d42232af7e87d5198aeb2037fd770cf",
            "docstring": "\"\"\"\nSummary:\nThis method sends a POST request to a specified URL with a given prompt and text to improve the text using a specific model. It then returns the improved text obtained from the response.\n\nArguments:\n- self: The instance of the class.\n- prompt (str): The initial prompt to provide context for improving the text.\n- text (str): The text to be improved based on the provided prompt.\n\nReturn:\nstr: The improved text generated by the AI model in response to the provided prompt and text.\n\nExceptions:\n- AiError: Raised when the POST request to the URL fails, indicating an issue with the AI service. The exception message includes details about the failure, such as the status code and response text.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "1f303acb1353705809a8754153225eb7bb975d64",
            "docstring": "\"\"\"\nThis module provides the InstructLabProvider class for interacting with an AI service that enhances text generation. \nIt uses the requests library to send POST requests to an AI model server identified by the environment variables \n\"AI_URL\" and \"AI_MODEL\".\n\nThe main functionality is implemented in the improve_text method, which takes a prompt and text, sends a request \nto the AI service, and returns the improved text. An AiError exception is raised in case of request failures, \noffering details about the issue.\n\nClasses:\n- InstructLabProvider: A class for enhancing text using an AI model.\n\nAttributes:\n- url (str): The URL of the AI model server.\n- model (str): The identifier of the AI model used for text generation.\n\nMethods:\n- __init__(self): Initializes the class with AI-related environment variables.\n- improve_text(self, prompt: str, text: str) -> str: Improves the provided text using the AI model and returns \nthe enhanced text.\n\nExceptions:\n- AiError: Raised when the POST request to the AI service fails, indicating a service issue.\n\"\"\"",
            "last_accessed": 1745518639
        },
        {
            "sha1": "522ec922f9e1853aa27810030eb03e2a735a26b6",
            "docstring": "\"\"\"\nThis module provides the InstructLabProvider class for interacting with an AI service that enhances text generation.\nIt uses the requests library to send POST requests to an AI model server identified by the environment variables\n\"AI_URL\" and \"AI_MODEL\".\n\nThe main functionality is implemented in the improve_text method, which takes a prompt and text, sends a request\nto the AI service, and returns the improved text. An AiError exception is raised in case of request failures,\noffering details about the issue.\n\nClasses:\n- InstructLabProvider: A class for enhancing text using an AI model.\n\nAttributes:\n- url (str): The URL of the AI model server.\n- model (str): The identifier of the AI model used for text generation.\n\nMethods:\n- __init__(self): Initializes the class with AI-related environment variables.\n- improve_text(self, prompt: str, text: str) -> str: Improves the provided text using the AI model and returns\nthe enhanced text.\n\nExceptions:\n- AiError: Raised when the POST request to the AI service fails, indicating a service issue.\n\"\"\"",
            "last_accessed": 1745566272
        },
        {
            "sha1": "c73826fcbca4780dbbaa570f0ec31595cd25fc5d",
            "docstring": "\"\"\"\nThis module provides the InstructLabProvider class for interacting with an AI service that enhances text generation.\nIt utilizes the requests library to send POST requests to an AI model server, with the server's URL and model identifier\nfetched from environment variables.\n\nThe primary functionality is encapsulated in the improve_text method, which accepts a prompt and text, sends a request \nto the AI service, and returns the enhanced text. An AiError exception is raised in case of request failures, providing \ndetails about the issue.\n\nClasses:\n- InstructLabProvider: A class for enhancing text using an AI model.\n\nAttributes:\n- url (str): The URL of the AI model server.\n- model (str): The identifier of the AI model used for text generation.\n\nMethods:\n- __init__(self): Initializes the class with AI-related environment variables.\n- improve_text(self, prompt: str, text: str) -> str: Improves the provided text using the AI model and returns \nthe enhanced text.\n\nExceptions:\n- AiError: Raised when the POST request to the AI service fails, indicating a service issue.\n\"\"\"",
            "last_accessed": 1745608367
        },
        {
            "sha1": "fade24e0ed00055aa34d5afa5d0965dcc51ba576",
            "docstring": "\"\"\"\nThis module provides the InstructLabProvider class for interacting with an AI service that enhances text generation.\nIt utilizes the requests library to send POST requests to an AI model server, with the server's URL and model identifier\nfetched from environment variables.\n\nThe primary functionality is encapsulated in the improve_text method, which accepts a prompt and text, sends a request\nto the AI service, and returns the enhanced text. An AiError exception is raised in case of request failures, providing\ndetails about the issue.\n\nClasses:\n- InstructLabProvider: A class for enhancing text using an AI model.\n\nAttributes:\n- url (str): The URL of the AI model server.\n- model (str): The identifier of the AI model used for text generation.\n\nMethods:\n- __init__(self): Initializes the class with AI-related environment variables.\n- improve_text(self, prompt: str, text: str) -> str: Improves the provided text using the AI model and returns\nthe enhanced text.\n\nExceptions:\n- AiError: Raised when the POST request to the AI service fails, indicating a service issue.\n\"\"\"",
            "last_accessed": 1745613446
        }
    ],
    "jira_creator/providers/bart_provider.py": [
        {
            "sha1": "4b23740a20902da38aadf3840a45b8c75d628bd7",
            "docstring": "\"\"\"\nThis module defines the BARTProvider class for interacting with the BART (Bidirectional and Auto-Regressive Transformers) model to enhance text based on a given prompt. The class includes an `improve_text(prompt, text)` method that sends a POST request to an AI service endpoint to retrieve improved text. \n\nThe BARTProvider class is initialized with a default URL endpoint, which can be overridden by an environment variable. It handles HTTP requests and raises an AiError in case of request failures.\n\nAttributes:\n- url (str): The URL endpoint for the BART model, fetched from the environment variable \"AI_URL\".\n- headers (dict): A dictionary containing HTTP request headers, defaulting to {\"Content-Type\": \"application/json\"}.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str: \n  Sends a POST request to the BART model with the combined prompt and text, returning the improved text or raising an AiError if the request fails.\n\"\"\"",
            "last_accessed": 1745517739
        },
        {
            "sha1": "6949b159238fa9abed9965578937f93c083e5354",
            "docstring": "\"\"\"\nBARTProvider class represents a provider for interacting with the BART (Bidirectional and Auto-Regressive\nTransformers) model.\n\nAttributes:\n- url (str): The URL endpoint to communicate with the BART model, fetched from the environment variable \"AI_URL\".\n- headers (dict): A dictionary containing headers for the HTTP request, defaulting to {\"Content-Type\":\n\"application/json\"}.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str:\nCombines the provided prompt and text, sends a POST request to the BART model endpoint with the concatenated text,\nand returns the improved text generated by the model. If the request fails, it raises an AiError with details of\nthe failure.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "9157e7df212e492fcd1a872a9141e196d0454cdf",
            "docstring": "\"\"\"\nInitialize the class with a URL and headers for API requests.\n\nArguments:\n- self: the object instance.\n\nSide Effects:\n- Initializes the 'url' attribute with the value fetched from the environment variable \"AI_URL\".\n- Initializes the 'headers' attribute with a dictionary containing the \"Content-Type\" key set to \"application/json\".\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "b86138efe6bd08db6dfc56f2b4d91f1db838fb34",
            "docstring": "\"\"\"\nImprove the given text using an API endpoint.\n\nArguments:\n- self: The object instance.\n- prompt (str): The initial prompt or context for the text improvement.\n- text (str): The text to be improved.\n\nReturn:\n- str: The improved text generated by the API.\n\nExceptions:\n- This function may raise exceptions related to the HTTP request or response handling.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "5cf8cda6c259b296d6b942e6999714997e8503b1",
            "docstring": "\"\"\"\nThis module provides the BARTProvider class for enhancing text using the BART (Bidirectional and Auto-Regressive Transformers) model. The class includes a method to improve text based on a given prompt by sending a POST request to an AI service endpoint.\n\nThe BARTProvider class is initialized with a URL endpoint that can be overridden by an environment variable. It manages HTTP requests and raises an AiError in case of request failures.\n\nAttributes:\n- url (str): The URL endpoint for the BART model, fetched from the environment variable \"AI_URL\".\n- headers (dict): A dictionary containing HTTP request headers, defaulting to {\"Content-Type\": \"application/json\"}.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str:\n  Sends a POST request to the BART model with the combined prompt and text, returning the improved text or raising an AiError if the request fails.\n\"\"\"",
            "last_accessed": 1745518643
        },
        {
            "sha1": "68c7b0019a5d731c5586977e662a7722fef5c980",
            "docstring": "\"\"\"\nThis module defines the BARTProvider class, which facilitates text enhancement using the BART (Bidirectional and Auto-Regressive Transformers) model. It allows users to send a POST request to an AI service endpoint to improve text based on a specified prompt.\n\nThe BARTProvider class is initialized with a configurable URL endpoint, which can be set via an environment variable. It includes error handling for HTTP request failures, raising an AiError when necessary.\n\nKey Attributes:\n- url (str): The endpoint URL for the BART model, retrieved from the \"AI_URL\" environment variable.\n- headers (dict): A dictionary for HTTP request headers, defaulting to {\"Content-Type\": \"application/json\"}.\n\nKey Methods:\n- improve_text(prompt: str, text: str) -> str:\n  Combines the prompt and text, sends a POST request to the BART model, and returns the improved text. Raises an AiError if the request fails.\n\"\"\"",
            "last_accessed": 1745518999
        },
        {
            "sha1": "96f5c0ae01c0e1a7f170f0630218857725497d6b",
            "docstring": "\"\"\"\nThis module provides the BARTProvider class, which enables text enhancement using the BART (Bidirectional and Auto-Regressive Transformers) model. The class allows users to send POST requests to a specified AI service endpoint to improve text based on a given prompt.\n\nThe BARTProvider class is initialized with a configurable URL endpoint, sourced from an environment variable. It includes error handling for HTTP request failures, raising an AiError when necessary.\n\nKey Attributes:\n- url (str): The endpoint URL for the BART model, retrieved from the \"AI_URL\" environment variable.\n- headers (dict): A dictionary for HTTP request headers, defaulting to {\"Content-Type\": \"application/json\"}.\n\nKey Methods:\n- improve_text(prompt: str, text: str) -> str:\n  Combines the prompt and text, sends a POST request to the BART model, and returns the improved text. Raises an AiError if the request fails.\n\"\"\"",
            "last_accessed": 1745519147
        },
        {
            "sha1": "99d026ad985233378ce231ebb0482454faed8742",
            "docstring": "\"\"\"\nThis module provides the BARTProvider class, which facilitates text enhancement using the BART (Bidirectional and Auto-Regressive Transformers) model. It allows users to send POST requests to a specified AI service endpoint to improve text based on a provided prompt.\n\nThe BARTProvider class is initialized with a configurable URL endpoint, sourced from the \"AI_URL\" environment variable. It includes error handling for HTTP request failures, raising an AiError when necessary.\n\nKey Attributes:\n- url (str): The endpoint URL for the BART model, retrieved from the \"AI_URL\" environment variable.\n- headers (dict): A dictionary for HTTP request headers, defaulting to {\"Content-Type\": \"application/json\"}.\n\nKey Methods:\n- improve_text(prompt: str, text: str) -> str:\n  Combines the prompt and text, sends a POST request to the BART model, and returns the improved text. Raises an AiError if the request fails.\n\"\"\"",
            "last_accessed": 1745519294
        },
        {
            "sha1": "bd3afc7fe79bccda8bd2f9cd3e8c069fbf9a0286",
            "docstring": "\"\"\"\nThis module implements the BARTProvider class for enhancing text using the BART (Bidirectional and Auto-Regressive Transformers) model. It enables users to send POST requests to a specified AI service endpoint for text improvement based on a provided prompt.\n\nThe BARTProvider class is initialized with a configurable URL endpoint, which is retrieved from the \"AI_URL\" environment variable. It includes error handling for HTTP request failures, raising an AiError when necessary.\n\nKey Attributes:\n- url (str): The endpoint URL for the BART model, sourced from the \"AI_URL\" environment variable.\n- headers (dict): A dictionary for HTTP request headers, defaulting to {\"Content-Type\": \"application/json\"}.\n\nKey Methods:\n- improve_text(prompt: str, text: str) -> str: \n  Combines the prompt and text, sends a POST request to the BART model, and returns the improved text. Raises an AiError if the request fails.\n\"\"\"",
            "last_accessed": 1745520332
        },
        {
            "sha1": "08a78d34771737a20d2c148f8776f8145bfe072b",
            "docstring": "\"\"\"\nThis module implements the BARTProvider class for enhancing text using the BART (Bidirectional and Auto-Regressive\nTransformers) model. It enables users to send POST requests to a specified AI service endpoint for text improvement\nbased on a provided prompt.\n\nThe BARTProvider class is initialized with a configurable URL endpoint, which is retrieved from the \"AI_URL\"\nenvironment variable. It includes error handling for HTTP request failures, raising an AiError when necessary.\n\nKey Attributes:\n- url (str): The endpoint URL for the BART model, sourced from the \"AI_URL\" environment variable.\n- headers (dict): A dictionary for HTTP request headers, defaulting to {\"Content-Type\": \"application/json\"}.\n\nKey Methods:\n- improve_text(prompt: str, text: str) -> str:\n  Combines the prompt and text, sends a POST request to the BART model, and returns the improved text. Raises an AiError\n  if the request fails.\n\"\"\"",
            "last_accessed": 1745566272
        },
        {
            "sha1": "722bce6828995b9d1fce094b94e158b5778df16a",
            "docstring": "\"\"\"\nThis module provides the BARTProvider class, which facilitates text enhancement using the BART (Bidirectional and Auto-Regressive Transformers) model. Users can send POST requests to a specified AI service endpoint to improve text based on a provided prompt.\n\nThe BARTProvider class is initialized with a URL endpoint sourced from the \"AI_URL\" environment variable. It includes error handling for HTTP request failures, raising an AiError when necessary.\n\nKey Attributes:\n- url (str): The endpoint URL for the BART model.\n- headers (dict): HTTP request headers, defaulting to {\"Content-Type\": \"application/json\"}.\n\nKey Methods:\n- improve_text(prompt: str, text: str) -> str:\n  Combines the prompt and text, sends a POST request to the BART model, and returns the improved text. Raises an AiError if the request fails.\n\"\"\"",
            "last_accessed": 1745608371
        },
        {
            "sha1": "4b2d6dcdf640fd12ffe09ab0c624108bd821e553",
            "docstring": "\"\"\"\nThis module defines the BARTProvider class, which enables users to enhance text using the BART (Bidirectional and Auto-Regressive Transformers) model through HTTP POST requests to a specified AI service endpoint. \n\nThe BARTProvider class is initialized with a URL endpoint from the \"AI_URL\" environment variable and includes error handling for HTTP request failures, raising an AiError when necessary.\n\nKey Attributes:\n- url (str): The endpoint URL for the BART model.\n- headers (dict): HTTP request headers, defaulting to {\"Content-Type\": \"application/json\"}.\n\nKey Methods:\n- improve_text(prompt: str, text: str) -> str:\n  Combines the prompt and text, sends a POST request to the BART model, and returns the improved text. Raises an AiError if the request fails.\n\"\"\"",
            "last_accessed": 1745609805
        },
        {
            "sha1": "a69a8314b22f6a2905b05031853283ac22a98135",
            "docstring": "\"\"\"\nThis module provides the BARTProvider class for enhancing text using the BART (Bidirectional and Auto-Regressive Transformers) model via HTTP POST requests to a specified AI service endpoint.\n\nThe BARTProvider class is initialized using the \"AI_URL\" environment variable to set the endpoint URL. It includes error handling for HTTP request failures, raising an AiError when necessary.\n\nKey Attributes:\n- url (str): The endpoint URL for the BART model.\n- headers (dict): Default HTTP request headers set to {\"Content-Type\": \"application/json\"}.\n\nKey Methods:\n- improve_text(prompt: str, text: str) -> str:\n  Combines the prompt and text, sends a POST request to the BART model, and returns the improved text. Raises an AiError if the request fails.\n\"\"\"",
            "last_accessed": 1745610008
        },
        {
            "sha1": "a0c8a9739535c64b1b75620ab72610ebb4c8a5d0",
            "docstring": "\"\"\"\nThis module provides the BARTProvider class for enhancing text using the BART (Bidirectional and Auto-Regressive\nTransformers) model via HTTP POST requests to a specified AI service endpoint.\n\nThe BARTProvider class is initialized using the \"AI_URL\" environment variable to set the endpoint URL. It includes\nerror handling for HTTP request failures, raising an AiError when necessary.\n\nKey Attributes:\n- url (str): The endpoint URL for the BART model.\n- headers (dict): Default HTTP request headers set to {\"Content-Type\": \"application/json\"}.\n\nKey Methods:\n- improve_text(prompt: str, text: str) -> str:\nCombines the prompt and text, sends a POST request to the BART model, and returns the improved text. Raises an AiError\nif the request fails.\n\"\"\"",
            "last_accessed": 1745613446
        }
    ],
    "jira_creator/providers/deepseek_provider.py": [
        {
            "sha1": "2406e475ebb00c5271517860491461766aec6cf3",
            "docstring": "\"\"\"\nThis module provides the DeepSeekProvider class for interacting with a DeepSeek AI service to enhance text quality. \n\nThe DeepSeekProvider class is initialized with default endpoint values retrieved from environment variables. It includes the method improve_text(prompt, text) which sends a POST request to the AI service to improve the provided text. Upon success, it returns the enhanced text; if it fails, an AiError is raised with details of the failure.\n\nClasses:\n- DeepSeekProvider: A class for managing interactions with the DeepSeek AI service.\n\nAttributes of DeepSeekProvider:\n- url (str): The endpoint URL for the AI service, defaults to a local or proxied endpoint.\n- headers (dict): The headers for the HTTP request, with Content-Type set to application/json.\n- model (str): The AI model used for processing the text data.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str: \n  Concatenates a given prompt with text, sends a request to the AI service, and returns the improved text.\n\nExceptions:\n- AiError: Raised when the POST request fails or if there is an issue with the JSON response.\n\"\"\"",
            "last_accessed": 1745517750
        },
        {
            "sha1": "877ff2006f0ad517869a25239dbd12e0a8a0ac12",
            "docstring": "\"\"\"\nA class that provides methods to interact with a DeepSeek AI service.\n\nAttributes:\n- url (str): The endpoint URL for the AI service, defaults to a local or proxied endpoint.\n- headers (dict): The headers for the HTTP request, with the Content-Type set to application/json.\n- model (str): The AI model used for processing the text data.\n\"\"\"",
            "last_accessed": 1745517752
        },
        {
            "sha1": "1dc2c7e358b99a7d44977d7e6b23af627de76adb",
            "docstring": "\"\"\"\nInitialize the AIEndpoint class with default values for URL, headers, and model.\n\nArguments:\n- self: The instance of the class.\n\nSide Effects:\n- Initializes the URL, headers, and model attributes using environment variables fetched by EnvFetcher.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "cf7d8caa2e0d95b05c43723bdb9940fce51f49cb",
            "docstring": "\"\"\"\nConcatenates a given prompt with a text, separated by two new lines.\n\nArguments:\n- prompt (str): The initial prompt to be displayed.\n- text (str): The text to be appended to the prompt.\n\nReturn:\n- str: The combined prompt and text.\n\nExceptions:\n- AiError: Raised if the POST request fails or if there is an issue parsing the JSON response.\n\nSide Effects:\n- Sends a POST request using the provided URL, headers, model, and timeout settings.\n- Modifies the response by removing specific HTML tags (\"<think>\") if present.\n\"\"\"",
            "last_accessed": 1745517756
        },
        {
            "sha1": "be44734ef28c9b6b44abe654fdb8cb1287673f6f",
            "docstring": "\"\"\"\nThis module provides the DeepSeekProvider class for interacting with a DeepSeek AI service to enhance text quality.\n\nThe DeepSeekProvider class is initialized with default endpoint values retrieved from environment variables. It\nincludes the method improve_text(prompt, text) which sends a POST request to the AI service to improve the provided\ntext. Upon success, it returns the enhanced text; if it fails, an AiError is raised with details of the failure.\n\nClasses:\n- DeepSeekProvider: A class for managing interactions with the DeepSeek AI service.\n\nAttributes of DeepSeekProvider:\n- url (str): The endpoint URL for the AI service, defaults to a local or proxied endpoint.\n- headers (dict): The headers for the HTTP request, with Content-Type set to application/json.\n- model (str): The AI model used for processing the text data.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str:\nConcatenates a given prompt with text, sends a request to the AI service, and returns the improved text.\n\nExceptions:\n- AiError: Raised when the POST request fails or if there is an issue with the JSON response.\n\"\"\"",
            "last_accessed": 1745566272
        },
        {
            "sha1": "1a76a3ee0e4c8aa7688bcccd3b68f2cd3138381c",
            "docstring": "\"\"\"\nA class that provides methods to interact with a DeepSeek AI service.\n\nAttributes:\n- url (str): The endpoint URL for the AI service, defaults to a local or proxied endpoint.\n- headers (dict): The headers for the HTTP request, with the Content-Type set to application/json.\n- model (str): The AI model used for processing the text data.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "64bd5b90994046a9e186e6e168909ede5516acda",
            "docstring": "\"\"\"\nConcatenates a given prompt with a text, separated by two new lines.\n\nArguments:\n- prompt (str): The initial prompt to be displayed.\n- text (str): The text to be appended to the prompt.\n\nReturn:\n- str: The combined prompt and text.\n\nExceptions:\n- AiError: Raised if the POST request fails or if there is an issue parsing the JSON response.\n\nSide Effects:\n- Sends a POST request using the provided URL, headers, model, and timeout settings.\n- Modifies the response by removing specific HTML tags (\"<think>\") if present.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "15de4bf3a62ffe88d5848fd86759bc07b60678f2",
            "docstring": "\"\"\"\nThis module provides the DeepSeekProvider class for interacting with a DeepSeek AI service to enhance text quality.\n\nThe DeepSeekProvider class is initialized with default endpoint values retrieved from environment variables. It\nincludes the method improve_text(prompt, text) which sends a POST request to the AI service to improve the provided\ntext. Upon success, it returns the enhanced text; if it fails, an AiError is raised with details of the failure.\n\nClasses:\n- DeepSeekProvider: A class for managing interactions with the DeepSeek AI service.\n\nAttributes of DeepSeekProvider:\n- url (str): The endpoint URL for the AI service, defaults to a local or proxied endpoint.\n- headers (dict): The headers for the HTTP request, with Content-Type set to application/json.\n- model (str): The AI model used for processing the text data.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str:\nConcatenates a given prompt with text, sends a request to the AI service, and returns the improved text.\n\nExceptions:\n- AiError: Raised when the POST request fails or if there is an issue with the JSON response.\n\"\"\"",
            "last_accessed": 1745613446
        }
    ],
    "jira_creator/providers/gpt4all_provider.py": [
        {
            "sha1": "a0fa9c053bfceb20cca23fb7189e2846a1719a78",
            "docstring": "\"\"\"\nThis module provides a class GPT4AllProvider that serves as a wrapper for the GPT4All model, facilitating text improvement by generating enhanced versions of provided text based on specific prompts. \n\nThe GPT4AllProvider class includes methods for initializing the model and improving text. It features an __init__ method for model setup and an improve_text method which takes a prompt and original text, combines them, and utilizes the GPT4All model to produce an improved version.\n\nAttributes:\n- model_name (str): The name of the GPT4All model to be used, defaulting to \"ggml-gpt4all-j-v1.3-groovy\".\n- model: An instance of the GPT4All model initialized with the specified model_name.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str: Generates an improved version of the provided text based on the given prompt.\n\"\"\"",
            "last_accessed": 1745517771
        },
        {
            "sha1": "771c03d27d8db87bcc763ca50092e2868b2dc44a",
            "docstring": "\"\"\"\nThis class provides a wrapper to interact with the GPT4All model for text improvement.\n\nAttributes:\n- model_name (str): The name of the GPT4All model to be used, defaults to \"ggml-gpt4all-j-v1.3-groovy\".\n- model: An instance of the GPT4All model initialized with the specified model_name.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str: Takes a prompt and text as input, generates an instruction combining\nthem, uses the GPT4All model to improve the text, and returns the improved version.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "1f3231f1350bda17d00bac42eca779d3a8f0d6f2",
            "docstring": "\"\"\"\nInitialize a new instance of the GPT4AllModel class with the specified model name.\n\nArguments:\n- model_name (str): The name of the GPT4All model to be used. Defaults to \"ggml-gpt4all-j-v1.3-groovy\".\n\nExceptions:\n- GTP4AllError: Raised if there is an error loading the GPT4All model.\n\nSide Effects:\n- Initializes the model attribute with an instance of the GPT4All class using the provided model name.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "c3983b29dbda573c4a42b2d75c27075f2c3ee135",
            "docstring": "\"\"\"\nImprove the given text by generating an improved version based on the provided prompt.\n\nArguments:\n- prompt (str): The prompt to be displayed before the text for improvement.\n- text (str): The original text that needs to be improved.\n\nReturn:\n- str: The improved version of the text, maintaining the original structure.\n\nSide Effects:\n- Calls a model to generate the improved text based on the prompt and original text.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "ac2405acd4f9ba9422419301cd5efe35bccc5722",
            "docstring": "\"\"\"\nThis module provides a class GPT4AllProvider that serves as a wrapper for the GPT4All model, facilitating text\nimprovement by generating enhanced versions of provided text based on specific prompts.\n\nThe GPT4AllProvider class includes methods for initializing the model and improving text. It features an __init__\nmethod for model setup and an improve_text method which takes a prompt and original text, combines them, and utilizes\nthe GPT4All model to produce an improved version.\n\nAttributes:\n- model_name (str): The name of the GPT4All model to be used, defaulting to \"ggml-gpt4all-j-v1.3-groovy\".\n- model: An instance of the GPT4All model initialized with the specified model_name.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str: Generates an improved version of the provided text based on the given\nprompt.\n\"\"\"",
            "last_accessed": 1745566280
        },
        {
            "sha1": "416e5014fd9986fa9889a1e6ef723a39cd2c2754",
            "docstring": "\"\"\"\nThis module provides a class GPT4AllProvider that serves as a wrapper for the GPT4All model, facilitating text\nimprovement by generating enhanced versions of provided text based on specific prompts.\n\nThe GPT4AllProvider class includes methods for initializing the model and improving text. It features an __init__\nmethod for model setup and an improve_text method which takes a prompt and original text, combines them, and utilizes\nthe GPT4All model to produce an improved version.\n\nAttributes:\n- model_name (str): The name of the GPT4All model to be used, defaulting to \"ggml-gpt4all-j-v1.3-groovy\".\n- model: An instance of the GPT4All model initialized with the specified model_name.\n\nMethods:\n- improve_text(prompt: str, text: str) -> str: Generates an improved version of the provided text based on the given\nprompt.\n\"\"\"",
            "last_accessed": 1745613446
        }
    ],
    "jira_creator/core/env_fetcher.py": [
        {
            "sha1": "4435810bfde1ac95200b85ccff1bedff5c2f3964",
            "docstring": "\"\"\"\nThis module provides a class, EnvFetcher, to fetch and validate Jira-related environment variables. It includes methods\nto fetch the value of a specific environment variable and to fetch all required Jira-related environment variables.\n\nThe EnvFetcher class offers the following functionality:\n\n- Fetch individual environment variable values, with validation to ensure they are set.\n- Retrieve all specified Jira-related environment variables in a single call.\n\nAttributes include various configuration options needed for interacting with Jira, such as the Jira instance URL,\nproject key, personal access token, and custom field identifiers. The class is designed to ensure that all necessary\nenvironment variables are available for proper functionality.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "32f51193e35adce5e3f7e1d19ff3b7509ae04b20",
            "docstring": "\"\"\"\nClass to fetch and validate Jira-related environment variables.\n\nAttributes:\n- JIRA_URL (str): The URL of the Jira instance.\n- PROJECT_KEY (str): The key of the Jira project.\n- AFFECTS_VERSION (str): The affected version of the project.\n- COMPONENT_NAME (str): The name of the component.\n- PRIORITY (str): The priority level of the issue.\n- JPAT (str): The Jira personal access token.\n- JIRA_BOARD_ID (str): The ID of the Jira board.\n- AI_PROVIDER (str): The provider of the AI service.\n- AI_API_KEY (str): The API key for the AI service.\n- AI_MODEL (str): The model used for AI processing.\n- AI_URL (str): The URL for the AI service.\n- JIRA_EPIC_FIELD (str): The custom field for Jira epics.\n- JIRA_ACCEPTANCE_CRITERIA_FIELD (str): The custom field for acceptance criteria.\n- JIRA_BLOCKED_FIELD (str): The custom field for blocked status.\n- JIRA_BLOCKED_REASON_FIELD (str): The custom field for blocked reasons.\n- JIRA_STORY_POINTS_FIELD (str): The custom field for story points.\n- JIRA_SPRINT_FIELD (str): The custom field for sprints.\n- VOSK_MODEL (str): The path to the Vosk model file.\n- TEMPLATE_DIR (str): The directory path for templates.\n\nMethods:\n- get(var_name): Fetches the value of the specified environment variable.\n- fetch_all(env_vars): Fetches all specified Jira-related environment variables.\n\"\"\"",
            "last_accessed": 1745613436
        },
        {
            "sha1": "d7a2969e8a170f7154ab8bd33d611dae3a2bd841",
            "docstring": "\"\"\"\nFetches the value of the environment variable.\n\nArguments:\n- var_name (str): The name of the environment variable to retrieve the value for.\n\"\"\"",
            "last_accessed": 1745613436
        },
        {
            "sha1": "8515b7a28bdbffa1850e7b3055032a8188c049c8",
            "docstring": "\"\"\"\nFetches all required Jira-related environment variables.\n\nArguments:\n- env_vars (list): A list of environment variables to fetch.\n\nReturn:\n- dict: A dictionary containing the fetched environment variables as key-value pairs.\n\"\"\"",
            "last_accessed": 1745613436
        },
        {
            "sha1": "4a369bc911abee1bddb364a20ccc7f3f7a6c4ad8",
            "docstring": "\"\"\"\nThis module provides a class, EnvFetcher, to fetch and validate Jira-related environment variables. It includes methods\nto fetch the value of a specific environment variable and to fetch all required Jira-related environment variables.\n\nThe EnvFetcher class offers the following functionality:\n\n- Fetch individual environment variable values, with validation to ensure they are set.\n- Retrieve all specified Jira-related environment variables in a single call.\n\nAttributes include various configuration options needed for interacting with Jira, such as the Jira instance URL,\nproject key, personal access token, and custom field identifiers. The class is designed to ensure that all necessary\nenvironment variables are available for proper functionality.\n\"\"\"",
            "last_accessed": 1745613436
        }
    ],
    "jira_creator/exceptions/exceptions.py": [
        {
            "sha1": "8c97b6808bb37d56717398d59a9e16b54052ab2c",
            "docstring": "\"\"\"\nThis module defines a collection of custom exceptions for handling various error scenarios encountered during\ninteractions with Jira. Each exception class extends the BaseException class and targets specific issues such as\nmissing configuration variables, errors in setting story epics, listing and editing issues, managing descriptions,\nassigning/unassigning issues, voting on story points, and other Jira-related operations. The structured approach\nto exception handling allows for clearer error management and debugging in applications that integrate with Jira.\n\"\"\"",
            "last_accessed": 1745520102
        },
        {
            "sha1": "acc61f12d3cbc6477a64d1db54cd60d1901663de",
            "docstring": "\"\"\"\nRepresents an exception raised when a required Jira environment variable is missing.\n\nAttributes:\n- BaseException: The base exception class in Python.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "fc89a9f9bffe687c45f88a3f383c742c607581d0",
            "docstring": "\"\"\"\nThis class represents a custom exception for errors related to setting a story epic.\n\nAttributes:\nNo specific attributes are defined in this class.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "1fb92184a5d31acdc5841309bde930149d9aecf3",
            "docstring": "\"\"\"\nThis class represents a custom exception called ListIssuesError.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "68f914e83d98c13b90f7b846359c27194304699a",
            "docstring": "\"\"\"\nThis class represents a custom exception for errors related to setting acceptance criteria.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "b177c919bc392085cecca8e20e5344de0077df8f",
            "docstring": "\"\"\"\nThis class represents a custom exception called DispatcherError.\n\nAttributes:\n- None\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "f20a8b770c48aeb0ef6bb6202f6f7d1c767d9cf4",
            "docstring": "\"\"\"\nThis class represents a custom exception for errors that occur while trying to edit an issue.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "b1972b863b7750a4a70e6ba8f7326c7c38d5dbc8",
            "docstring": "\"\"\"\nThis class represents a custom exception for errors that occur during fetching descriptions.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "fec2522ed0371a2449e067239c141270504bd195",
            "docstring": "\"\"\"\nThis class represents a custom exception for errors related to editing descriptions.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "b4eae97e7c50b331283a7558f46cb963acef000f",
            "docstring": "\"\"\"\nA custom exception class for handling errors related to removing items from a sprint.\n\nAttributes:\n- None\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "9b77f9d1bf025d5144ad7bc6a552e1bc347834fb",
            "docstring": "\"\"\"\nThis class represents an exception raised when attempting to change the type of an issue.\n\nAttributes:\nNo attributes are defined for this class.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "690387f7f6dae40f9597d0b52d929132343270e3",
            "docstring": "\"\"\"\nThis class represents an error that occurs when trying to unassign an issue that is not assigned to anyone.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "8dbf4a95b71dc61ff5486fcd5f7cb1e9bbf61a19",
            "docstring": "\"\"\"\nThis class represents an error that occurs when trying to assign an issue.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "7246e9df5910aa77f287b177cc7b37276d5dd901",
            "docstring": "\"\"\"\nThis class represents a custom exception called FetchIssueIDError.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "6124a9151578813944c88ff293f90c637230a75e",
            "docstring": "\"\"\"\nThis class represents a custom exception for errors related to voting story points.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "2111508fc8aad90c322c5f26ea6e3fb555d62421",
            "docstring": "\"\"\"\nThis class represents an exception raised when there is an error in retrieving a prompt.\n\nAttributes:\nNo attributes are defined explicitly in this class.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "1db344c086744831dbdb887003c2f332b39d42e7",
            "docstring": "\"\"\"\nThis class represents an exception that is raised when an error occurs while updating a description.\n\nAttributes:\n- None\n\"\"\"",
            "last_accessed": 1745520118
        },
        {
            "sha1": "fad408e3874a3bd60d728e2a26044d7ac81cdeb0",
            "docstring": "\"\"\"\nThis class represents a custom exception for migration errors.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "66ab3fa453c84f5d26b000a0dd71f991a84fae1b",
            "docstring": "\"\"\"\nThis class represents an exception for an open issue.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "bc8fba6565678a190078faff0e24e34e6ad164af",
            "docstring": "\"\"\"\nThis class represents an error that occurs when viewing an issue fails.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "c94718df1fb950f1035461715c21119c1f6a83fd",
            "docstring": "\"\"\"\nThis class represents an error that occurs when attempting to add a sprint to a project.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "241fa29b62afcf44cea214ffefef1386c72222a2",
            "docstring": "\"\"\"\nThis class represents a custom exception called SetStatusError.\n\nAttributes:\n- None\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "7224ac4d1333dc683894ca89031130f3fc0a691d",
            "docstring": "\"\"\"\nA custom exception class for handling errors related to blocks in a program.\n\nAttributes:\nNo specific attributes defined.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "7ea7f09bd0748b771725e52dcde5e7d49dbfa989",
            "docstring": "\"\"\"\nThis class represents a custom exception called UnBlockError.\n\nAttributes:\n- No specific attributes defined.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "651ffbfc6c0c88c1d5b20cb94f38c2b8ed565db0",
            "docstring": "\"\"\"\nThis class represents an error that occurs when attempting to add a comment.\n\nAttributes:\nNo specific attributes are defined in this class.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "f12eacbb3b7aefd2cadabbd1945db1720a9b92a7",
            "docstring": "\"\"\"\nThis class represents a custom exception for AI-related errors.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "b536bca2f655851ef53a9b9ff11e4455af093e56",
            "docstring": "\"\"\"\nThis class represents a custom exception for search-related errors.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "5a06639f6e4480019621db4cdd8dd77103104f94",
            "docstring": "\"\"\"\nThis class represents an error that occurs when creating an issue.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "40474adbc20bf0921fe766fb863258a214fd3211",
            "docstring": "\"\"\"\nA custom exception class representing an error that occurred during linting all files.\n\nAttributes:\n- None\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "525de2f61e80b0a5767a42a5257119afb1091b76",
            "docstring": "\"\"\"\nThis class represents a custom exception for linting errors.\n\nAttributes:\nNo specific attributes.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "4df86a3da624b2367ced83a6a8c6c77e84da1855",
            "docstring": "\"\"\"\nThis class represents a custom exception called SetPriorityError.\n\nAttributes:\n- None\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "8f0fb58c53e566b7fc0d5b759337493fbdb8dd1f",
            "docstring": "\"\"\"\nThis class represents an error that occurs when trying to set story points for a task in a project management system.\n\nAttributes:\nNo specific attributes are defined for this class.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "8a18bb870d4e7eeadc8a05848ce376bfe3953d33",
            "docstring": "\"\"\"\nThis class represents a custom exception for handling type errors during a change operation.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "8fde5b677915ebd7a7dd1f65f80bb5de73b14426",
            "docstring": "\"\"\"\nThis class represents an exception for when a list is blocked from performing an operation.\n\nAttributes:\nNo attributes defined.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "1b194e2723bd6b93454e2714c0172153c44acf8d",
            "docstring": "\"\"\"\nThis class represents an exception for invalid prompts.\n\nAttributes:\nNo specific attributes.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "f4e646ee8b342a981846bc593c96cc269b172098",
            "docstring": "\"\"\"\nThis class represents an exception raised when there is an error in making a request to the Jira client.\n\nAttributes:\n- None\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "dc5bf8a5126bfd2e13ceb909c6ab6c4b2b231216",
            "docstring": "\"\"\"\nThis class represents a custom exception for handling connection errors that occur on a quarterly basis.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "332f9669ed5ca13bbacf9e84948c84bca283f9e7",
            "docstring": "\"\"\"\nThis class represents a custom error called GTP4AllError that inherits from BaseException.\nIt is used to handle specific exceptions related to the GTP4All system.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "7cde404fcd2c6f8024db7e4df4e13fa2d673622c",
            "docstring": "\"\"\"\nThis class represents an error specific to an AI provider.\n\nAttributes:\nNo specific attributes.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "1329fbe0e39bb30690bfe2f264f02a6832394894",
            "docstring": "\"\"\"\nThis class represents a custom exception for errors that occur in an AI helper application.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "25a1cad05bb2a8d0c5ad64420e50d954ea5c5394",
            "docstring": "\"\"\"\nThis class represents a custom exception called GetUserError that can be raised in specific situations.\nAttributes:\n- None\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "3355d45cfdde4fe504cc5da4203400505ff52327",
            "docstring": "\"\"\"\nThis class represents an error that occurs during user search operations.\n\nAttributes:\nNone\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "6603f97fde58ae8c780b6ef3c7d3d90af5c602ce",
            "docstring": "\"\"\"\nThis class represents a custom exception for flag removal errors.\n\nAttributes:\nNo attributes are defined for this class.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "f4a63b4379cbb074a5d9a6a50e2d3410e6d8e477",
            "docstring": "\"\"\"\nThis module defines a collection of custom exceptions for handling various error scenarios encountered during\ninteractions with Jira. Each exception class extends the BaseException class and targets specific issues such as\nmissing configuration variables, errors in setting story epics, listing and editing issues, managing descriptions,\nassigning/unassigning issues, voting on story points, and other Jira-related operations. The structured approach\nto exception handling allows for clearer error management and debugging in applications that integrate with Jira.\n\"\"\"",
            "last_accessed": 1745566789
        },
        {
            "sha1": "b1ea4a6c244185fc46871d4e3d79b4e4daf63c19",
            "docstring": "\"\"\"\nThis class represents an exception that is raised when an error occurs while updating a description.\n\nAttributes:\n- None\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "380114ddb5ac5076cda3d273509dc8cb013c8e21",
            "docstring": "\"\"\"\nThis module defines a collection of custom exceptions for handling various error scenarios encountered during\ninteractions with Jira. Each exception class extends the BaseException class and targets specific issues such as\nmissing configuration variables, errors in setting story epics, listing and editing issues, managing descriptions,\nassigning/unassigning issues, voting on story points, and other Jira-related operations. The structured approach\nto exception handling allows for clearer error management and debugging in applications that integrate with Jira.\n\"\"\"",
            "last_accessed": 1745613462
        }
    ],
    "jira_creator/templates/template_loader.py": [
        {
            "sha1": "be267a0661ebfed7e1c5f24cd71d1e55161e7f9b",
            "docstring": "\"\"\"\nThis module provides the TemplateLoader class for loading and rendering templates used in generating issue descriptions.\n\nThe TemplateLoader class allows for the initialization with a specific template directory and issue type, and includes\nmethods to:\n- Load a template file and extract field names and content.\n- Retrieve the list of fields defined in the template.\n- Get the complete template content as a string.\n- Render a description by replacing placeholders in the template with values from a provided dictionary.\n\nUsage of this module is intended for applications that require dynamic generation of text based on templates, such as\nissue tracking systems or reporting tools.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "a7ad1f6df5c4cc156d2df3d4e0fed83977ba4c0e",
            "docstring": "\"\"\"\nClass for loading and processing template files for generating issue descriptions.\n\nAttributes:\n- template_path (Path): The path to the template file for the specified issue type.\n- fields (List[str]): A list of field names extracted from the template file.\n- template_lines (List[str]): A list of lines comprising the template content.\n\nMethods:\n- __init__(template_dir: Path, issue_type: str): Initializes the TemplateLoader by loading the template file.\n- _load_template(): Private method to read and parse the template file, extracting fields and template content.\n- get_fields(): Returns the list of field names extracted from the template.\n- get_template(): Returns the template content as a single string.\n- render_description(values: dict): Processes the template content by replacing placeholders with provided values\nand returns the rendered description.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "60af87e0f167cac440e4f681d05adbcd5993b154",
            "docstring": "\"\"\"\nInitialize a new instance of the class with the provided template directory and issue type.\n\nArguments:\n- template_dir (Path): The directory where the template files are stored.\n- issue_type (str): The type of the issue for which the template is being loaded.\n\nExceptions:\n- FileNotFoundError: Raised if the template file corresponding to the provided issue type is not found in the template directory.\n\nSide Effects:\n- Initializes instance variables 'template_path', 'fields', and 'template_lines'.\n- Calls the '_load_template' method to load the template file content.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "62e8d251dfebebd4c538fa8f0c8dfaad8c2ba076",
            "docstring": "\"\"\"\nLoad a template from a file specified by 'template_path' and extract fields and template lines.\n\nArguments:\n- self: The object instance.\n- template_path (str): The path to the template file to be loaded.\n\nSide Effects:\n- Modifies the 'fields' list attribute by appending extracted field names.\n- Modifies the 'template_lines' list attribute by appending lines of the template.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "cfca00ed03000ce2d6b61380ecbb81c54ddd0bf0",
            "docstring": "\"\"\"\nRetrieve and return the fields stored in the object.\n\nArguments:\n- self: The object instance.\n\nReturn:\n- The fields stored in the object.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "64fa9443f568af0dd30c2c735526acbeb1e88001",
            "docstring": "\"\"\"\nReturn the template content as a single string by joining the lines.\n\nArguments:\n- self: The object instance.\n\nReturn:\n- str: A single string representing the template content.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "b83d38df4a0dacd16b115f90a79061e8ba3f6b31",
            "docstring": "\"\"\"\nRender the description using a template and provided values.\n\nArguments:\n- self: the object instance\n- values (dict): A dictionary containing placeholder-value pairs to substitute in the template.\n\nReturn:\n- str: The rendered description after replacing all placeholders with corresponding values.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "b89bacfeed18e6d0e8b7015089dfd6d90f2278a4",
            "docstring": "\"\"\"\nThis module provides the TemplateLoader class for loading and rendering templates used in generating issue descriptions.\n\nThe TemplateLoader class allows for the initialization with a specific template directory and issue type, and includes\nmethods to:\n- Load a template file and extract field names and content.\n- Retrieve the list of fields defined in the template.\n- Get the complete template content as a string.\n- Render a description by replacing placeholders in the template with values from a provided dictionary.\n\nUsage of this module is intended for applications that require dynamic generation of text based on templates, such as\nissue tracking systems or reporting tools.\n\"\"\"",
            "last_accessed": 1745566789
        }
    ],
    "jira_creator/tests/test_main_guard_cli.py": [
        {
            "sha1": "c4d8e16ff1bb3c22f3ed11b1b9e639c6794ea011",
            "docstring": "\"\"\"\nThis script defines a function test_main_guard() that imports the '__main__' module and assigns it to the variable\n'main_script'. It then asserts that the 'main_script' variable has the attribute \"__name__\".\n\"\"\"\n\n\"\"\"\nThis function imports the '__main__' module and assigns it to the variable 'main_script'.\n\"\"\"",
            "last_accessed": 1745517780
        },
        {
            "sha1": "7067f278170d28a75223c886bac3f262ffc3cf4e",
            "docstring": "\"\"\"\nThis function imports the '__main__' module and assigns it to the variable 'main_script'.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "4f8b9de6156356e19b0e79449f6e53bf290b6944",
            "docstring": "\"\"\"\nThis script defines a function test_main_guard() that imports the '__main__' module and assigns it to the variable\n'main_script'. It then asserts that the 'main_script' variable has the attribute \"__name__\".\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/test_conftest.py": [
        {
            "sha1": "a4131aad8f4ce8903144e43163a8250fcdf024c0",
            "docstring": "\"\"\"\nThis module contains unit tests for validating the functionality of issue loading and caching in a command-line\ninterface. It includes tests for the following functions from the 'cli_validate_issue' module:\n- `load_cache`\n- `save_cache`\n- `load_and_cache_issue`\n\nEach test function uses mock objects to simulate the behavior of the respective functions being tested. The tests are as follows:\n- `test_mock_load_cache`: Ensures that the 'load_cache' function returns a dictionary.\n- `test_mock_save_cache`: Validates that the 'save_cache' function correctly modifies the cache with a given key-value pair.\n- `test_mock_load_and_cache_issue`: Confirms that the 'load_and_cache_issue' function returns the expected result for a specified input.\n\nThis module is intended for use in a testing environment to ensure the correctness of caching mechanisms in the CLI application.\n\"\"\"",
            "last_accessed": 1745517806
        },
        {
            "sha1": "7ed44b96ff12a44b6f66b84c75b9c607c58328c1",
            "docstring": "\"\"\"\nThis function tests the 'load_cache' function by calling it and checking if the return value is a dictionary.\n:param mock_load_cache: A mock object for the 'load_cache' function.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "03fb9882f1313dda9748005a7f35d5313ea6f0e4",
            "docstring": "\"\"\"\nSave cache data for a specific key and value pair.\n\nArguments:\n- mock_save_cache: A MagicMock object used to mock the save_cache function.\n\nSide Effects:\n- Modifies the cache by saving the provided key-value pair.\n\nNote: The actual assertion check on the mock_save_cache function is commented out in the code.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "f37877039461b6d9228170adfaea62e5cb5ace04",
            "docstring": "\"\"\"\nThis function tests the 'load_and_cache_issue' function by calling it with a specific input and checking the result\nagainst an expected value.\nArguments:\n- mock_load_and_cache_issue: A mock function used to simulate the behavior of 'load_and_cache_issue' function.\n\nExceptions:\n- AssertionError: Raised if the result of 'load_and_cache_issue' function does not match the expected value.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "cdd89d9e1b98f4fef365c6974b2ddb9393ee75b8",
            "docstring": "\"\"\"\nThis function tests the 'load_cache' function by calling it and checking if the return value is a dictionary.\n:param mock_load_cache: A mock object for the 'load_cache' function.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "de1ecb4908fe9631a471294b15a91e6491546b65",
            "docstring": "\"\"\"\nSave cache data for a specific key and value pair.\n\nArguments:\n- mock_save_cache: A MagicMock object used to mock the save_cache function.\n\nSide Effects:\n- Modifies the cache by saving the provided key-value pair.\n\nNote: The actual assertion check on the mock_save_cache function is commented out in the code.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "9e31a48dabb61edc70fe889ca227cb57254ea4b9",
            "docstring": "\"\"\"\nThis function tests the 'load_and_cache_issue' function by calling it with a specific input and checking the result\nagainst an expected value.\nArguments:\n- mock_load_and_cache_issue: A mock function used to simulate the behavior of 'load_and_cache_issue' function.\n\nExceptions:\n- AssertionError: Raised if the result of 'load_and_cache_issue' function does not match the expected value.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "b8395e029f9b1ef4ed3072f5a3ce9021e3ed4044",
            "docstring": "\"\"\"\nThis module contains unit tests for validating the functionality of issue loading and caching in a command-line\ninterface. It includes tests for the following functions from the 'cli_validate_issue' module:\n- `load_cache`\n- `save_cache`\n- `load_and_cache_issue`\n\nEach test function uses mock objects to simulate the behavior of the respective functions being tested. The tests are\nas follows:\n- `test_mock_load_cache`: Ensures that the 'load_cache' function returns a dictionary.\n- `test_mock_save_cache`: Validates that the 'save_cache' function correctly modifies the cache with a given key-value\npair.\n- `test_mock_load_and_cache_issue`: Confirms that the 'load_and_cache_issue' function returns the expected result for a\nspecified input.\n\nThis module is intended for use in a testing environment to ensure the correctness of caching mechanisms in the CLI\napplication.\n\"\"\"",
            "last_accessed": 1745566295
        },
        {
            "sha1": "955532912d7bccb83ae362fa8a7fead4a04d99ed",
            "docstring": "\"\"\"\nThis module contains unit tests for validating the functionality of issue loading and caching in a command-line \ninterface. It includes tests for the following functions from the 'cli_validate_issue' module:\n- `load_cache`\n- `save_cache`\n- `load_and_cache_issue`\n\nEach test function uses mock objects to simulate the behavior of the respective functions being tested. The tests are \nas follows:\n- `test_mock_load_cache`: Ensures that the 'load_cache' function returns a dictionary.\n- `test_mock_save_cache`: Validates that the 'save_cache' function correctly modifies the cache with a given key-value \npair.\n- `test_mock_load_and_cache_issue`: Confirms that the 'load_and_cache_issue' function returns the expected result for a \nspecified input.\n\nThis module is intended for use in a testing environment to ensure the correctness of caching mechanisms in the CLI \napplication.\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/rest/test_client.py": [
        {
            "sha1": "b875bafa84cf874356b1ad19e645114ef82f5fe4",
            "docstring": "\"\"\"\nUnit tests for the JiraClient class in the rest.client module.\n\nThis module contains unit tests that validate the functionality of the JiraClient's _request method,\ncovering various scenarios including:\n\n- Successful requests with valid JSON responses.\n- Handling of empty responses and different types of HTTP errors (404, 401, 500).\n- Exception handling for network failures and invalid JSON responses.\n- Retry logic for transient server errors.\n- Generation of curl commands for different request configurations.\n\nThe tests utilize the pytest framework along with mocking to simulate HTTP requests and responses,\nensuring that no actual network calls are made during testing.\n\"\"\"",
            "last_accessed": 1745517828
        },
        {
            "sha1": "f6038d51857106ffb09e2a1f799bc1ec81d36bea",
            "docstring": "\"\"\"\nThis function is a test function that simulates a successful request to a Jira client with valid JSON response. It takes two mock objects as parameters: mock_request and mock_sleep. It initializes a JiraClient object for testing purposes.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "31452db4f56cdc8b545f511b696ff1283ce6ccbd",
            "docstring": "\"\"\"\nThis function initializes a JiraClient object for making requests to a Jira server. It relies on external\ndependencies `mock_request` and `mock_sleep` for testing purposes.\n\nNo arguments are directly passed to the function. It simulates an empty response (no content in the body) from the\nJira server using mock objects.\n\nThe function makes a request to the Jira server with the specified method and endpoint\n(\"/rest/api/2/issue/ISSUE-EMPTY\"). It expects an empty dictionary as a result.\n\nThe function does not have a return value but asserts that the result is an empty dictionary. It also verifies that\nthe request function was called once and the sleep function was not called.\n\nNo exceptions are raised by this function.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "b69db28c30808159dc8f5943cbc50acc42db0a5f",
            "docstring": "\"\"\"\nThis function initializes a JiraClient object for making requests to a Jira server.\n\nArguments:\n- mock_request: A mock object for simulating HTTP requests.\n- mock_sleep: A mock object for simulating sleep time.\n\nSide Effects:\n- Initializes a JiraClient object for making requests to a Jira server.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "a360229c2d397b0347340ea4dd7f72e4b6fe3382",
            "docstring": "\"\"\"\nThis function is a test function that simulates a request for empty response text from a Jira client. It takes two\nmock objects as arguments: mock_request and mock_sleep. The purpose of this function is to test the behavior of the\nJiraClient when it receives an empty response text. It initializes a JiraClient object but does not return any\nvalue.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "efd3a7b98245db41c5fe67125b1718c3066f4577",
            "docstring": "\"\"\"\nThis function is a test function that simulates a request to a Jira API endpoint with invalid JSON response. It takes two mock objects as parameters: mock_request and mock_sleep. The purpose of this function is to test how the JiraClient class handles invalid JSON responses. It initializes a JiraClient object for testing purposes.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "319c2544db1b0af0fe200ae51cc719e8f52ce9bf",
            "docstring": "\"\"\"\nSimulates a test scenario where a 404 error response is received during a request.\n\nArguments:\n- mock_request: An object used to mock HTTP requests for testing purposes.\n- mock_sleep: An object used to mock sleep time for testing purposes.\n\nSide Effects:\n- Initializes a JiraClient object for further testing.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "b568b2f3def7b9a3e4b5bba309664d4c8d1ef604",
            "docstring": "\"\"\"\nThis function is used to test the behavior of a JiraClient when it receives a 401 error during a request.\n\nArguments:\n- mock_request: A mock object used to simulate the request behavior.\n- mock_sleep: A mock object used to simulate a sleep operation.\n\nSide Effects:\n- Initializes a JiraClient object.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "f06428890ff1a6a7105600c96063e7ed588b5d0a",
            "docstring": "\"\"\"\nThis function tests the retry logic of a JiraClient object by simulating a 500 error response during an HTTP request.\n\nArguments:\n- mock_request: A mock object used for simulating HTTP requests.\n- mock_sleep: A mock object used for simulating time delays.\n\nSide Effects:\n- Initializes a JiraClient object for testing purposes.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "c4f362d2c05489925a8f4f431913748a6cb25643",
            "docstring": "\"\"\"\nThis function initializes a JiraClient object for handling requests and retries.\n\nArguments:\n- mock_request: A mock object for simulating HTTP requests.\n- mock_sleep: A mock object for simulating sleep time.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "5baf8cc8ef86d04ba77b6054d5a31c382e6e9f85",
            "docstring": "\"\"\"\nGenerate a cURL command with headers only.\n\nArguments:\n- mock_print: A mock object used for printing messages.\n\nSide Effects:\n- Initializes a JiraClient object for interacting with Jira API.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "85fcdce0248103bbe5627079544543fc63b44f51",
            "docstring": "\"\"\"\nGenerate a cURL command with JSON data for testing purposes.\n\nArguments:\n- mock_print: A mock object used for printing output.\n\nThis function initializes a JiraClient object and generates a cURL command with the specified method, URL, headers, JSON data, and parameters for further testing.\n\"\"\"",
            "last_accessed": 1745517847
        },
        {
            "sha1": "4fcfb1b84e7ef7a52ed4ffb5e7517da9203adf11",
            "docstring": "\"\"\"\nThis function initializes a JiraClient object.\n\nArguments:\n- mock_print: A mock object for printing (not used in the function).\n\nSide Effects:\n- Initializes a JiraClient object.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "c0ed827457663de4c9e63495320a5d01f9a01614",
            "docstring": "\"\"\"\nGenerate a cURL command for all requests made by a JiraClient.\n\nArguments:\n- mock_print: A mock object for printing, used for testing purposes.\n\nSide Effects:\n- Initializes a JiraClient object for interacting with Jira.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "bbaadd1feb80b6c7ea7a58dac2bd22da9b049482",
            "docstring": "\"\"\"\nThis function initializes a JiraClient object for making requests to a Jira server. It simulates failed attempts\n(500 errors) for all retry attempts to test the retry mechanism. The function does not take any arguments.\n\nSide Effects:\n- The function simulates retries by setting up mock responses with status code 500 and \"Server error\" text.\n- It uses mock objects to simulate requests and sleep.\n\nExceptions:\n- The function raises a JiraClientRequestError when the JiraClient's _request method is called with a specific\nendpoint.\n\nThe function ensures that the final result is an empty dictionary, verifies that the request was retried 3 times,\nand checks that the sleep function was called twice with a 2-second delay before retrying.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "2b2c109bd90de48872818092cb895dc65a72b746",
            "docstring": "\"\"\"\nUnit tests for the JiraClient class in the rest.client module.\n\nThis module contains unit tests that validate the functionality of the JiraClient's request method,\ncovering various scenarios including:\n\n- Successful requests with valid JSON responses.\n- Handling of empty responses and different types of HTTP errors (404, 401, 500).\n- Exception handling for network failures and invalid JSON responses.\n- Retry logic for transient server errors.\n- Generation of curl commands for different request configurations.\n\nThe tests utilize the pytest framework along with mocking to simulate HTTP requests and responses,\nensuring that no actual network calls are made during testing.\n\"\"\"",
            "last_accessed": 1745518666
        },
        {
            "sha1": "a97a26179dbbafdd6ba7c18a8ab14975f62de545",
            "docstring": "\"\"\"\nGenerate a cURL command with JSON data for testing purposes.\n\nArguments:\n- mock_print: A mock object used for printing output.\n\nThis function initializes a JiraClient object and generates a cURL command with the specified method, URL, headers,\nJSON data, and parameters for further testing.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "aa9d9b0d07586809dbdde99a750e412289121fa0",
            "docstring": "\"\"\"\nUnit tests for the JiraClient class in the rest.client module.\n\nThis module contains unit tests that validate the functionality of the JiraClient's request method,\ncovering various scenarios including:\n\n- Successful requests with valid JSON responses.\n- Handling of empty responses and different types of HTTP errors (404, 401, 500).\n- Exception handling for network failures and invalid JSON responses.\n- Retry logic for transient server errors.\n- Generation of curl commands for different request configurations.\n\nThe tests utilize the pytest framework along with mocking to simulate HTTP requests and responses,\nensuring that no actual network calls are made during testing.\n\"\"\"",
            "last_accessed": 1745566295
        },
        {
            "sha1": "a986192d51cd3e1a78a12f888666f96af21338de",
            "docstring": "\"\"\"\nUnit tests for the JiraClient class in the rest.client module.\n\nThis module contains unit tests that validate the functionality of the JiraClient's request method,\ncovering various scenarios including:\n\n- Successful requests with valid JSON responses.\n- Handling of empty responses and different types of HTTP errors (404, 401, 500).\n- Exception handling for network failures and invalid JSON responses.\n- Retry logic for transient server errors.\n- Generation of curl commands for different request configurations.\n\nThe tests utilize the pytest framework along with mocking to simulate HTTP requests and responses,\nensuring that no actual network calls are made during testing.\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/rest/test_get_field_names_client.py": [
        {
            "sha1": "161ed0fdd948e3e8bc687c0ffc6ee7bedaed8939",
            "docstring": "\"\"\"\nThis module contains unit tests for the methods `cache_fields` and `get_field_name` of a client class.\n\nThe tests verify the behavior of the `cache_fields` method under different conditions:\n1. When the cache file exists and is recent, ensuring the correct fields are returned.\n2. When the cache file does not exist or is outdated, checking that the method retrieves fields from an API and creates\nthe cache file correctly.\n\nAdditionally, the `get_field_name` method is tested to confirm it returns the correct field name for a given field ID,\nand `None` for non-existing field IDs.\n\nEach test case uses mocking to simulate file operations and API responses, allowing for isolated testing of the client\nmethods without external dependencies.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "810a8bbe050d69f41ac0d9492fb6cb086d10f51a",
            "docstring": "\"\"\"\nCheck if the cache file for fields exists and is recent.\n\nArguments:\n- client (Client): An object representing the client application.\n\nSide Effects:\n- Modifies the client's fields_cache_path attribute to \"/tmp/to/cache.json\".\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "1ec5216f13423616e872bec93d232a239f487e3c",
            "docstring": "\"\"\"\nSet the cache file path for fields to \"/tmp/to/cache.json\".\n\nArguments:\n- client: An instance of the client to set the fields cache path for.\n\nSide Effects:\nModifies the fields_cache_path attribute of the client object.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "fe88369db47a8fa6cfaa00b3201d108e51a2cd01",
            "docstring": "\"\"\"\nSet the cache path for field names in the client.\n\nArguments:\n- client (object): An instance of the client class.\n\nSide Effects:\n- Modifies the client object by setting the fields cache path to '/tmp/to/cache.json'.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "def948cbd3c49e7d9d59fe473da247a477af64be",
            "docstring": "\"\"\"\nThis module contains unit tests for the methods `cache_fields` and `get_field_name` of a client class.\n\nThe tests verify the behavior of the `cache_fields` method under different conditions:\n1. When the cache file exists and is recent, ensuring the correct fields are returned.\n2. When the cache file does not exist or is outdated, checking that the method retrieves fields from an API and creates\nthe cache file correctly.\n\nAdditionally, the `get_field_name` method is tested to confirm it returns the correct field name for a given field ID,\nand `None` for non-existing field IDs.\n\nEach test case uses mocking to simulate file operations and API responses, allowing for isolated testing of the client\nmethods without external dependencies.\n\"\"\"",
            "last_accessed": 1745566302
        }
    ],
    "jira_creator/tests/rest/ops/test_clone_issue.py": [
        {
            "sha1": "35f2daab6c198f0054d3002812693a489b4f23c0",
            "docstring": "\"\"\"\nClones an issue using the provided client.\n\nArguments:\n- client: An object representing the client used to interact with the issue system.\n\nSide Effects:\n- Modifies the client's `_request` attribute by setting it to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "60a2d94ab434368032e1c17e0eb38e72c5bc7679",
            "docstring": "\"\"\"\nClones an issue using the provided client.\n\nArguments:\n- client: An object representing the client used to interact with the issue system.\n\nSide Effects:\n- Modifies the client's `_request` attribute by setting it to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "1f9040d3f9e02cb9439f13f0dbe64553f35b0787",
            "docstring": "\"\"\"\nClones an issue using the provided client.\n\nArguments:\n- client: An object representing the client used to interact with the issue system.\n\nSide Effects:\n- Modifies the client's `_request` attribute by setting it to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745566302
        }
    ],
    "jira_creator/tests/rest/ops/test_status_transition_not_found_rest.py": [
        {
            "sha1": "518e698f7503debf388586bcc0701b42f69b99bf",
            "docstring": "\"\"\"\nThis file contains a unit test function to test the behavior of the set_status method in the client object.\nThe test checks for the scenario where a valid status transition is missing in the transitions list.\nThe _request method of the client object is mocked using MagicMock to simulate the absence of valid transitions.\nAn exception, SetStatusError, is expected to be raised when trying to set a specific status that is not found in the\ntransitions list.\n\nThe test_status_transition_missing function mocks the _request method of the client object using MagicMock.\nIt takes the client object as an argument and modifies the _request method to return an empty list of transitions.\nThe function tests the behavior of the client object when trying to set a status that does not have a valid transition.\nIt expects a SetStatusError to be raised when a valid transition to the specified status is not found.\n\"\"\"",
            "last_accessed": 1745517875
        },
        {
            "sha1": "df9d0fd4b258c303671a0e61ec8b5069e98fd0a2",
            "docstring": "\"\"\"\nMock the _request method of the client object using MagicMock.\n\nArguments:\n- client: An object representing the client for which the _request method is being mocked.\n\nExceptions:\n- SetStatusError: Raised when a valid transition to the specified status is not found.\n\nSide Effects:\n- Modifies the _request method of the client object to return an empty list of transitions.\n\nThe function tests the behavior of the client object when trying to set a status that does not have a valid\ntransition.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "d688962ccc1eeff50a4e336f432a2234abd1ae8f",
            "docstring": "\"\"\"\nThis file contains a unit test function to test the behavior of the set_status method in the client object.\nThe test checks for the scenario where a valid status transition is missing in the transitions list.\nThe _request method of the client object is mocked using MagicMock to simulate the absence of valid transitions.\nAn exception, SetStatusError, is expected to be raised when trying to set a specific status that is not found in the\ntransitions list.\n\nThe test_status_transition_missing function mocks the _request method of the client object using MagicMock.\nIt takes the client object as an argument and modifies the _request method to return an empty list of transitions.\nThe function tests the behavior of the client object when trying to set a status that does not have a valid transition.\nIt expects a SetStatusError to be raised when a valid transition to the specified status is not found.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "663a4b8595568f6d93908aa3cf0f01b71ef22e33",
            "docstring": "\"\"\"\nThis file contains a unit test function to test the behavior of the set_status method in the client object.\nThe test checks for the scenario where a valid status transition is missing in the transitions list.\nThe _request method of the client object is mocked using MagicMock to simulate the absence of valid transitions.\nAn exception, SetStatusError, is expected to be raised when trying to set a specific status that is not found in the\ntransitions list.\n\nThe test_status_transition_missing function mocks the _request method of the client object using MagicMock.\nIt takes the client object as an argument and modifies the _request method to return an empty list of transitions.\nThe function tests the behavior of the client object when trying to set a status that does not have a valid transition.\nIt expects a SetStatusError to be raised when a valid transition to the specified status is not found.\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/rest/ops/test_search_rest.py": [
        {
            "sha1": "ebc06a51f7561e3502912012ea763576747d55d9",
            "docstring": "\"\"\"\nUnit tests for the JiraClient's search_issues method.\n\nThis module contains test cases that validate the behavior of the search_issues method in the JiraClient class.\nIt uses the unittest.mock library to mock the _request method, allowing for controlled testing of the method's\nfunctionality without making actual API calls.\n\nThe tests cover scenarios including:\n- Successful issue retrieval with active sprints.\n- Issue retrieval when no sprints are associated with the issues.\n\nEach test verifies that the _request method is called with the correct parameters and checks the output for expected\nvalues.\n\"\"\"",
            "last_accessed": 1745517881
        },
        {
            "sha1": "a369f431c1c150c08cd7c99937d0607296e73df7",
            "docstring": "\"\"\"\nMock the _request method of JiraClient to simulate fetching issues from Jira for testing purposes.\n\nArguments:\n- client: A JiraClient object used to interact with the Jira API.\n\nSide Effects:\n- Modifies the behavior of the _request method of the provided JiraClient object by replacing it with a MagicMock object.\n\nThis function is intended for testing purposes to simulate the response of fetching issues from Jira.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "0adecd2088851f0dc43adac2083302d2eaadde8e",
            "docstring": "\"\"\"\nUnit tests for the JiraClient's search_issues method.\n\nThis module contains test cases designed to validate the functionality of the search_issues method in the JiraClient class. It utilizes the unittest.mock library to mock the _request method, enabling controlled testing without actual API calls.\n\nThe tests encompass various scenarios, including:\n- Successful retrieval of issues associated with active sprints.\n- Retrieval of issues when no sprints are associated.\n\nEach test case verifies that the _request method is invoked with the correct parameters and checks that the output matches expected values. The test functions are designed to simulate different responses from the Jira API to ensure robust testing of the search_issues method's behavior.\n\"\"\"",
            "last_accessed": 1745519298
        },
        {
            "sha1": "1380f2ff5ff77bcdf615dbffb31fa346d485cf43",
            "docstring": "\"\"\"\nSimulate searching for Jira issues without any sprints.\n\nArguments:\n- client: An instance of JiraClient used to interact with the Jira API.\n\nSide Effects:\n- Modifies the _request method of the JiraClient by mocking it with a MagicMock to simulate no sprints in the response.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "6892c5d4148f84544344ee31bda8ac3c11b7c934",
            "docstring": "\"\"\"\nUnit tests for the JiraClient's search_issues method.\n\nThis module contains test cases designed to validate the functionality of the search_issues method in the JiraClient\nclass. It utilizes the unittest.mock library to mock the _request method, enabling controlled testing without actual\nAPI calls.\n\nThe tests encompass various scenarios, including:\n- Successful retrieval of issues associated with active sprints.\n- Retrieval of issues when no sprints are associated.\n\nEach test case verifies that the _request method is invoked with the correct parameters and checks that the output\nmatches expected values. The test functions are designed to simulate different responses from the Jira API to ensure\nrobust testing of the search_issues method's behavior.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "e7e3121cd32a6965034dd3ec2083bb4ab97a24ae",
            "docstring": "\"\"\"\nUnit tests for the JiraClient's search_issues method.\n\nThis module contains test cases designed to validate the functionality of the search_issues method in the JiraClient\nclass. It utilizes the unittest.mock library to mock the _request method, enabling controlled testing without actual\nAPI calls.\n\nThe tests encompass various scenarios, including:\n- Successful retrieval of issues associated with active sprints.\n- Retrieval of issues when no sprints are associated.\n\nEach test case verifies that the _request method is invoked with the correct parameters and checks that the output\nmatches expected values. The test functions are designed to simulate different responses from the Jira API to ensure\nrobust testing of the search_issues method's behavior.\n\"\"\"",
            "last_accessed": 1745608413
        },
        {
            "sha1": "a4644b4d538c96753912da9e7c8980eb5e189c35",
            "docstring": "\"\"\"\nMock the _request method of JiraClient to simulate fetching issues from Jira, with multiple calls to different endpoints.\n\nArguments:\n- client: A JiraClient object used to interact with the Jira API.\n\nSide Effects:\n- Modifies the behavior of the _request method of the provided JiraClient object by replacing it with a MagicMock object.\n\nThis function tests handling of multiple requests within the search_issues method.\n\"\"\"",
            "last_accessed": 1745608415
        },
        {
            "sha1": "2ddc031e47b63868667b53c39587c2445d45c829",
            "docstring": "\"\"\"\nSimulate searching for Jira issues without any sprints and simulate multiple calls to different endpoints.\n\nArguments:\n- client: An instance of JiraClient used to interact with the Jira API.\n\nSide Effects:\n- Modifies the _request method of the JiraClient by mocking it with a MagicMock to simulate no sprints in the response.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "a1302ded5d03af5d8da23f51b7b8a6bf0cee05a6",
            "docstring": "\"\"\"\nUnit tests for the JiraClient's search_issues method.\n\nThis module contains test cases designed to validate the functionality of the search_issues method in the JiraClient\nclass. It utilizes the unittest.mock library to mock the _request method, enabling controlled testing without actual\nAPI calls.\n\nThe tests encompass various scenarios, including:\n- Successful retrieval of issues associated with active sprints.\n- Retrieval of issues when no sprints are associated.\n\nEach test case verifies that the _request method is invoked with the correct parameters and checks that the output\nmatches expected values. The test functions are designed to simulate different responses from the Jira API to ensure\nrobust testing of the search_issues method's behavior.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "8b5fa16ee1f8c85f719014c76d58f9388141a788",
            "docstring": "\"\"\"\nMock the _request method of JiraClient to simulate fetching issues from Jira, with multiple calls to different\nendpoints.\n\nArguments:\n- client: A JiraClient object used to interact with the Jira API.\n\nSide Effects:\n- Modifies the behavior of the _request method of the provided JiraClient object by replacing it with a MagicMock\nobject.\n\nThis function tests handling of multiple requests within the search_issues method.\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/rest/ops/test_remove_flag.py": [
        {
            "sha1": "71ebe410430277c9f0d641f92d4d5f3b6b9ad3bc",
            "docstring": "\"\"\"\nSet the '_request' attribute of the client to a MagicMock object returning an empty dictionary.\n\nThis script contains a function 'test_remove_flag' that sets the '_request' attribute of the client object to a\nMagicMock object returning an empty dictionary. It then calls the 'remove_flag' method on the client object and asserts\nthat the 'request' method was called with specific arguments.\n\nArguments:\n- client: An object representing a client used to make requests.\n\nSide Effects:\n- Modifies the '_request' attribute of the client object.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "5041a655dafaa2f072709236d99155ebe74801d1",
            "docstring": "\"\"\"\nSet the '_request' attribute of the client to a MagicMock object returning an empty dictionary.\n\nArguments:\n- client: An object representing a client used to make requests.\n\nSide Effects:\n- Modifies the '_request' attribute of the client object.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "e1e2e0449110fa5c9911baaf7bf36c31b4fe2569",
            "docstring": "\"\"\"\nSet the '_request' attribute of the client to a MagicMock object returning an empty dictionary.\n\nThis script contains a function 'test_remove_flag' that sets the '_request' attribute of the client object to a\nMagicMock object returning an empty dictionary. It then calls the 'remove_flag' method on the client object and asserts\nthat the 'request' method was called with specific arguments.\n\nArguments:\n- client: An object representing a client used to make requests.\n\nSide Effects:\n- Modifies the '_request' attribute of the client object.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "3054a614dcb5d475ed531d99174f2609cc74a643",
            "docstring": "\"\"\"\nSet the '_request' attribute of the client to a MagicMock object returning an empty dictionary.\n\nArguments:\n- client: An object representing a client used to make requests.\n\nSide Effects:\n- Modifies the '_request' attribute of the client object.\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/rest/ops/test_set_acceptance_criteria_rest.py": [
        {
            "sha1": "73346f293affc2cf402cbfc10db4ce351e8b079e",
            "docstring": "\"\"\"\nThis script defines a test function 'test_set_acceptance_criteria' that tests the functionality of setting acceptance\ncriteria for a JIRA issue using a provided client. The function simulates GET and PUT responses, calls the\n'set_acceptance_criteria' method of the client, captures the output, and asserts that the output contains an expected\nsuccess message. The test function takes 'capsys' and 'client' as parameters and utilizes a mocked client request.\n\nThe 'test_set_acceptance_criteria' function sets acceptance criteria for a specified test issue identified by\n'issue_key'.\nIt takes 'capsys' as a pytest fixture for capturing stdout and stderr output, and 'client' as an instance of the client\nused to interact with the issue tracking system. The function has the side effect of setting the acceptance criteria for\nthe test issue.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "23d0fd999f96a7858e7a377d28c49571707325a1",
            "docstring": "\"\"\"\nSet acceptance criteria for a specified test issue.\n\nArguments:\n- capsys: A pytest fixture for capturing stdout and stderr output.\n- client: An instance of the client used to interact with the issue tracking system.\n\nSide Effects:\n- Sets the acceptance criteria for a test issue identified by 'issue_key'.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "b2db2fd8df7e41cea43c2cee490b660ce4a687ee",
            "docstring": "\"\"\"\nThis script defines a test function 'test_set_acceptance_criteria' that tests the functionality of setting acceptance\ncriteria for a JIRA issue using a provided client. The function simulates GET and PUT responses, calls the\n'set_acceptance_criteria' method of the client, captures the output, and asserts that the output contains an expected\nsuccess message. The test function takes 'capsys' and 'client' as parameters and utilizes a mocked client request.\n\nThe 'test_set_acceptance_criteria' function sets acceptance criteria for a specified test issue identified by\n'issue_key'.\nIt takes 'capsys' as a pytest fixture for capturing stdout and stderr output, and 'client' as an instance of the client\nused to interact with the issue tracking system. The function has the side effect of setting the acceptance criteria for\nthe test issue.\n\"\"\"",
            "last_accessed": 1745566302
        }
    ],
    "jira_creator/tests/rest/ops/test_priority_rest.py": [
        {
            "sha1": "57aad458e3b35a330ed5e6ef0736f3ff4c79b772",
            "docstring": "\"\"\"\nSet priority for a specific client.\n\nArguments:\n- client: An object representing a client for which the priority needs to be set.\n\nSide Effects:\n- Modifies the priority of the client by calling the 'set_priority' method.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "e350009b8a92c3758a86c89eb99f136a200f5a76",
            "docstring": "\"\"\"\nSet priority for a specific client.\n\nArguments:\n- client: An object representing a client for which the priority needs to be set.\n\nSide Effects:\n- Modifies the priority of the client by calling the 'set_priority' method.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "8d3b1d1b6718a176fdcf3f3e82fcdbce613ff033",
            "docstring": "\"\"\"\nSet priority for a specific client.\n\nArguments:\n- client: An object representing a client for which the priority needs to be set.\n\nSide Effects:\n- Modifies the priority of the client by calling the 'set_priority' method.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "19576b14f09346985ef44eec7474386cc1cd8544",
            "docstring": "\"\"\"\nSet priority for a specific client.\n\nArguments:\n- client: An object representing a client for which the priority needs to be set.\n\nSide Effects:\n- Modifies the priority of the client by calling the 'set_priority' method.\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/rest/ops/test_set_summary.py": [
        {
            "sha1": "1792ffcb91830f5d1f5b9461fec4027f6abe0a13",
            "docstring": "\"\"\"\nThis script contains a test function to set the summary attribute of a client object to an empty dictionary using a MagicMock object.\n\nFunction:\n- test_set_summary(client): Sets the summary attribute of a client object to an empty dictionary using a MagicMock object.\n\nArguments:\n- client: A client object for which the summary attribute needs to be set.\n\nSide Effects:\n- Modifies the client object by setting its _request attribute to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "b8ff99263a17de67d05adae099bbbc53b4f97d44",
            "docstring": "\"\"\"\nSet the summary attribute of a client object to an empty dictionary using a MagicMock object.\n\nArguments:\n- client: A client object for which the summary attribute needs to be set.\n\nSide Effects:\n- Modifies the client object by setting its _request attribute to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "2bb163ea5b4b193c466c967e4f89a26b1795ec14",
            "docstring": "\"\"\"\nThis script contains a test function to set the summary attribute of a client object to an empty dictionary using a MagicMock object.\n\nFunction:\n- test_set_summary(client): Sets the summary attribute of a client object to an empty dictionary using a MagicMock object.\n\nArguments:\n- client: A client object for which the summary attribute needs to be set.\n\nSide Effects:\n- Modifies the client object by setting its _request attribute to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "5912958cea154e78514f6c1c36453ead2262cc80",
            "docstring": "\"\"\"\nSet the summary attribute of a client object to an empty dictionary using a MagicMock object.\n\nArguments:\n- client: A client object for which the summary attribute needs to be set.\n\nSide Effects:\n- Modifies the client object by setting its _request attribute to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/rest/ops/test_get_update_description_rest.py": [
        {
            "sha1": "df31b1cb51bf77f9ed981ee18ec9d08908075253",
            "docstring": "\"\"\"\nThis script contains unit tests for the 'get_description' and 'update_description' methods of a client class.\nIt uses the unittest.mock library to simulate responses from the client's _request method.\nThe test_get_update_description function tests the functionality of retrieving and updating descriptions.\nIt asserts that the correct description is returned by get_description and that the description field is updated by\nupdate_description.\n\ntest_get_update_description(client):\nRetrieves the description field from a client using a mocked request.\n\nArguments:\n- client: An object representing a client for which the description field needs to be retrieved.\n\nThis function mocks the _request method of the client object to simulate retrieving the description field.\nNo return value.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "f957254770b612ff3eb53c54b13b21131d76d89e",
            "docstring": "\"\"\"\nRetrieves the description field from a client using a mocked request.\n\nArguments:\n- client: An object representing a client for which the description field needs to be retrieved.\n\nThis function mocks the _request method of the client object to simulate retrieving the description field.\nNo return value.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "2e04bc95ecfe5fc3555c9927b8577c16dd2bc8b9",
            "docstring": "\"\"\"\nThis script contains unit tests for the 'get_description' and 'update_description' methods of a client class.\nIt uses the unittest.mock library to simulate responses from the client's _request method.\nThe test_get_update_description function tests the functionality of retrieving and updating descriptions.\nIt asserts that the correct description is returned by get_description and that the description field is updated by\nupdate_description.\n\ntest_get_update_description(client):\nRetrieves the description field from a client using a mocked request.\n\nArguments:\n- client: An object representing a client for which the description field needs to be retrieved.\n\nThis function mocks the _request method of the client object to simulate retrieving the description field.\nNo return value.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "c784cff9d13da1e2816b7a862c1e1665fea62e2c",
            "docstring": "\"\"\"\nRetrieves the description field from a client using a mocked request.\n\nArguments:\n- client: An object representing a client for which the description field needs to be retrieved.\n\nThis function mocks the _request method of the client object to simulate retrieving the description field.\nNo return value.\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/rest/ops/test_core_rest.py": [
        {
            "sha1": "86d2015d04ef344613d0dbd6a05d6ebca91849da",
            "docstring": "\"\"\"\nThis script defines a function test_build_payload_with_patch_dict that tests the build_payload method of a client\nobject. The function sets up summary, description, and issue_type variables, builds a payload using the client's\nbuild_payload method, and then asserts various fields of the payload dictionary. The commented-out\ntest_missing_env_raises function is not currently in use.\n\ntest_build_payload_with_patch_dict(client):\nBuilds a payload dictionary for creating an issue with a patch request.\n\nArguments:\n- client (object): An object representing the client connection.\n\nReturn:\nThis function does not return anything.\n\nSide Effects:\nModifies the payload dictionary with the provided summary, description, and issue type.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "1fcaf3d99056897b471074a7ebea5733c64f38a0",
            "docstring": "\"\"\"\nBuilds a payload dictionary for creating an issue with a patch request.\n\nArguments:\n- client (object): An object representing the client connection.\n\nSide Effects:\nModifies the payload dictionary with the provided summary, description, and issue type.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "ccd44ee14ee657a8472d2992a66f4eb22587aa19",
            "docstring": "\"\"\"\nThis script defines a function test_build_payload_with_patch_dict that tests the build_payload method of a client\nobject. The function sets up summary, description, and issue_type variables, builds a payload using the client's\nbuild_payload method, and then asserts various fields of the payload dictionary. The commented-out\ntest_missing_env_raises function is not currently in use.\n\ntest_build_payload_with_patch_dict(client):\nBuilds a payload dictionary for creating an issue with a patch request.\n\nArguments:\n- client (object): An object representing the client connection.\n\nReturn:\nThis function does not return anything.\n\nSide Effects:\nModifies the payload dictionary with the provided summary, description, and issue type.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_add_sprint_rest.py": [
        {
            "sha1": "8cf7d0ae5e3d6e00f216ce9db9515d2e72146ad3",
            "docstring": "\"\"\"\nThis file contains unit tests for the 'add_to_sprint_by_name' method of a client class.\nThe tests cover scenarios where the sprint is successfully found and when it is not found.\nMock objects are used to simulate the behavior of the '_request' method for sprint lookup and assignment.\nThe tests assert the correct behavior of the method by checking the number of method calls and exception messages.\n\nFunctions:\n- test_add_to_sprint_by_name_success(client): Add a sprint to the client by name successfully.\n- test_add_to_sprint_by_name_not_found(client): Simulate a scenario where a sprint is not found by adding it to the\nsprint by name.\n\nArguments:\n- client: A client object used to interact with a service.\n\nSide Effects:\n- Modifies the client object by adding a sprint to it in the 'test_add_to_sprint_by_name_success' function.\n- Modifies the _request method of the client object to return an empty list when called in the\n'test_add_to_sprint_by_name_not_found' function.\n\"\"\"",
            "last_accessed": 1745520340
        },
        {
            "sha1": "148cc809cdb2649d4a628c1adef6e958eab397bd",
            "docstring": "\"\"\"\nAdd a sprint to the client by name successfully.\n\nArguments:\n- client: A client object used to interact with a service.\n\nSide Effects:\n- Modifies the client object by adding a sprint to it.\n\"\"\"",
            "last_accessed": 1745520340
        },
        {
            "sha1": "ce1676c1e8abb5a51f0a6ac0cc23b7d6d34ad842",
            "docstring": "\"\"\"\nSimulate a scenario where a sprint is not found by adding it to the sprint by name.\n\nArguments:\n- client: An object representing the client used to interact with a service.\n\nSide Effects:\n- Modifies the _request method of the client object to return an empty list when called.\n\"\"\"",
            "last_accessed": 1745520340
        },
        {
            "sha1": "9e2eae74ce60bdf3d7c498139905dc7876f08cff",
            "docstring": "\"\"\"\nThis file contains unit tests for the 'add_to_sprint_by_name' method of a client class.\nThe tests cover scenarios where the sprint is successfully found and when it is not found.\nMock objects are used to simulate the behavior of the '_request' method for sprint lookup and assignment.\nThe tests assert the correct behavior of the method by checking the number of method calls and exception messages.\n\nFunctions:\n- test_add_to_sprint_by_name_success(client): Add a sprint to the client by name successfully.\n- test_add_to_sprint_by_name_not_found(client): Simulate a scenario where a sprint is not found by adding it to the sprint by name.\n\nArguments:\n- client: A client object used to interact with a service.\n\nSide Effects:\n- Modifies the client object by adding a sprint to it in the 'test_add_to_sprint_by_name_success' function.\n- Modifies the _request method of the client object to return an empty list when called in the 'test_add_to_sprint_not_found' function.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "ee43a13ec8abfcd9130e9af7443afa055a96c3c6",
            "docstring": "\"\"\"\nAdd a sprint to the client by name successfully.\n\nArguments:\n- client: A client object used to interact with a service.\n\nSide Effects:\n- Modifies the client object by adding a sprint to it.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "dabf97bca5e9719e3907821a676076257dcc0689",
            "docstring": "\"\"\"\nSimulate a scenario where a sprint is not found by adding it to the sprint by name.\n\nArguments:\n- client: An object representing the client used to interact with a service.\n\nSide Effects:\n- Modifies the _request method of the client object to return an empty list when called.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "e9a9e6aebb823a31ca9e685eb37ba8435801964b",
            "docstring": "\"\"\"\nThis file contains unit tests for the 'add_to_sprint_by_name' method of a client class.\nThe tests cover scenarios where the sprint is successfully found and when it is not found.\nMock objects are used to simulate the behavior of the '_request' method for sprint lookup and assignment.\nThe tests assert the correct behavior of the method by checking the number of method calls and exception messages.\n\nFunctions:\n- test_add_to_sprint_by_name_success(client): Add a sprint to the client by name successfully.\n- test_add_to_sprint_by_name_not_found(client): Simulate a scenario where a sprint is not found by adding it to the\nsprint by name.\n\nArguments:\n- client: A client object used to interact with a service.\n\nSide Effects:\n- Modifies the client object by adding a sprint to it in the 'test_add_to_sprint_by_name_success' function.\n- Modifies the _request method of the client object to return an empty list when called in the\n'test_add_to_sprint_not_found' function.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "dadecc77ff0381facbb365cef278c7968ba29248",
            "docstring": "\"\"\"\nSimulate a scenario where a sprint is not found by adding it to the sprint by name.\n\nArguments:\n- client: An object representing the client used to interact with a service.\n\nSide Effects:\n- Modifies the _request method of the client object to return an empty list when called.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_vote_story_points_rest.py": [
        {
            "sha1": "01326b6248f4f9554f513c0b8f8dbf96122ef6ec",
            "docstring": "\"\"\"\nThis module contains unit tests for the `vote_story_points` method in a client class that interacts with an API for\nvoting on story points associated with issues.\n\nThe tests cover the following scenarios:\n- Successful voting of story points.\n- Failure during the voting process.\n- Failure to fetch the issue ID required for voting.\n\nFunctions:\n- `test_vote_story_points_success(client)`: Tests the successful voting of story points, ensuring the correct API calls\nare made.\n- `test_vote_story_points_failure(client, capsys)`: Tests the scenario where voting fails, verifying that the\nappropriate error is raised and output is captured.\n- `test_vote_story_points_fetch_issue_id_failure(client, capsys)`: Tests the failure to fetch the issue ID, ensuring\nthat the correct exception is raised and output is captured.\n\nMock objects are utilized to simulate API responses and exceptions, allowing for isolated testing of the voting\nfunctionality without actual API calls.\n\"\"\"",
            "last_accessed": 1745566302
        },
        {
            "sha1": "33a4bf0b038ebca68bbed5dccbb5363a536d52e8",
            "docstring": "\"\"\"\nRetrieve the issue ID for voting on story points.\n\nArguments:\n- client: A client object used to make API requests.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "cbe5a1732cfe498000b2c77f2ce06a5c97a3530a",
            "docstring": "\"\"\"\nThis function tests the failure case of voting story points for an issue.\n\nArguments:\n- client: An object representing the client used to interact with an API.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nReturns:\nThis function does not return anything.\n\nExceptions:\nThis function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "a4a5320562ee8d737a1993178f59ca484d6a1242",
            "docstring": "\"\"\"\nSimulate a failure scenario when fetching issue ID for voting on story points.\n\nArguments:\n- client (object): An object representing the client used to make requests.\n- capsys (object): An object to capture stdout and stderr outputs.\n\nExceptions:\n- FetchIssueIDError: Raised when there is a network error during the request.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "412180a869a66ffc6bbdfbad07f6ceea2d8ba17c",
            "docstring": "\"\"\"\nThis module contains unit tests for the `vote_story_points` method within a client class that interacts with an API\nfor voting on story points associated with issues.\n\nThe tests validate the following scenarios:\n- Successful voting of story points.\n- Handling of failures during the voting process.\n- Management of errors when fetching the issue ID required for voting.\n\nFunctions:\n- `test_vote_story_points_success(client)`: Tests the successful voting of story points, ensuring that the correct\nAPI calls are made and validated.\n- `test_vote_story_points_failure(client, capsys)`: Tests the failure scenario for voting, verifying that the\nappropriate error is raised and the expected output is captured.\n- `test_vote_story_points_fetch_issue_id_failure(client, capsys)`: Tests the handling of failure to fetch the\nissue ID, ensuring that the correct exception is raised and that output is captured.\n\nMock objects are employed to simulate API responses and exceptions, enabling isolated and effective testing of the\nvoting functionality without making actual API calls.\n\"\"\"",
            "last_accessed": 1745608448
        },
        {
            "sha1": "6b396c56e4840faca82e6c4cbc9432cfea661bc9",
            "docstring": "\"\"\"\nThis module contains unit tests for the `vote_story_points` method within a client class that interacts with an API\nfor voting on story points associated with issues.\n\nThe tests validate the following scenarios:\n- Successful voting of story points.\n- Handling of failures during the voting process.\n- Management of errors when fetching the issue ID required for voting.\n\nFunctions:\n- `test_vote_story_points_success(client)`: Tests the successful voting of story points, ensuring that the correct\nAPI calls are made and validated.\n- `test_vote_story_points_failure(client, capsys)`: Tests the failure scenario for voting, verifying that the\nappropriate error is raised and the expected output is captured.\n- `test_vote_story_points_fetch_issue_id_failure(client, capsys)`: Tests the handling of failure to fetch the\nissue ID, ensuring that the correct exception is raised and that output is captured.\n\nMock objects are employed to simulate API responses and exceptions, enabling isolated and effective testing of the\nvoting functionality without making actual API calls.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_set_acceptance_criteria_cli_rest.py": [
        {
            "sha1": "13bf0620a555654213a791d07d1bd66cf6c65431",
            "docstring": "\"\"\"\nUnit tests for the `set_acceptance_criteria` method of the `JiraCLI` class.\n\nThis module contains unit tests designed to verify the behavior of the `set_acceptance_criteria` method\nwithin the `JiraCLI` class. The tests cover both successful scenarios and exception handling, using\nmocking to simulate the interactions with the `JiraClient`.\n\nTest Functions:\n- `test_set_acceptance_criteria`: Validates the successful setting of acceptance criteria and checks\nthe expected console output.\n- `test_set_acceptance_criteria_exception`: Ensures that the correct error handling occurs when\na `SetAcceptanceCriteriaError` is raised, verifying the output message.\n\nDependencies:\n- `pytest`: Required for executing the test cases and capturing output.\n- `unittest.mock`: Used for creating mock objects of the `JiraClient` to prevent actual API calls.\n- Custom exceptions and environment fetching utilities from the core application.\n\nUsage:\nExecute the tests using pytest to confirm that the `set_acceptance_criteria` method functions as intended\nin both normal and error scenarios.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "d6d5c80ebb3e35391ced4efddf681dac8c7db46c",
            "docstring": "\"\"\"\nSets up the acceptance criteria for testing a JiraCLI command.\n\nArguments:\n- cli (JiraCLI): An instance of the JiraCLI class.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nSide Effects:\n- Modifies the 'jira' attribute of the provided JiraCLI instance by assigning a MagicMock object to it.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "82526edec1ffef21bbb3164037f0cd03b0a0694f",
            "docstring": "\"\"\"\nSet acceptance criteria for a test case and handle exceptions.\n\nArguments:\n- cli (JiraCLI): An instance of JiraCLI class.\n- capsys: pytest fixture to capture stdout and stderr.\n\nSide Effects:\n- Modifies the JiraClient object within the JiraCLI instance.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "4f44bd7f9319a6da5077499f9dd538ebb7defb40",
            "docstring": "\"\"\"\nUnit tests for the `set_acceptance_criteria` method of the `JiraCLI` class.\n\nThis module contains unit tests that validate the functionality of the `set_acceptance_criteria` method\nin the `JiraCLI` class. The tests ensure correct handling of both successful scenarios and exceptions,\nutilizing mocking to simulate interactions with the `JiraClient`.\n\nTest Functions:\n- `test_set_acceptance_criteria`: Tests the successful setting of acceptance criteria and checks the\n  expected console output.\n- `test_set_acceptance_criteria_exception`: Tests the error handling when a `SetAcceptanceCriteriaError`\n  is raised, verifying the output message.\n\nDependencies:\n- `pytest`: Required for running the tests and capturing output.\n- `unittest.mock`: Used for creating mock objects of the `JiraClient` to avoid real API calls.\n- Custom exceptions and environment fetching utilities from the core application.\n\nUsage:\nRun the tests using pytest to ensure the `set_acceptance_criteria` method behaves correctly in both\nnormal and error conditions.\n\"\"\"",
            "last_accessed": 1745608460
        },
        {
            "sha1": "258e3d19576e545246f9f341efbbe9d27c35ed61",
            "docstring": "\"\"\"\nUnit tests for the `set_acceptance_criteria` method of the `JiraCLI` class.\n\nThis module contains unit tests that validate the functionality of the `set_acceptance_criteria` method\nin the `JiraCLI` class. The tests ensure correct handling of both successful scenarios and exceptions,\nutilizing mocking to simulate interactions with the `JiraClient`.\n\nTest Functions:\n- `test_set_acceptance_criteria`: Tests the successful setting of acceptance criteria and checks the\nexpected console output.\n- `test_set_acceptance_criteria_exception`: Tests the error handling when a `SetAcceptanceCriteriaError`\nis raised, verifying the output message.\n\nDependencies:\n- `pytest`: Required for running the tests and capturing output.\n- `unittest.mock`: Used for creating mock objects of the `JiraClient` to avoid real API calls.\n- Custom exceptions and environment fetching utilities from the core application.\n\nUsage:\nRun the tests using pytest to ensure the `set_acceptance_criteria` method behaves correctly in both\nnormal and error conditions.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_list_issues_defaults_rest.py": [
        {
            "sha1": "486107742c678e55c905900e1beca3e41802fe87",
            "docstring": "\"\"\"\nSet up a mock for the get_current_user method in the provided client object to always return the string \"me\".\nThe test_list_issues_defaults function sets up a mock for the get_current_user method in the provided client object to\nreturn \"me\".\nIt also mocks the _request method to return an empty issue list and asserts that calling list_issues returns an empty\nlist.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "2482997e73025535face3f0b2804e5e18ebdeda9",
            "docstring": "\"\"\"\nSet up a mock for the get_current_user method in the provided client object to always return the string \"me\".\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "0168844f7849a05612a4d494e1685058bc03409a",
            "docstring": "\"\"\"\nThis module contains a test function for the client object that mocks the behavior of certain methods to facilitate unit testing.\n\nThe `test_list_issues_defaults` function specifically mocks the `get_current_user` method to always return the string \"me\". It also simulates the `_request` method to handle API calls for retrieving field data and a list of issues. The test verifies that calling `list_issues` returns an empty list when there are no issues and ensures that the appropriate API endpoints are called with the expected parameters.\n\nKey functionalities include:\n- Mocking user retrieval to simulate a specific user context.\n- Simulating API responses for field data and issue lists.\n- Asserting the correctness of API calls and their parameters.\n\"\"\"",
            "last_accessed": 1745608464
        },
        {
            "sha1": "350ec8d1f05fe8635f31c2d433235f1ef4ebb7da",
            "docstring": "\"\"\"\nSet up a mock for the get_current_user method in the provided client object to always return the string \"me\".\nThis test will simulate two API calls: one for getting field data and another for getting the list of issues.\nArguments:\n- client: An object representing the client to test.\n\nSide Effects:\n- Modifies the behavior of the get_current_user method in the client object by setting it to always return \"me\".\n- Mocks the _request method of the client to handle requests to /rest/api/2/field and /rest/api/2/search.\n\nNo return value.\n\"\"\"",
            "last_accessed": 1745608467
        },
        {
            "sha1": "3560fb9f06143a4fe65d4e7b29621471d95e7783",
            "docstring": "\"\"\"\nSimulate a mock request for different API endpoints based on the method and path provided. \nIf the method is \"GET\" and the path contains \"/rest/api/2/field\", return a list of field IDs. \nIf the path contains \"/rest/api/2/search\", return an empty list of issues. \nIf the conditions are not met, return an empty dictionary.\n\nNo exceptions are raised in this function.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "198667d615357909e02397783a91902bc8ba2e34",
            "docstring": "\"\"\"\nThis module contains a unit test function for a client object, designed to mock certain methods to facilitate\ntesting of API interactions.\n\nThe main function, `test_list_issues_defaults`, mocks the `get_current_user` method to consistently return a\nspecific user (\"me\") and simulates the `_request` method to handle API calls for retrieving field data and a list\nof issues. The test ensures that when the `list_issues` method is called, it returns an empty list if no issues are\npresent and verifies that the correct API endpoints are accessed with the expected parameters.\n\nKey features of this module include:\n- Mocking user context for testing purposes.\n- Simulating responses from API endpoints for field data and issue lists.\n- Validating the correctness of API calls and their parameters through assertions.\n\"\"\"",
            "last_accessed": 1745609828
        },
        {
            "sha1": "2311e85548fb9b80c794274148484f8d242f67c3",
            "docstring": "\"\"\"\nSet up a mock for the get_current_user method in the provided client object to always return the string \"me\".\nThis test will simulate two API calls: one for getting field data and another for getting the list of issues.\nArguments:\n- client: An object representing the client to test.\n\nSide Effects:\n- Modifies the behavior of the get_current_user method in the client object by setting it to always return \"me\".\n- Mocks the _request method of the client to handle requests to /rest/api/2/field and /rest/api/2/search.\n\nNo return value.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "c3f80803d685e32e8f8754ee89faac25c9f6dde6",
            "docstring": "\"\"\"\nThis module contains unit tests for a client object, specifically designed to test API interactions related to issue listing.\n\nThe primary function, `test_list_issues_defaults`, mocks the `get_current_user` method to return a fixed user identifier (\"me\") and simulates API requests to retrieve field data and a list of issues. The test checks that the `list_issues` method returns an empty list when no issues are available and verifies that the expected API endpoints are called with the correct parameters.\n\nKey functionalities include:\n- Mocking user context to ensure consistent testing.\n- Simulating responses for API calls to fetch field data and issue lists.\n- Validating API call correctness through assertions on call counts and parameters.\n\"\"\"",
            "last_accessed": 1745610013
        },
        {
            "sha1": "601fe7fa23f3474ce69dd43ccbfcceeb033f796a",
            "docstring": "\"\"\"\nThis module contains unit tests for a client object, specifically designed to test API interactions related to issue\nlisting. It includes a primary test function, `test_list_issues_defaults`, which mocks the `get_current_user` method\nto simulate API requests for retrieving field data and a list of issues.\n\nThe module validates that the `list_issues` method correctly returns an empty list when no issues are available and\nensures that the appropriate API endpoints are called with the expected parameters. Key functionalities include\nmocking user context, simulating API responses, and validating API call correctness through assertions.\n\nFunctions:\n- test_list_issues_defaults(client): Tests the list_issues method of the client by mocking API calls and\n  verifying the expected behavior and interactions.\n\"\"\"",
            "last_accessed": 1745610493
        },
        {
            "sha1": "9aee2dd2a721fa3a127048f3505d25fa5dc54337",
            "docstring": "\"\"\"\nThis module contains unit tests for a client object, specifically designed to test API interactions related to issue\nlisting. It includes a primary test function, `test_list_issues_defaults`, which mocks the `get_current_user` method\nto simulate API requests for retrieving field data and a list of issues.\n\nThe module validates that the `list_issues` method correctly returns an empty list when no issues are available and\nensures that the appropriate API endpoints are called with the expected parameters. Key functionalities include\nmocking user context, simulating API responses, and validating API call correctness through assertions.\n\nFunctions:\n- test_list_issues_defaults(client): Tests the list_issues method of the client by mocking API calls and\nverifying the expected behavior and interactions.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_migrate_no_transitions_rest.py": [
        {
            "sha1": "7db5336d9bc93ee3f07ef66ee7eb9603934c3980",
            "docstring": "\"\"\"\nThis script contains a unit test for the 'migrate_issue' method of a client object, specifically testing its behavior\nwhen migrating issues without transitions. The test function utilizes mocking to simulate HTTP requests and responses\nto ensure that the method behaves as expected under controlled conditions.\n\nFunctions:\n- test_migrate_no_transitions(client): Tests the migration of issue data for a given client without considering\ntransitions.\n\nArguments:\n- client (Client): An instance of a client that interacts with an issue tracking system.\n\nSide Effects:\n- Alters the test data associated with the specified client, specifically for the issue migration process.\n\nInternal Functions:\n- mock_request(method, path, **kwargs): Simulates HTTP requests to a REST API, returning predefined mock responses\nbased on the requested path.\n\nReturn Values of mock_request:\n- Returns a dictionary containing mock data that varies according to the request path, facilitating the testing\nof the 'migrate_issue' method.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "5961613ebb8270911fe26a372c643e85978f87f2",
            "docstring": "\"\"\"\nMigrate the test data without transitions for a given client.\n\nArguments:\n- client (Client): An object representing a client for which the test data will be migrated.\n\nSide Effects:\n- Modifies the test data for the specified client without considering transitions.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "c64f287baea1fc4536db3a4405dbba6912e31bb4",
            "docstring": "\"\"\"\nMock a request to a REST API endpoint.\n\nArguments:\n- method (str): The HTTP method used for the request.\n- path (str): The path of the API endpoint being requested.\n- **kwargs: Additional keyword arguments that can be passed but are not used in this function.\n\nReturn:\n- dict: A dictionary containing mock data based on the provided path. The structure of the dictionary varies\n  based on the path:\n  - If the path starts with \"/rest/api/2/issue/AAP-test_migrate_no_transitions/transitions\", returns\n    {\"transitions\": []}.\n  - If the path starts with \"/rest/api/2/issue/AAP-test_migrate_no_transitions\", returns {\"fields\": {\"summary\":\n    \"Old\", \"description\": \"Old\"}}.\n  - If the path starts with \"/rest/api/2/issue/\", returns {\"key\": \"AAP-test_migrate_no_transitions\"}.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "00c50210dc4fa9aa46d4ef69286e814d8ddf7aab",
            "docstring": "\"\"\"\nThis script defines a unit test for the `migrate_issue` method of a client object, focusing on the migration of issues \nwithout transitions. The test employs mocking to simulate HTTP requests and responses, allowing for controlled testing \nof the method's behavior.\n\nFunctions:\n- test_migrate_no_transitions(client): Tests the migration of issue data for a given client while ignoring \n  transitions.\n\nArguments:\n- client (Client): An instance of a client that interacts with an issue tracking system.\n\nSide Effects:\n- Modifies the test data associated with the specified client, specifically during the issue migration process.\n\nInternal Functions:\n- mock_request(method, path, **kwargs): Simulates HTTP requests to a REST API, returning predefined mock responses \n  based on the requested path.\n\nReturn Values of mock_request:\n- Returns a dictionary containing mock data that varies according to the request path, which facilitates the testing \n  of the `migrate_issue` method.\n\"\"\"",
            "last_accessed": 1745608473
        },
        {
            "sha1": "0c096afce92abae3fdf6681bb57df8824c8dc3d4",
            "docstring": "\"\"\"\nThis script defines a unit test for the `migrate_issue` method of a client object, focusing on the migration of issues\nwithout transitions. The test employs mocking to simulate HTTP requests and responses, allowing for controlled testing\nof the method's behavior.\n\nFunctions:\n- test_migrate_no_transitions(client): Tests the migration of issue data for a given client while ignoring\ntransitions.\n\nArguments:\n- client (Client): An instance of a client that interacts with an issue tracking system.\n\nSide Effects:\n- Modifies the test data associated with the specified client, specifically during the issue migration process.\n\nInternal Functions:\n- mock_request(method, path, **kwargs): Simulates HTTP requests to a REST API, returning predefined mock responses\nbased on the requested path.\n\nReturn Values of mock_request:\n- Returns a dictionary containing mock data that varies according to the request path, which facilitates the testing\nof the `migrate_issue` method.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_epic_payload_field_rest.py": [
        {
            "sha1": "35f67114f234fbf86c657d33a2f9eca4cc222986",
            "docstring": "\"\"\"\nMock the environment variable for the epic field in the client by setting the 'fields' attribute to {\"nonsense\": \"Epic\nField\"}.\nParameters:\n- client: An object representing the client to be tested.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "ad901b300b10563d10e1395e3054cb5617994dec",
            "docstring": "\"\"\"\nMock the environment variable for the epic field in the client by setting the 'fields' attribute to {\"nonsense\": \"Epic Field\"}.\nParameters:\n- client: An object representing the client to be tested.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "cd23deb110a5966acbf58d1eccb57d68c731f280",
            "docstring": "\"\"\"\nMock the environment variable for the epic field in the client by setting the 'fields' attribute to {\"nonsense\": \"Epic Field\"}.\nParameters:\n- client: An object representing the client to be tested.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_unassign_issue_failure_rest.py": [
        {
            "sha1": "41edc82ab933681abb0c3c380448cbd3a210546e",
            "docstring": "\"\"\"\nThis file contains a unit test function to test the unassign_issue method of a client class. The test case simulates an\nUnassignIssueError exception by mocking the _request method using MagicMock. The test asserts that calling\nunassign_issue with a specific issue identifier raises the expected exception and captures the error message in the\noutput.\n\nThe test_unassign_issue_fails function mocks the _request method of a client object to simulate an UnassignIssueError\nexception when called. It is used for testing purposes.\n\nArguments:\n- capsys: A pytest fixture for capturing stdout and stderr output.\n- client: An object representing a client, typically used for making requests.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "6cf8f5460e5aaabc4fce59f9eeb996a1e397324e",
            "docstring": "\"\"\"\nMocks the _request method of a client object to simulate an UnassignIssueError exception when called. Used for testing purposes.\n\nArguments:\n- capsys: A pytest fixture for capturing stdout and stderr output.\n- client: An object representing a client, typically used for making requests.\n\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "9157b84418f3b6a5a7a5f7e1efc2aad18933f568",
            "docstring": "\"\"\"\nThis file contains a unit test function to test the unassign_issue method of a client class. The test case simulates an\nUnassignIssueError exception by mocking the _request method using MagicMock. The test asserts that calling\nunassign_issue with a specific issue identifier raises the expected exception and captures the error message in the\noutput.\n\nThe test_unassign_issue_fails function mocks the _request method of a client object to simulate an UnassignIssueError\nexception when called. It is used for testing purposes.\n\nArguments:\n- capsys: A pytest fixture for capturing stdout and stderr output.\n- client: An object representing a client, typically used for making requests.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_lint_issue_rest.py": [
        {
            "sha1": "190438c70f6154fcb962526f9767ffced170b29c",
            "docstring": "\"\"\"\nThis script defines a unit test function test_lint_data_structure(client) that tests the data structure of an issue in\na JIRA system. The function uses a MagicMock object to simulate the response from a client request to a specific JIRA\nissue. It then performs assertions to validate certain fields in the issue data, such as the status and blocked fields.\nThe test ensures that the status field's name is \"In Progress\" and the blocked field's value is \"True\". The test is\ndesigned to be run within a testing framework that supports mocking client requests.\n\ntest_lint_data_structure(client):\nLint the data structure of an issue before sending it to a client.\n\nArguments:\n- client (Client): The client object to which the issue data will be sent.\n\nSide Effects:\n- Modifies the issue_data dictionary structure to ensure it meets certain requirements before being sent to the\nclient.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "c7f702a56b46b6c00aeb679799bb8cec3c999417",
            "docstring": "\"\"\"\nLint the data structure of an issue before sending it to a client.\n\nArguments:\n- client (Client): The client object to which the issue data will be sent.\n\nSide Effects:\n- Modifies the issue_data dictionary structure to ensure it meets certain requirements before being sent to the client.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "b5696d97c24ca03218a434a38bcb56531482bbad",
            "docstring": "\"\"\"\nThis script defines a unit test function test_lint_data_structure(client) that tests the data structure of an issue in\na JIRA system. The function uses a MagicMock object to simulate the response from a client request to a specific JIRA\nissue. It then performs assertions to validate certain fields in the issue data, such as the status and blocked fields.\nThe test ensures that the status field's name is \"In Progress\" and the blocked field's value is \"True\". The test is\ndesigned to be run within a testing framework that supports mocking client requests.\n\ntest_lint_data_structure(client):\nLint the data structure of an issue before sending it to a client.\n\nArguments:\n- client (Client): The client object to which the issue data will be sent.\n\nSide Effects:\n- Modifies the issue_data dictionary structure to ensure it meets certain requirements before being sent to the\nclient.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_sprint_rest.py": [
        {
            "sha1": "de4cd00c09e7d62ef4bec2482b08caf59eaef4e8",
            "docstring": "\"\"\"\nThis file contains unit test functions for testing the methods set_sprint and remove_from_sprint of a client object.\nThe tests use MagicMock to mock the _request method of the client object and assert the expected behavior of the\nmethods. The set_sprint method is expected to make a PUT request with specific parameters, while the remove_from_sprint\nmethod is expected to make a POST request with specific parameters.\n\nFunctions:\n- test_set_sprint(client): Set an empty dictionary as the return value for the _request method of the provided client.\n- test_remove_from_sprint(client): Set the _request attribute of the client object to a MagicMock instance that returns\nan empty dictionary.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "3a3e93ea316e2cbeb35f4f4c37dbff36f6fe50ff",
            "docstring": "\"\"\"\nSet an empty dictionary as the return value for the _request method of the provided client.\n\nArguments:\n- client: An object representing a client.\n\nSide Effects:\n- Modifies the return value of the _request method of the client object.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "bf0733694f2b3f2dbc1ab766164626a7b56745b0",
            "docstring": "\"\"\"\nSet the _request attribute of the client object to a MagicMock instance that returns an empty dictionary.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "87fc6878b37161aba656c769dd467e84ec0963bf",
            "docstring": "\"\"\"\nThis file contains unit test functions for testing the methods set_sprint and remove_from_sprint of a client object.\nThe tests use MagicMock to mock the _request method of the client object and assert the expected behavior of the\nmethods. The set_sprint method is expected to make a PUT request with specific parameters, while the remove_from_sprint\nmethod is expected to make a POST request with specific parameters.\n\nFunctions:\n- test_set_sprint(client): Set an empty dictionary as the return value for the _request method of the provided client.\n- test_remove_from_sprint(client): Set the _request attribute of the client object to a MagicMock instance that returns\nan empty dictionary.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "a61c5011b60518ea994fc47a907f32fe67d9d4cb",
            "docstring": "\"\"\"\nSet an empty dictionary as the return value for the _request method of the provided client.\n\nArguments:\n- client: An object representing a client.\n\nSide Effects:\n- Modifies the return value of the _request method of the client object.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "ab0e6cbfafb5df934d15a20726a125d7f91ede4b",
            "docstring": "\"\"\"\nSet the _request attribute of the client object to a MagicMock instance that returns an empty dictionary.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_search_users.py": [
        {
            "sha1": "b1dc29e71da2ec4a66c7f585a46a304ad3b68cae",
            "docstring": "\"\"\"\nThis script defines a unit test function test_search_users_returns_expected_data(client) that tests the search_users\nmethod of a client object. The function sets up a mock response for the client's _request method and then calls the\nsearch_users method with a specific username. It asserts that the results match the mock response and checks that the\n_request method was called with the expected parameters. The script requires the client object to be passed as an\nargument to the test function.\n\nThe test_search_users_returns_expected_data function:\n- Searches for users and returns the expected data.\n- Takes a client object as an argument representing the client used to make requests.\n- Modifies the client's _request attribute to return mock user data.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "87d8bec75ccc715a10fba5e9022f6ac9c7b0c36c",
            "docstring": "\"\"\"\nSearch for users and return the expected data.\n\nArguments:\n- client (Client): An object representing the client used to make requests.\n\nSide Effects:\n- Modifies the client's _request attribute to return mock user data.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "6751136a0701b96f248ac7ad6f195130687acc0e",
            "docstring": "\"\"\"\nThis script defines a unit test function test_search_users_returns_expected_data(client) that tests the search_users\nmethod of a client object. The function sets up a mock response for the client's _request method and then calls the\nsearch_users method with a specific username. It asserts that the results match the mock response and checks that the\n_request method was called with the expected parameters. The script requires the client object to be passed as an\nargument to the test function.\n\nThe test_search_users_returns_expected_data function:\n- Searches for users and returns the expected data.\n- Takes a client object as an argument representing the client used to make requests.\n- Modifies the client's _request attribute to return mock user data.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_status_rest.py": [
        {
            "sha1": "b0f76e63823bab551f727758b75f0bd293be0f5a",
            "docstring": "\"\"\"\nSet the status of the client using a simulated side effect for multiple calls.\n\nArguments:\n- client: An object representing the client to set the status for.\n\nSide Effects:\n- Modifies the side effect of the client's request attribute for multiple calls.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "43c3e0de9b6dfeeb816a1e566e096e02fd5c70c0",
            "docstring": "\"\"\"\nSet the status of the client using a simulated side effect for multiple calls.\n\nArguments:\n- client: An object representing the client to set the status for.\n\nSide Effects:\n- Modifies the side effect of the client's request attribute for multiple calls.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "a5c41bf6c051f2c8c0726d3b679a1ce56dd59f97",
            "docstring": "\"\"\"\nSet the status of the client using a simulated side effect for multiple calls.\n\nArguments:\n- client: An object representing the client to set the status for.\n\nSide Effects:\n- Modifies the side effect of the client's request attribute for multiple calls.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_add_flag.py": [
        {
            "sha1": "d7703b8d9a4458e9b0f518d680169d4889b4c647",
            "docstring": "\"\"\"\nSet a flag in the client for testing purposes.\n\nArguments:\n- client: An instance of a client object to add the flag for testing.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "51b296db625dd8d3ab0ebf15338fcc109b8e60c8",
            "docstring": "\"\"\"\nSet a flag in the client for testing purposes.\n\nArguments:\n- client: An instance of a client object to add the flag for testing.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "b558d08de8ca5846a07178f94a09c561fa8d6182",
            "docstring": "\"\"\"\nSet a flag in the client for testing purposes.\n\nArguments:\n- client: An instance of a client object to add the flag for testing.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "1bd4dcc1644c7220cea358cfdc5d175239da024a",
            "docstring": "\"\"\"\nSet a flag in the client for testing purposes.\n\nArguments:\n- client: An instance of a client object to add the flag for testing.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_list_issues_rest.py": [
        {
            "sha1": "7563a4349f63d07986b426c933594bfb06ab9a60",
            "docstring": "\"\"\"\nThis module contains unit tests for a client interacting with an issue tracking system. The tests focus on\nlisting issues based on various parameters, including assignee, reporter, status, summary, and sprint\nconditions (blocked and unblocked). \n\nThe tests utilize mocking to simulate API responses, ensuring that the client behaves correctly under \ndifferent scenarios. Each test verifies that the returned issues are formatted correctly and contain \nthe expected data.\n\nFunctions:\n- `mock_client_request(client, mock_return_value)`: Mocks the client's API request behavior to return\npredefined responses.\n- `test_list_issues(client)`: Tests issue listing by assignee.\n- `test_list_issues_reporter(client)`: Tests issue listing by reporter.\n- `test_list_issues_with_status(client)`: Tests issue listing filtered by status.\n- `test_list_issues_with_summary(client)`: Tests issue listing filtered by summary.\n- `test_list_issues_with_blocked(client)`: Tests listing issues marked as blocked.\n- `test_list_issues_with_unblocked(client)`: Tests listing issues marked as unblocked.\n- `test_list_issues_with_none_sprints(client)`: Tests issue listing when sprint data is None or missing.\n- `test_list_issues_with_sprint_regex_matching(client)`: Tests issue listing with sprint data matching\na specific regex pattern.\n\"\"\"",
            "last_accessed": 1745519404
        },
        {
            "sha1": "324cd8104bd4d2d817475070cef2ca879dfb16fc",
            "docstring": "\"\"\"\nMock the get_current_user method of a client object with a specified return value.\n\nArguments:\n- client (object): The client object for which the get_current_user method will be mocked.\n- mock_return_value (any): The return value that the get_current_user method will be mocked to return.\n\nSide Effects:\n- Modifies the get_current_user method of the client object to return the specified mock_return_value.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "7108d7d0c17e21bbc9bb2f9125bd18aeb0505f50",
            "docstring": "\"\"\"\nMock a request to a specified path with optional keyword arguments.\n\nArguments:\n- method (str): The HTTP method used for the request.\n- path (str): The URL path to mock the request for.\n- **kwargs: Optional keyword arguments that can be used for customizing the request.\n\nReturn:\n- mock_return_value: The value returned when the method is \"GET\" and the path contains \"search\".\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "e66916313fe9776422482c49379a642e6896cf9e",
            "docstring": "\"\"\"\nRetrieve a list of issues from a client.\n\nArguments:\n- client: A client object used to make requests.\n\nSide Effects:\n- Calls the mock_client_request function with the client object and a dictionary containing a list of issues.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "bfe5bf5a8c64f85455cfe225427d6735f13bca4a",
            "docstring": "\"\"\"\nRetrieves a list of issues reported by a specific client.\n\nArguments:\n- client (object): An object representing the client for whom the issues are being retrieved.\n\nSide Effects:\n- Calls the mock_client_request function with the provided client object and a dictionary containing a list of\nissues.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "2cf1f6bfbb39681824d9c8228c2eecb326e7d846",
            "docstring": "\"\"\"\nRetrieve a list of issues with a specific status from the client.\n\nArguments:\n- client (object): The client object used to make requests.\n\nSide Effects:\n- Modifies the client by sending a request to retrieve a list of issues with a specific status.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "7d09997aabc39262cb2ebe81bb5abd0a6b4d7d1d",
            "docstring": "\"\"\"\nRetrieve a list of issues from a client and check for a specific summary.\n\nArguments:\n- client (object): The client object used to make requests.\n\nSide Effects:\n- Calls the mock_client_request function to retrieve a list of issues with a specific key.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "ad650b9853aa285b44ebeb7715eb1c7f82db9299",
            "docstring": "\"\"\"\nRetrieve a list of issues with a specific key from the client.\n\nArguments:\n- client (object): The client object used to make requests.\n\nSide Effects:\n- Modifies the client by requesting a list of issues with a specific key.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "b2610d43ba14c9a3aaf79ddebff2db77b4a74c93",
            "docstring": "\"\"\"\nRetrieve and list all unblocked issues for a specific client.\n\nArguments:\n- client (object): The client object used to make requests.\n\nSide Effects:\n- Calls the mock_client_request function to retrieve a list of issues for the specified client.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "31dde41b379f255335b067431c28a15bff43d866",
            "docstring": "\"\"\"\nRetrieve and display a list of issues from a client's system that are not assigned to any sprint.\n\nArguments:\n- client (Client): An object representing the client's system to fetch the list of issues from.\n\nThis function does not return any value.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "35ea2a3993f975d2d4d9a8b4b04bc077f3d6d15a",
            "docstring": "\"\"\"\nSimulates a mock request to a server with the provided HTTP method and path. If the method is 'GET' and the\npath contains 'search', it returns mock data for an issue with specific fields set.\n\nArguments:\n- method (str): The HTTP method of the request.\n- path (str): The path of the request.\n- **kwargs: Additional keyword arguments that are not used in the current implementation.\n\nReturn:\nA dictionary containing mock data for an issue with fields like key, summary, status, assignee, priority, and\nspecific values for 'JIRA_STORY_POINTS_FIELD' and 'JIRA_SPRINT_FIELD'. The 'JIRA_SPRINT_FIELD' is set to None\nto indicate missing sprints data.\n\nSide Effects:\nNone\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "7cfead109fb779cc3af837e15493aa9d089ded38",
            "docstring": "\"\"\"\nCheck for issues in a list that match a sprint regex pattern.\n\nArguments:\n- client (object): An object representing the client connection to Jira.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "f5e354fd9f7256e3441815cc7a61164a70967528",
            "docstring": "\"\"\"\nSimulate a mock request to retrieve issues with specific criteria from a JIRA-like system.\n\nArguments:\n- method (str): The HTTP method used for the request (e.g., \"GET\", \"POST\").\n- path (str): The path of the request, which may contain search parameters.\n- **kwargs: Additional keyword arguments that may be provided but are not used in the current implementation.\n\nReturn:\n- dict: A dictionary containing the retrieved issues that match the specified criteria. Each issue is\nrepresented by a dictionary with keys: summary, status, assignee, priority, and custom JIRA fields like sprint data.\n\nSide Effects:\n- The function may interact with an external service to fetch JIRA issue data.\n\nNote:\n- This function is a mock implementation and does not actually perform a network request.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "196631879cadcd0c01df955a6c7710a16baa84d7",
            "docstring": "\"\"\"\nThis module contains unit tests for a client interacting with an issue tracking system. The tests focus on\nlisting issues based on various parameters, including assignee, reporter, status, summary, and sprint\nconditions (blocked and unblocked).\n\nThe tests utilize mocking to simulate API responses, ensuring that the client behaves correctly under\ndifferent scenarios. Each test verifies that the returned issues are formatted correctly and contain\nthe expected data.\n\nFunctions:\n- `mock_client_request(client, mock_return_value)`: Mocks the client's API request behavior to return\npredefined responses.\n- `test_list_issues(client)`: Tests issue listing by assignee.\n- `test_list_issues_reporter(client)`: Tests issue listing by reporter.\n- `test_list_issues_with_status(client)`: Tests issue listing filtered by status.\n- `test_list_issues_with_summary(client)`: Tests issue listing filtered by summary.\n- `test_list_issues_with_blocked(client)`: Tests listing issues marked as blocked.\n- `test_list_issues_with_unblocked(client)`: Tests listing issues marked as unblocked.\n- `test_list_issues_with_none_sprints(client)`: Tests issue listing when sprint data is None or missing.\n- `test_list_issues_with_sprint_regex_matching(client)`: Tests issue listing with sprint data matching\na specific regex pattern.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "7011031be3e9bf0e225c298e55f2510c1a231431",
            "docstring": "\"\"\"\nThis module contains unit tests for a client interacting with an issue tracking system. The tests focus on\nlisting issues based on various parameters, including assignee, reporter, status, summary, and sprint\nconditions (blocked and unblocked).\n\nThe tests utilize mocking to simulate API responses, ensuring that the client behaves correctly under\ndifferent scenarios. Each test verifies that the returned issues are formatted correctly and contain\nthe expected data.\n\nFunctions:\n- `mock_client_request(client, mock_return_value)`: Mocks the client's API request behavior to return\npredefined responses.\n- `test_list_issues(client)`: Tests issue listing by assignee.\n- `test_list_issues_reporter(client)`: Tests issue listing by reporter.\n- `test_list_issues_with_status(client)`: Tests issue listing filtered by status.\n- `test_list_issues_with_summary(client)`: Tests issue listing filtered by summary.\n- `test_list_issues_with_blocked(client)`: Tests listing issues marked as blocked.\n- `test_list_issues_with_unblocked(client)`: Tests listing issues marked as unblocked.\n- `test_list_issues_with_none_sprints(client)`: Tests issue listing when sprint data is None or missing.\n- `test_list_issues_with_sprint_regex_matching(client)`: Tests issue listing with sprint data matching\na specific regex pattern.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "8271f10cf7748428e961d5ab0fedfd1fd7b3a456",
            "docstring": "\"\"\"\nMock the get_current_user method of a client object with a specified return value.\n\nArguments:\n- client (object): The client object for which the get_current_user method will be mocked.\n- mock_return_value (any): The return value that the get_current_user method will be mocked to return.\n\nSide Effects:\n- Modifies the get_current_user method of the client object to return the specified mock_return_value.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "2b80dee69c3976c44005942e3204b8a82a0159c0",
            "docstring": "\"\"\"\nMock a request to a specified path with optional keyword arguments.\n\nArguments:\n- method (str): The HTTP method used for the request.\n- path (str): The URL path to mock the request for.\n- **kwargs: Optional keyword arguments that can be used for customizing the request.\n\nReturn:\n- Different mock return values depending on the path and method.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "831af312cbc863a1e71aa691da9cb0ec3cc97015",
            "docstring": "\"\"\"\nRetrieve a list of issues from a client.\n\nArguments:\n- client: A client object used to make requests.\n\nSide Effects:\n- Calls the mock_client_request function with the client object and a dictionary containing a list of issues.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "b23a18120e2f1f18034647f588a4538204bade72",
            "docstring": "\"\"\"\nRetrieves a list of issues reported by a specific client.\n\nArguments:\n- client (object): An object representing the client for whom the issues are being retrieved.\n\nSide Effects:\n- Calls the mock_client_request function with the provided client object and a dictionary containing a list of\nissues.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "1966ce53881db9400238a96fe5089f9e29cae957",
            "docstring": "\"\"\"\nSimulates mock requests to different API endpoints based on the provided method and path. \n\nArguments:\n- method (str): The HTTP method used for the request.\n- path (str): The path of the API endpoint being requested.\n- **kwargs: Additional keyword arguments that may be passed but not used in the function.\n\nReturn:\n- dict: A dictionary containing the mock response data for the requested API endpoint.\n\nSide Effects:\n- Modifies the global state by setting the mock request to simulate multiple API calls.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "0a9037ba2bd6514011e90727d01a35872cb29f8b",
            "docstring": "\"\"\"\nSimulates API calls by mocking a request method and setting responses based on the path and method provided.\n\nArguments:\n- method (str): The HTTP method used for the request.\n- path (str): The endpoint path for the API request.\n- **kwargs: Additional keyword arguments that may be passed but not used in this function.\n\nReturn:\n- dict: A dictionary representing the response for the specified path and method. Returns an empty dictionary if the path or method does not match any predefined responses.\n\nSide Effects:\n- Modifies the behavior of the client's request method by setting it to a MagicMock object with the mock_request function as the side effect.\n\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "e0910f8f325c2a8962494fee78199c298e9f1fb6",
            "docstring": "\"\"\"\nSimulates a mock request to a server with the provided HTTP method and path, returning predefined mock data for specific scenarios.\n\nArguments:\n- method (str): The HTTP method of the request.\n- path (str): The path of the request.\n- **kwargs: Additional keyword arguments that are not used in the current implementation.\n\nReturn:\nA dictionary containing mock data for an issue, including fields like key, summary, status, assignee, priority, and specific values for 'JIRA_STORY_POINTS_FIELD' and 'JIRA_SPRINT_FIELD', with 'JIRA_SPRINT_FIELD' set to None to indicate missing sprints data.\n\nSide Effects:\nNone\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "14767b427f2f6ed76f812d4d6242c079e2440d81",
            "docstring": "\"\"\"\nSimulate a mock request to retrieve issues with specific criteria from a JIRA-like system.\n\nArguments:\n- method (str): The HTTP method used for the request (e.g., \"GET\", \"POST\").\n- path (str): The path of the request, which may contain search parameters.\n- **kwargs: Additional keyword arguments that may be provided but are not used in the current implementation.\n\nReturn:\n- dict: A dictionary containing the retrieved issues that match the specified criteria. Each issue is\nrepresented by a dictionary with keys: summary, status, assignee, priority, and custom JIRA fields like sprint\ndata.\n\nNote:\n- This function is a mock implementation and does not actually perform a network request.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_change_issue_type_rest.py": [
        {
            "sha1": "aaf0e14770219f85b639d1676cf8ac14597b9c25",
            "docstring": "\"\"\"\nThis module contains unit tests for methods related to changing issue types in a Jira client.\n\nThe tests include:\n- `test_change_issue_type`: Verifies the functionality of the `change_issue_type` method by mocking the request method\nand ensuring that the correct GET and PUT requests are made to retrieve and change the issue type.\n- `test_change_type_else_block`: Tests the `change_type` method by simulating a failure scenario where the\n`change_issue_type` method returns False, and asserts that the appropriate failure message is printed.\n\nDependencies:\n- unittest.mock: Used for mocking objects and methods during testing.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "b1bb196e09afedb0b202f8e97eb79527b4516b70",
            "docstring": "\"\"\"\nMock the request method to fetch issue details and change the issue type if needed.\n\nArguments:\n- client: A client object used to interact with an external service.\n\nSide Effects:\n- Modifies the behavior of the request method to return issue details with a specific issue type based on the\nmethod and path provided.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "c82c5403cf41b233a2ed0dd298d105a25870de09",
            "docstring": "\"\"\"\nChange the type of an issue in a CLI application if the condition in the else block is met.\n\nArguments:\n- cli: The CLI object used for interacting with the command line interface.\n\nSide Effects:\n- Modifies the type of an issue specified by 'issue_key' to the type specified by 'new_type'.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "1e2b1b4951707306eefc28bd7e2bca1edc020fb4",
            "docstring": "\"\"\"\nThis module contains unit tests for methods related to changing issue types in a Jira client.\n\nThe tests include:\n- `test_change_issue_type`: Verifies the functionality of the `change_issue_type` method by mocking the request method\nand ensuring that the correct GET and PUT requests are made to retrieve and change the issue type.\n- `test_change_type_else_block`: Tests the `change_type` method by simulating a failure scenario where the\n`change_issue_type` method returns False, and asserts that the appropriate failure message is printed.\n\nDependencies:\n- unittest.mock: Used for mocking objects and methods during testing.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "1215d54784a2c7990f358c89a3e19dbc7108a3fc",
            "docstring": "\"\"\"\nMock the request method to fetch issue details and change the issue type if needed.\n\nArguments:\n- client: A client object used to interact with an external service.\n\nSide Effects:\n- Modifies the behavior of the request method to return issue details with a specific issue type based on the\nmethod and path provided.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_remove_from_sprint_exception_rest.py": [
        {
            "sha1": "094af1a97bd380f6bb422757d6c0a7755502c0ad",
            "docstring": "\"\"\"\nThis script contains a unit test function to test the behavior of the remove_from_sprint method in a client class. It\nmocks the _request method to raise a RemoveFromSprintError exception with a specified message. The test checks if the\nexception is properly raised when calling the remove_from_sprint method with a specific parameter. It also captures the\noutput to verify that the expected error message is printed.\n\nFunctions:\n- test_remove_from_sprint_error: Mocks the _request method to raise a RemoveFromSprintError exception when called with\nthe argument \"fail\". It takes capsys (a fixture provided by pytest to capture stdout and stderr output) and client (an\nobject representing a client used to make requests) as parameters.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "7f830970889da1c7f139fbcaa37c23aba2e1e284",
            "docstring": "\"\"\"\nMock the _request method to raise a RemoveFromSprintError exception when called with the argument \"fail\".\n\n:param capsys: A fixture provided by pytest to capture stdout and stderr output.\n:param client: An object representing a client used to make requests.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "0abd1a3922dac9d66c81df1d3fd771af6ef84263",
            "docstring": "\"\"\"\nThis script contains a unit test function to test the behavior of the remove_from_sprint method in a client class. It\nmocks the _request method to raise a RemoveFromSprintError exception with a specified message. The test checks if the\nexception is properly raised when calling the remove_from_sprint method with a specific parameter. It also captures the\noutput to verify that the expected error message is printed.\n\nFunctions:\n- test_remove_from_sprint_error: Mocks the _request method to raise a RemoveFromSprintError exception when called with\nthe argument \"fail\". It takes capsys (a fixture provided by pytest to capture stdout and stderr output) and client (an\nobject representing a client used to make requests) as parameters.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_set_story_points_and_clear_rest.py": [
        {
            "sha1": "2bffbc263b38b6ba9482c7e7e88243ab978fc868",
            "docstring": "\"\"\"\nThis script contains a test function to validate the functionality of setting story points in a JIRA issue using a\nclient object. The test function mocks the client's _request method and asserts that a PUT request is made with the\ncorrect payload and endpoint. The EnvFetcher class is used to retrieve the JIRA story points field value.\n\nFunctions:\n- test_set_story_points(client): Set story points for a given client. Modifies the client's request attribute using\nMagicMock to return an empty dictionary.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "48e92b874495afbe6b6138926e3681b06ee8c13b",
            "docstring": "\"\"\"\nSet story points for a given client.\n\nArguments:\n- client (object): The client object for which story points need to be set.\n\nSide Effects:\n- Modifies the client's request attribute using MagicMock to return an empty dictionary.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "cf52eba85dbf6d7d23157b48edc67e0b4dc31516",
            "docstring": "\"\"\"\nThis script contains a test function to validate the functionality of setting story points in a JIRA issue using a\nclient object. The test function mocks the client's _request method and asserts that a PUT request is made with the\ncorrect payload and endpoint. The EnvFetcher class is used to retrieve the JIRA story points field value.\n\nFunctions:\n- test_set_story_points(client): Set story points for a given client. Modifies the client's request attribute using\nMagicMock to return an empty dictionary.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "2b9684f46001f27f46cccad40eade1198f8da5ca",
            "docstring": "\"\"\"\nSet story points for a given client.\n\nArguments:\n- client (object): The client object for which story points need to be set.\n\nSide Effects:\n- Modifies the client's request attribute using MagicMock to return an empty dictionary.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_get_user.py": [
        {
            "sha1": "d78a1418965c2495cf08570580a8fe9d0e7fe9d1",
            "docstring": "\"\"\"\nThis script contains a unit test function to test the 'get_user' method of a client class. It mocks a user data\ndictionary and sets up a MagicMock object to simulate the behavior of the '_request' method of the client class. The\ntest verifies that the 'get_user' method returns the expected user data by comparing the result with the mock user data\ndictionary. It also asserts that the '_request' method is called once with specific parameters.\n\nFunctions:\n- test_get_user_returns_expected_data(client): Retrieve user data from the client using a mock user object.\n\nArguments:\n- client (object): An object representing the client to interact with.\n\nSide Effects:\n- Modifies the client's _request method to return a mock user object.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "030e9999c0253ebc830b3369c47dc10ddf9a6cf1",
            "docstring": "\"\"\"\nRetrieve user data from the client using a mock user object.\n\nArguments:\n- client (object): An object representing the client to interact with.\n\nSide Effects:\n- Modifies the client's _request method to return a mock user object.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "c25d1209613f53a2eab29782f0d9f3f0f0eddf6a",
            "docstring": "\"\"\"\nThis script contains a unit test function to test the 'get_user' method of a client class. It mocks a user data\ndictionary and sets up a MagicMock object to simulate the behavior of the '_request' method of the client class. The\ntest verifies that the 'get_user' method returns the expected user data by comparing the result with the mock user data\ndictionary. It also asserts that the '_request' method is called once with specific parameters.\n\nFunctions:\n- test_get_user_returns_expected_data(client): Retrieve user data from the client using a mock user object.\n\nArguments:\n- client (object): An object representing the client to interact with.\n\nSide Effects:\n- Modifies the client's _request method to return a mock user object.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_assign_issue_rest.py": [
        {
            "sha1": "bd7c45a38a35ebee516d1162170634ec9e5d083b",
            "docstring": "\"\"\"\nThis script contains unit tests for the 'assign_issue' function in the 'rest.ops.assign_issue' module.\nThe tests cover both success and failure scenarios of the function.\n\nFunctions:\n- test_assign_issue_success(): Assign an issue to a user.\nArguments:\n- mock_request (MagicMock): A MagicMock object representing the request.\n- issue_key (str): The key of the issue to be assigned.\n- assignee (str): The username of the user to whom the issue will be assigned.\n\n- test_assign_issue_failure(capsys, client): Assign a failure issue to the client for testing purposes.\nArguments:\n- capsys (pytest fixture): Pytest fixture for capturing stdout and stderr.\n- client: An instance of a client object.\n\nSide Effects:\n- Modifies the client's _request attribute by setting it to a MagicMock object with a side effect of raising an\nAssignIssueError with message \"fail\".\n\"\"\"",
            "last_accessed": 1745566312
        },
        {
            "sha1": "2f1ad92c8e32c0f8af93dd195bed67bfe27eca69",
            "docstring": "\"\"\"\nAssign an issue to a user.\n\nArguments:\n- mock_request (MagicMock): A MagicMock object representing the request.\n- issue_key (str): The key of the issue to be assigned.\n- assignee (str): The username of the user to whom the issue will be assigned.\n\"\"\"",
            "last_accessed": 1745566312
        },
        {
            "sha1": "0006941eef60d5b717c7a1b0f179dce76c65969e",
            "docstring": "\"\"\"\nAssign a failure issue to the client for testing purposes.\n\nArguments:\n- capsys (pytest fixture): Pytest fixture for capturing stdout and stderr.\n- client: An instance of a client object.\n\nSide Effects:\n- Modifies the client's _request attribute by setting it to a MagicMock object with a side effect of raising an\nAssignIssueError with message \"fail\".\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "cced2cbd4abd87ec9372024b7a0abc51cca26882",
            "docstring": "\"\"\"\nThis script contains unit tests for the 'assign_issue' function in the 'rest.ops.assign_issue' module.\nThe tests cover both success and failure scenarios of the function.\n\nFunctions:\n- test_assign_issue_success(): Assign an issue to a user.\nArguments:\n- mock_request (MagicMock): A MagicMock object representing the request.\n- issue_key (str): The key of the issue to be assigned.\n- assignee (str): The username of the user to whom the issue will be assigned.\n\n- test_assign_issue_failure(capsys, client): Assign a failure issue to the client for testing purposes.\nArguments:\n- capsys (pytest fixture): Pytest fixture for capturing stdout and stderr.\n- client: An instance of a client object.\n\nSide Effects:\n- Modifies the client's _request attribute by setting it to a MagicMock object with a side effect of raising an\nAssignIssueError with message \"fail\".\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "8e54311270f229301b18206e690fbf57195e0639",
            "docstring": "\"\"\"\nAssign an issue to a user.\n\nArguments:\n- mock_request (MagicMock): A MagicMock object representing the request.\n- issue_key (str): The key of the issue to be assigned.\n- assignee (str): The username of the user to whom the issue will be assigned.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_view_issue_rest.py": [
        {
            "sha1": "0412637f8d55335fd33bec8f770f0f34d4bf6256",
            "docstring": "\"\"\"\nView a specific issue using the client.\n\nArguments:\n- client (Client): An instance of the client used to interact with the issue tracking system.\n\nThis function calls the 'view_issue' method of the client to view a specific issue with the key\n\"AAP-test_rest_view_issue\".\n\"\"\"",
            "last_accessed": 1745566312
        },
        {
            "sha1": "3ca705a9e1eb0b5d466dd5ee827184f0dc132130",
            "docstring": "\"\"\"\nView a specific issue using the client.\n\nArguments:\n- client (Client): An instance of the client used to interact with the issue tracking system.\n\nThis function calls the 'view_issue' method of the client to view a specific issue with the key\n\"AAP-test_rest_view_issue\".\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "de1f82e3b7bb8ac90917dd847b1596fa54b41823",
            "docstring": "\"\"\"\nView a specific issue using the client.\n\nArguments:\n- client (Client): An instance of the client used to interact with the issue tracking system.\n\nThis function calls the 'view_issue' method of the client to view a specific issue with the key\n\"AAP-test_rest_view_issue\".\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_set_status_rest.py": [
        {
            "sha1": "b106d5ae600adcbf6e944a7035b4b02ae25a6f6d",
            "docstring": "\"\"\"\nThis file contains test cases for the set_status method in a client class.\nThe test_set_status_valid_transition function tests the method with a valid transition to 'In Progress' status.\nIt mocks the response for GET and POST requests and asserts that the _request method is called twice.\n\nThe test_set_status_invalid_transition function tests the method with an invalid transition to 'Done' status.\nIt uses pytest.raises to capture the exception and asserts that the _request method is called only once.\n\"\"\"",
            "last_accessed": 1745566318
        },
        {
            "sha1": "08e06bab612571551b4ce5e7b3ac63c966ce3b4f",
            "docstring": "\"\"\"\nSet the status of a client to a valid transition.\n\nArguments:\n- client (object): An object representing the client whose status needs to be updated.\n\nSide Effects:\n- Modifies the status of the client to a valid transition.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "6b2c3b124d640eb6a1b2f8762907af7d6d94b412",
            "docstring": "\"\"\"\nCheck if setting an invalid status transition raises an exception.\n\nArguments:\n- client: An object representing the client to interact with the API.\n\nSide Effects:\n- Modifies the behavior of the client object by mocking the response for GET and POST requests.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "5c331f77e1ff761d5c2c2170a43a3d8b5fe63b91",
            "docstring": "\"\"\"\nThis file contains test cases for the set_status method in a client class.\nThe test_set_status_valid_transition function tests the method with a valid transition to 'In Progress' status.\nIt mocks the response for GET and POST requests and asserts that the _request method is called twice.\n\nThe test_set_status_invalid_transition function tests the method with an invalid transition to 'Done' status.\nIt uses pytest.raises to capture the exception and asserts that the _request method is called only once.\n\nFunctions:\n- test_set_status_valid_transition(client): Set the status of a client to a valid transition.\n- test_set_status_invalid_transition(client): Check if setting an invalid status transition raises an exception.\n\nArguments:\n- client (object): An object representing the client whose status needs to be updated.\n\"\"\"",
            "last_accessed": 1745608561
        },
        {
            "sha1": "d1b1805418801915ffe5ba04302189d08a405cc6",
            "docstring": "\"\"\"\nThis file contains test cases for the set_status method in a client class.\nThe test_set_status_valid_transition function tests the method with a valid transition to 'In Progress' status.\nIt mocks the response for GET and POST requests and asserts that the _request method is called twice.\n\nThe test_set_status_invalid_transition function tests the method with an invalid transition to 'Done' status.\nIt uses pytest.raises to capture the exception and asserts that the _request method is called only once.\n\nFunctions:\n- test_set_status_valid_transition(client): Set the status of a client to a valid transition.\n- test_set_status_invalid_transition(client): Check if setting an invalid status transition raises an exception.\n\nArguments:\n- client (object): An object representing the client whose status needs to be updated.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_get_blocked_issues_rest.py": [
        {
            "sha1": "6a36e315135bf42c24be57b8e48b69701b91774c",
            "docstring": "\"\"\"\nThis module contains unit tests for the `blocked` method of the `client` class, which identifies blocked issues in a\nsystem. The tests cover various scenarios, including the presence and absence of blocked issues, cases where no issues\nare present, and handling exceptions during issue listing.\n\nThe tests utilize `MagicMock` from the `unittest.mock` module to simulate the behavior of the `client` object, enabling\ncontrolled testing environments. The `pytest` framework is used for assertions and exception handling. Additionally,\nthe `EnvFetcher` class is employed to retrieve environment variables related to JIRA issue fields.\n\"\"\"",
            "last_accessed": 1745566318
        },
        {
            "sha1": "8527d669312a6bd35a7af66d5e79a76dd2681646",
            "docstring": "\"\"\"\nRetrieve a list of blocked issues found in the system.\n\nArguments:\n- client: An object representing the client used to interact with the system.\n\nReturn:\n- This function does not return any value.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "b1918590261096da38543611b2c0a5c30c060858",
            "docstring": "\"\"\"\nRetrieve a list of blocked issues from the client, returning an empty list if no issues are blocked.\n\nArguments:\n- client: An object representing the client used to interact with the system.\n\nReturn:\n- None\n\nSide Effects:\n- Modifies the behavior of the client object by mocking the list_issues method.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "44e295844d01b4b39049ad2fa387e9eca6560f60",
            "docstring": "\"\"\"\nThis function tests the behavior of the 'blocked' method in the client when there are no blocked issues.\n\nArguments:\n- client: An instance of a client object.\n\nSide Effects:\n- Mocks the 'list_issues' method of the client object to return an empty list.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "d62440f322011ecff0f5042611f5209f88f5d8cc",
            "docstring": "\"\"\"\nSimulate an exception when listing blocked issues.\n\nArguments:\n- client: An object representing a client connection.\n\nExceptions:\n- Exception: Raised when there is a simulated failure in listing blocked issues.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "ff682e37e6fd79fe7c5820e454105fb7e18a7751",
            "docstring": "\"\"\"\nThis module contains unit tests for the `blocked` method of the `client` class, which identifies blocked issues in a\nsystem. The tests cover various scenarios, including the presence and absence of blocked issues, cases where no issues\nare present, and handling exceptions during issue listing.\n\nThe tests utilize `MagicMock` from the `unittest.mock` module to simulate the behavior of the `client` object, enabling\ncontrolled testing environments. The `pytest` framework is used for assertions and exception handling. Additionally,\nthe `EnvFetcher` class is employed to retrieve environment variables related to JIRA issue fields.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_add_to_sprint_board_check_rest.py": [
        {
            "sha1": "7dc66f0a9c9a62fa11433dd75990a1e4b151ec9e",
            "docstring": "\"\"\"\nTest function to verify the behavior of adding a sprint to a board with a specified name.\n\nThis function sets the board_id attribute of the client to None for testing purposes and then checks if an\nAddSprintError exception is raised when the board_id is not set. It utilizes pytest for testing.\n\nArguments:\n- client: An object representing a client with a board_id attribute.\n\nThis function does not return any value.\n\"\"\"\n\ndef test_add_to_sprint_board_id_check(client):\n    \"\"\"\n    Set the board_id attribute of the client to None for testing purposes.\n    \n    Arguments:\n    - client: An object representing a client with a board_id attribute.\n    \n    This function does not return any value.\n    \"\"\"\n\"\"\"",
            "last_accessed": 1745520346
        },
        {
            "sha1": "2fe849a09cd720c754740dbad8d5f9339de0c560",
            "docstring": "\"\"\"\nSet the board_id attribute of the client to None for testing purposes.\n\nArguments:\n- client: An object representing a client with a board_id attribute.\n\nThis function does not return any value.\n\nExceptions:\n- AddSprintError: Raised when the board_id attribute is not set in the client object.\n\nSide Effects:\n- Modifies the board_id attribute of the client object to None for testing purposes.\n\"\"\"",
            "last_accessed": 1745520346
        },
        {
            "sha1": "3d09ca3d56f3880db1f6c72eb96d72898efe0e11",
            "docstring": "\"\"\"\nTest function to verify the behavior of adding a sprint to a board with a specified name.\n\nThis function sets the board_id attribute of the client to None for testing purposes and then checks if an\nAddSprintError exception is raised when the board_id is not set. It utilizes pytest for testing.\n\nArguments:\n- client: An object representing a client with a board_id attribute.\n\nThis function does not return any value.\n\"\"\"",
            "last_accessed": 1745566318
        },
        {
            "sha1": "191ecf55fcfa789d93c83081e3bbc081b35f665d",
            "docstring": "\"\"\"\nSet the board_id attribute of the client to None for testing purposes.\n\nArguments:\n- client: An object representing a client with a board_id attribute.\n\nThis function does not return any value.\n\"\"\"",
            "last_accessed": 1745566318
        },
        {
            "sha1": "4490183bd7b77eb9ee934d239847e5c9aeb573ac",
            "docstring": "\"\"\"\nTest function to verify the behavior of adding a sprint to a board with a specified name.\n\nThis function sets the board_id attribute of the client to None for testing purposes and then checks if an\nAddSprintError exception is raised when the board_id is not set. It utilizes pytest for testing.\n\nArguments:\n- client: An object representing a client with a board_id attribute.\n\nThis function does not return any value.\n\"\"\"",
            "last_accessed": 1745608567
        },
        {
            "sha1": "f8c5450da5bd558e7ddbc8230fec76f44148ab6f",
            "docstring": "\"\"\"\nSet the board_id attribute of the client to None for testing purposes.\n\nArguments:\n- client: An object representing a client with a board_id attribute.\n\nThis function does not return any value.\n\nExceptions:\n- AddSprintError: Raised when the board_id is not set in the environment.\n\"\"\"",
            "last_accessed": 1745608569
        },
        {
            "sha1": "d8e8436a1a0628667a7b18b816a2ef135a9cdd75",
            "docstring": "\"\"\"\nTest function to verify the behavior of adding a sprint to a board with a specified name.\n\nThis function sets the board_id attribute of the client to None for testing purposes and then checks if an\nAddSprintError exception is raised when the board_id is not set. It utilizes pytest for testing.\n\nArguments:\n- client: An object representing a client with a board_id attribute.\n\nThis function does not return any value.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "4c05e972326851b7c1de8394ee8fe4ebd0008502",
            "docstring": "\"\"\"\nSet the board_id attribute of the client to None for testing purposes.\n\nArguments:\n- client: An object representing a client with a board_id attribute.\n\nThis function does not return any value.\n\nExceptions:\n- AddSprintError: Raised when the board_id is not set in the environment.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_transition_fallback_rest.py": [
        {
            "sha1": "eed1f228b121e8b9ad3eaebc828dc2dcb3e24c77",
            "docstring": "\"\"\"\nThis script contains a unit test for the migration functionality of an issue using a client object. It includes the\n`test_migrate_fallback_transition` function, which tests the fallback transition during the migration process by\nmocking HTTP requests made by the client. The test verifies that the issue is successfully migrated with the expected\nkey and tracks the transitions that have been called.\n\nThe `mock_request` function simulates HTTP requests, returning different responses based on the request's method and\npath. It handles scenarios such as retrieving transitions, specific path endings, and comments.\n\nExceptions:\nNone\n\"\"\"",
            "last_accessed": 1745566318
        },
        {
            "sha1": "21457ecc4633774d3f87c64fb644a071ebebd02c",
            "docstring": "\"\"\"\nExecutes a test to verify the fallback transition in a migration process.\n\nArguments:\n- client: A client object used to interact with the migration process.\n\nSide Effects:\n- Modifies the transitions_called list to track the transitions that have been called during the test.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "0ca3fb2c8c002b5cc3182fdda26062edeb4145b5",
            "docstring": "\"\"\"\nSimulates a mock HTTP request with specified method, path, and optional parameters.\n\nArguments:\n- method (str): The HTTP method used in the request (e.g., GET, POST).\n- path (str): The path of the request URL.\n- **kwargs: Additional keyword arguments that can be passed to the function.\n\nReturn:\n- dict: A dictionary containing different responses based on the conditions:\n  - If \"transitions\" is in the path, returns a dictionary with a list of transitions.\n  - If the path ends with \"AAP-test_migrate_fallback_transition\", returns a dictionary with specific fields.\n  - If \"comment\" is in the path, returns an empty dictionary.\n  - If the method is \"POST\", returns a dictionary with a specific key.\n\nExceptions:\nNone\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "c8ae792287e21339f3d286a179a7e974d765770c",
            "docstring": "\"\"\"\nThis script contains a unit test for the migration functionality of an issue using a client object. It includes the\n`test_migrate_fallback_transition` function, which tests the fallback transition during the migration process by\nmocking HTTP requests made by the client. The test verifies that the issue is successfully migrated with the expected\nkey and tracks the transitions that have been called.\n\nThe `mock_request` function simulates HTTP requests, returning different responses based on the request's method and\npath. It handles scenarios such as retrieving transitions, specific path endings, and comments.\n\nExceptions:\nNone\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_error_handling_change_type_rest.py": [
        {
            "sha1": "429f1076ad22d08a13078cdeac86b8ea1fdd4fa6",
            "docstring": "\"\"\"\nThis file contains a test case for the 'change_issue_type' method of a client class.\nIt mocks the '_request' method to raise a 'ChangeIssueTypeError' exception and tests if the method correctly handles\nthe exception.\nThe test asserts that the expected error message is printed when the exception is raised.\n\nFunctions:\n- test_change_issue_type_fails: Mocks the _request method to raise an exception when attempting to change the issue\ntype.\nArgs:\nclient (object): An object representing the client used to interact with the system.\ncapsys (object): An object used to capture stdout and stderr.\nExceptions:\nChangeIssueTypeError: Raised when the _request method encounters an issue while attempting to change the issue type.\n\"\"\"",
            "last_accessed": 1745566318
        },
        {
            "sha1": "100943b7ae58659caa1ede1548b25ad07371da28",
            "docstring": "\"\"\"\nMock the _request method to raise an exception when attempting to change the issue type.\n\nArgs:\n    client (object): An object representing the client used to interact with the system.\n    capsys (object): An object used to capture stdout and stderr.\n\nExceptions:\n    ChangeIssueTypeError: Raised when the _request method encounters an issue while attempting to change the issue type.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "3c1ee474affd823594d07076afd87b4183444ded",
            "docstring": "\"\"\"\nThis file contains a test case for the 'change_issue_type' method of a client class.\nIt mocks the '_request' method to raise a 'ChangeIssueTypeError' exception and tests if the method correctly handles\nthe exception.\nThe test asserts that the expected error message is printed when the exception is raised.\n\nFunctions:\n- test_change_issue_type_fails: Mocks the _request method to raise an exception when attempting to change the issue\ntype.\nArgs:\nclient (object): An object representing the client used to interact with the system.\ncapsys (object): An object used to capture stdout and stderr.\nExceptions:\nChangeIssueTypeError: Raised when the _request method encounters an issue while attempting to change the issue type.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_get_current_user_rest.py": [
        {
            "sha1": "44bf9655e9db78941c2c4b6018961ecf93431241",
            "docstring": "\"\"\"\nGet the current user from the client.\n\nArguments:\n- client: An object representing the client to interact with. It is expected to have a '_request' method.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745566318
        },
        {
            "sha1": "25f528a80f6b3e62c3e3c97d4ea73054ce146011",
            "docstring": "\"\"\"\nGet the current user from the client.\n\nArguments:\n- client: An object representing the client to interact with. It is expected to have a '_request' method.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "59c28abdb6909ab4a83bcdedf7c8fb7bdc1644fe",
            "docstring": "\"\"\"\nGet the current user from the client.\n\nArguments:\n- client: An object representing the client to interact with. It is expected to have a '_request' method.\n\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_list_sprints.py": [
        {
            "sha1": "996b46260c233be1d33414636970a4230bffb0a0",
            "docstring": "\"\"\"\nTest the functionality of listing sprints for a given board using a client object.\n\nParameters:\n- client: An object representing the client to interact with the board.\n\"\"\"",
            "last_accessed": 1745566318
        },
        {
            "sha1": "ce85e27e1573f3965484a1dc9b7c6a68a767f76b",
            "docstring": "\"\"\"\nRetrieves a list of open sprints from a specified board using the provided client.\n\nArguments:\n- client: An object representing the client used to make requests.\n\nNo return value.\n\nSide Effects:\n- Modifies the client's '_request' attribute to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "bec0b1ae2237df2ecf78cd5ef6b996d3182012c2",
            "docstring": "\"\"\"\nTest the functionality of listing sprints for a given board using a client object.\n\nParameters:\n- client: An object representing the client to interact with the board.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_add_comment_rest.py": [
        {
            "sha1": "cdeed10ead55a9add75192a450268d1127d05b9f",
            "docstring": "\"\"\"\nDefines a unit test function to test the 'add_comment' method of a client object.\n\nThis function sets the return value of the '_request' method of the client to an empty dictionary when called. It then\ncalls the 'add_comment' method of the client with specific parameters and asserts that the '_request' method is called\nwith the expected arguments.\n\nArguments:\n- client: An instance of a client object to be tested.\n\nSide Effects:\n- Modifies the return value of the '_request' method of the client to an empty dictionary.\n\"\"\"",
            "last_accessed": 1745566318
        },
        {
            "sha1": "9b545e6e21b88b45c2322f19b081e1eb3e117a78",
            "docstring": "\"\"\"\nSets the return value of the _request method of the client to an empty dictionary when called.\n\nArguments:\n- client: An instance of a client object.\n\nSide Effects:\n- Modifies the return value of the _request method of the client to an empty dictionary.\n\"\"\"",
            "last_accessed": 1745566318
        },
        {
            "sha1": "be09ec6356e4e25e0b7a3e93ecd20e188e9db184",
            "docstring": "\"\"\"\nDefines a unit test function to test the 'add_comment' method of a client object.\n\nThis function sets the return value of the '_request' method of the client to an empty dictionary when called. It then\ncalls the 'add_comment' method of the client with specific parameters and asserts that the '_request' method is called\nwith the expected arguments.\n\nArguments:\n- client: An instance of a client object to be tested.\n\nSide Effects:\n- Modifies the return value of the '_request' method of the client to an empty dictionary.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "018a38016528b2159cb5f16081b36ace4e706e47",
            "docstring": "\"\"\"\nSets the return value of the _request method of the client to an empty dictionary when called.\n\nArguments:\n- client: An instance of a client object.\n\nSide Effects:\n- Modifies the return value of the _request method of the client to an empty dictionary.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_create_issue_rest.py": [
        {
            "sha1": "fbbb45aa765951b4206a750f6d60e509ee53c9af",
            "docstring": "\"\"\"\nThis script contains a unit test function to test the creation of an issue using a provided client object. The function\nmocks the client's _request method to return a response with a 'key' attribute. The test asserts that the key returned\nby the create_issue method matches the mocked value.\n\nFunctions:\n- test_create_issue(client): Creates an issue using the provided client object.\n\nArguments:\n- client: An object representing the client used to interact with an issue tracking system.\n\nSide Effects:\n- Modifies the client's _request method to return a response with a 'key' attribute.\n\"\"\"",
            "last_accessed": 1745566325
        },
        {
            "sha1": "ae707d88f42bc1aa64eb31d3dd8ed640040169a3",
            "docstring": "\"\"\"\nCreates an issue using the provided client.\n\nArguments:\n- client: An object representing the client used to interact with an issue tracking system.\n\nSide Effects:\n- Modifies the client's _request method to return a response with a 'key' attribute.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "bcd623e8a81de5db2350d1be602e77b89b9a4730",
            "docstring": "\"\"\"\nThis script contains a unit test function to test the creation of an issue using a provided client object. The function\nmocks the client's _request method to return a response with a 'key' attribute. The test asserts that the key returned\nby the create_issue method matches the mocked value.\n\nFunctions:\n- test_create_issue(client): Creates an issue using the provided client object.\n\nArguments:\n- client: An object representing the client used to interact with an issue tracking system.\n\nSide Effects:\n- Modifies the client's _request method to return a response with a 'key' attribute.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_get_issue_type_rest.py": [
        {
            "sha1": "02cb6c5b938560f5b94e425f77754331beab5895",
            "docstring": "\"\"\"\nThis script defines a test case function to test the get_issue_type method of a client class. The client's _request\nmethod is mocked using MagicMock to simulate a successful response. The get_issue_type method is called with a sample\nissue key, and the result is asserted to be the expected issue type \"Story\". Additionally, it checks if the _request\nmethod was called with the expected arguments.\n\nThe test_get_issue_type function simulates getting the type of an issue from a client. It takes an object representing\nthe client to interact with as an argument. The function modifies the client by mocking the _request method to return a\nsimulated successful response.\n\"\"\"",
            "last_accessed": 1745566329
        },
        {
            "sha1": "363c7ef0ff67772ac6fc8762376f0765f98aaf99",
            "docstring": "\"\"\"\nSimulate getting the type of an issue from a client.\n\nArguments:\n- client: An object representing the client to interact with.\n\nSide Effects:\n- Modifies the client by mocking the _request method to return a simulated successful response.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "6d1948a740143eacea50174c1d32333b879e3d88",
            "docstring": "\"\"\"\nThis script defines a test case function to test the get_issue_type method of a client class. The client's _request\nmethod is mocked using MagicMock to simulate a successful response. The get_issue_type method is called with a sample\nissue key, and the result is asserted to be the expected issue type \"Story\". Additionally, it checks if the _request\nmethod was called with the expected arguments.\n\nThe test_get_issue_type function simulates getting the type of an issue from a client. It takes an object representing\nthe client to interact with as an argument. The function modifies the client by mocking the _request method to return a\nsimulated successful response.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_unassign_issue_success_rest.py": [
        {
            "sha1": "49a9d3d0b1f372f26d2df9f6cf17385230f5f0ba",
            "docstring": "\"\"\"\nSimulate unassigning an issue from a client.\n\nArguments:\n- client: An object representing a client. It is used to interact with the client's system.\n\nSide Effects:\n- Modifies the client object by mocking the _request method to simulate a successful request.\n\"\"\"",
            "last_accessed": 1745566329
        },
        {
            "sha1": "20574fdc4b3e38329ea5f8127cbba12190368d83",
            "docstring": "\"\"\"\nSimulate unassigning an issue from a client.\n\nArguments:\n- client: An object representing a client. It is used to interact with the client's system.\n\nSide Effects:\n- Modifies the client object by mocking the _request method to simulate a successful request.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "fb90fce6f3315d09edbd0c678958474efe3d66f2",
            "docstring": "\"\"\"\nSimulate unassigning an issue from a client.\n\nArguments:\n- client: An object representing a client. It is used to interact with the client's system.\n\nSide Effects:\n- Modifies the client object by mocking the _request method to simulate a successful request.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/core/test_env_fetcher.py": [
        {
            "sha1": "251deb1036dc88abbbbf757f162b07755a716b4c",
            "docstring": "\"\"\"\nThis module contains unit tests for the `EnvFetcher` class from the `core.env_fetcher` module.\n\nThe tests cover the following functionalities:\n- Retrieving environment variables from the operating system.\n- Accessing environment variables using the pytest context.\n- Handling scenarios where requested environment variables are missing, ensuring that appropriate exceptions are raised.\n\nMock objects are utilized to simulate various environments, allowing for comprehensive testing without reliance on\nactual environment variables. The tests validate the expected behavior of the `EnvFetcher` class's methods, including\nthe retrieval and fetching of environment variables.\n\"\"\"",
            "last_accessed": 1745566329
        },
        {
            "sha1": "fb2a09af2039374e1ecf55bcf89791f9068b0206",
            "docstring": "\"\"\"\nRetrieve an environment variable from the OS environment.\n\nArguments:\nNo arguments are passed explicitly, as the function internally fetches an environment variable named \"JIRA_URL\".\n\nReturn:\nThe function returns the value of the \"JIRA_URL\" environment variable, which is a string representing the URL\n\"https://real-env.com\".\n\nSide Effects:\nThis function interacts with the OS environment variables to fetch the value of the specified variable.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "748b609b622a3399a3fc5bde883b40cbd28d5908",
            "docstring": "\"\"\"\nRetrieve an environment variable using the pytest context.\n\nArguments:\nNo arguments.\n\nReturn:\nNo return value.\n\nExceptions:\nNo exceptions raised.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "8077c5d254fb77fc874ce4081ade979ec58a1fa3",
            "docstring": "\"\"\"\nThis function tests the behavior of the 'get' method of the EnvFetcher class when a requested environment variable\nis missing. It simulates a real run environment with no environment variables set and asserts that the method\nraises a MissingConfigVariable exception when attempting to retrieve a missing variable.\n\nArguments:\nNo arguments.\n\nExceptions:\n- MissingConfigVariable: Raised when the 'get' method of the EnvFetcher class is called with a missing variable.\n\nSide Effects:\n- Modifies the environment variables and sys.modules to simulate a scenario with no environment variables set.\n\nReturn:\nNo return value.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "9a27719a9e9fbdbd5559cb2ab86ab2c134c18538",
            "docstring": "\"\"\"\nFetches environment variables for the given keys and returns them as a dictionary.\n\nArguments:\n- keys (list): A list of strings representing the keys of the environment variables to fetch.\n\nReturn:\n- dict: A dictionary where keys are the input keys and values are the corresponding environment variable values.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "9040811fb9fe92b1b33b36751b5c1db7493fe958",
            "docstring": "\"\"\"\nThis module contains unit tests for the `EnvFetcher` class from the `core.env_fetcher` module.\n\nThe tests cover the following functionalities:\n- Retrieving environment variables from the operating system.\n- Accessing environment variables using the pytest context.\n- Handling scenarios where requested environment variables are missing, ensuring that appropriate exceptions are raised.\n\nMock objects are utilized to simulate various environments, allowing for comprehensive testing without reliance on\nactual environment variables. The tests validate the expected behavior of the `EnvFetcher` class's methods, including\nthe retrieval and fetching of environment variables.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_block_cli.py": [
        {
            "sha1": "4a69dbb00e47cbc704ae2efc4460ca1343898abd",
            "docstring": "\"\"\"\nThis module contains test cases for the 'block' command functionality in a command-line interface (CLI) application.\nIt includes two main test functions: `test_block_command`, which verifies the successful blocking of an issue, and\n`test_block_command_exception`, which checks the handling of a `BlockError` exception during the blocking process.\nThe tests leverage pytest fixtures `cli` and `capsys` to simulate the CLI environment and capture output, respectively.\nMock implementations of the issue blocking mechanism are used to ensure isolation from actual system behavior during\ntesting.\n\"\"\"",
            "last_accessed": 1745566329
        },
        {
            "sha1": "ee703db88a6e4a464879a06f363946eef7f15ad1",
            "docstring": "\"\"\"\nExecute a test for a block command function.\n\nArguments:\n- cli: An object representing the command-line interface for testing purposes.\n- capsys: A fixture provided by pytest for capturing stdout and stderr outputs during testing.\n\nSide Effects:\n- Initializes an empty dictionary called 'called' to keep track of function calls.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "c0f643b7ed127199ac1a6ca49a4444923dd1952c",
            "docstring": "\"\"\"\nSets the provided issue key and reason in a dictionary.\n\nArguments:\n- issue_key (str): The key of the issue to be mocked.\n- reason (str): The reason for mocking the issue.\n\nSide Effects:\n- Modifies the global dictionary 'called' by setting 'issue_key' and 'reason' keys with the provided values.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "b53283b4334c23d9f3a9a48c2e4c5dfedf13b3ca",
            "docstring": "\"\"\"\nExecute a test for a block command exception.\n\nArguments:\n- cli (object): An instance of the command-line interface to test.\n- capsys (object): Pytest fixture to capture stdout and stderr outputs.\n\nSide Effects:\n- Executes a test for a block command exception in the provided command-line interface.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "3a75df6309601566a85c32e1b291425184d8d9d8",
            "docstring": "\"\"\"\nSimulates blocking an issue in a system.\n\nArguments:\n- issue_key (str): The key or identifier of the issue to be blocked.\n- reason (str): The reason for blocking the issue.\n\nExceptions:\n- BlockError: Raised when the function fails to block the issue (simulated failure).\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "567fc22476422ad39e687abe837f6b699a5a3574",
            "docstring": "\"\"\"\nThis module contains test cases for the 'block' command functionality in a command-line interface (CLI) application.\nIt includes two main test functions: `test_block_command`, which verifies the successful blocking of an issue, and\n`test_block_command_exception`, which checks the handling of a `BlockError` exception during the blocking process.\nThe tests leverage pytest fixtures `cli` and `capsys` to simulate the CLI environment and capture output, respectively.\nMock implementations of the issue blocking mechanism are used to ensure isolation from actual system behavior during\ntesting.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_vote_points_cli.py": [
        {
            "sha1": "c74c7df47e177df92f260a4c7b604dbdcf7533c0",
            "docstring": "\"\"\"\nSimulate voting for story points in Jira using the provided CLI and capsys fixtures.\n\nArgs:\ncli: A fixture representing the command-line interface for Jira.\ncapsys: A fixture capturing stdout and stderr output.\n\nSide Effects:\n- Modifies the vote_story_points attribute of the cli.jira object using MagicMock.\n\"\"\"",
            "last_accessed": 1745566329
        },
        {
            "sha1": "a30ca6bd3728638e3a71e610fe3515d6c2772690",
            "docstring": "\"\"\"\nSimulate voting for story points in Jira using the provided CLI and capsys fixtures.\nArgs:\n    cli: A fixture representing the command-line interface for Jira.\n    capsys: A fixture capturing stdout and stderr output.\n\nSide Effects:\n    - Modifies the vote_story_points attribute of the cli.jira object using MagicMock.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "26ea7828a79a6a64d1c0fe35868f86ebff7f2772",
            "docstring": "\"\"\"\nSimulate voting for story points in Jira using the provided CLI and capsys fixtures.\n\nThis file contains a test function to simulate the process of voting for story points in Jira. It utilizes fixtures representing the command-line interface for Jira (cli) and fixtures capturing stdout and stderr output (capsys).\n\nArgs:\n- cli: A fixture representing the command-line interface for Jira.\n- capsys: A fixture capturing stdout and stderr output.\n\nSide Effects:\n- Modifies the vote_story_points attribute of the cli.jira object using MagicMock.\n\"\"\"",
            "last_accessed": 1745608614
        },
        {
            "sha1": "21f6e57de152af8a6aa9a26cfc961e0c73431436",
            "docstring": "\"\"\"\nSimulate voting for story points in Jira using the provided CLI and capsys fixtures.\n\nThis file contains a test function to simulate the process of voting for story points in Jira. It utilizes fixtures\nrepresenting the command-line interface for Jira (cli) and fixtures capturing stdout and stderr output (capsys).\n\nArgs:\n- cli: A fixture representing the command-line interface for Jira.\n- capsys: A fixture capturing stdout and stderr output.\n\nSide Effects:\n- Modifies the vote_story_points attribute of the cli.jira object using MagicMock.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_talk_cli.py": [
        {
            "sha1": "6c23a0bc09c26af18a277d2a50be918cb58146a2",
            "docstring": "\"\"\"\nThis module contains unit tests for the `cli_talk` command-line interface, focusing on audio processing, text\ncommunication, and utility functions.\n\nThe tests are organized to validate the functionality of various methods, including `flush_queue`,\n`fuzzy_digit_cleanup`, `word_digits_to_numbers`, `combine_consecutive_digits`, `normalize_issue_references`,\n`initialize_recognizer`, `process_audio_data`, and `process_text_and_communicate`. Each test case utilizes the `pytest`\nframework and incorporates mock objects to simulate dependencies, ensuring that functions respond correctly to both\nexpected inputs and edge cases.\n\nKey functions tested include:\n- `test_flush_queue_empty_exception`: Tests exception handling for an empty queue in `flush_queue`.\n- `test_do_once`: Verifies the return value of the `do_once` function.\n- `test_cli_exec`: Tests execution of the CLI talk function.\n- `test_fuzzy_digit_cleanup`: Validates the fuzzy digit cleanup functionality.\n- `test_word_digits_to_numbers`: Checks conversion of word digits to numerical representation.\n- `test_combine_consecutive_digits`: Ensures consecutive digits are combined correctly.\n- `test_normalize_issue_references`: Tests normalization of issue references in text.\n- `test_flush_queue`: Verifies the flushing of the queue.\n- `test_suppress_stderr`: Tests suppression of standard error output.\n- `test_initialize_recognizer`: Ensures correct initialization of the recognizer.\n- `test_process_text_and_communicate`: Tests processing of text and communication with AI.\n- `test_process_audio_data`: Validates audio data processing for various scenarios.\n- `test_cli_talk`: Tests the main CLI talk function with different audio inputs.\n\nThe module also includes a fixture, `cli_talk_mocks`, which sets up mock objects for testing CLI talk functionality,\nallowing for controlled testing of the command line interactions and audio processing logic.\n\"\"\"",
            "last_accessed": 1745566336
        },
        {
            "sha1": "a995bf61913c2305a28de731b87e1154e9643600",
            "docstring": "\"\"\"\nSimulate a test scenario to ensure an exception is raised when trying to flush an empty queue.\n\nArguments:\nNo arguments.\n\nExceptions:\nNo exceptions raised explicitly in this function.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "d457518d8e9874d88c0cae215a5b96de2985d200",
            "docstring": "\"\"\"\nThis function tests the behavior of the 'do_once' function by asserting that its return value is False.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "47ae04273f2122886f8444a37517692a1dc84b0d",
            "docstring": "\"\"\"\nExecute a test for a command line interface function.\n\nArguments:\n- cli: The command line interface function to be tested.\n- cli_talk_mocks: Mock objects for simulating CLI interaction.\n\nSide Effects:\n- Defines a class Args with attributes prompt (str) and voice (bool).\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "992b1027369ab1f42fe765e8ae310e4f41b2dd08",
            "docstring": "\"\"\"\nThis function performs fuzzy digit cleanup by replacing fuzzy number words with their corresponding numerical\ndigits.\n\nArguments:\n- text (str): A string containing text with fuzzy number words.\n\nReturn:\n- str: The input text with fuzzy number words replaced by their numerical digits.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "aff57cfea277532804c4515e87db93f230e3dc5e",
            "docstring": "\"\"\"\nConverts word representations of numbers to actual numerical digits in a given sentence.\n\nArguments:\n- sentence (str): A string containing words representing numbers.\n\nReturn:\n- str: The input sentence with word numbers converted to numerical digits.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "2ed6b96d3d9d1696860dd147ddc0158bcd0f5b12",
            "docstring": "\"\"\"\nCombine consecutive digits in a string by removing spaces between them.\n\nArguments:\n- s (str): A string containing digits separated by spaces.\n\nReturn:\n- str: A new string where consecutive digits are combined without spaces.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "cb40e7074368dc682c30ea1dba9f1bb8865e3c0d",
            "docstring": "\"\"\"\nNormalize the issue references in a given text.\n\nArguments:\n- text (str): The input text that may contain references to issues.\n\nReturn:\n- str: The input text with normalized issue references.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "72149ff6fecaa180a26a3b93c2d7d40d4bc36884",
            "docstring": "\"\"\"\nFlushes all items from the queue.\n\nArguments:\nNo arguments.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "38c66d4ab397052a6a25b4626dd7453bfd9a3a5a",
            "docstring": "\"\"\"\nSuppresses the standard error output temporarily within a context.\n\nThis function is used as a context manager to suppress any output that would normally be printed to the standard\nerror stream (sys.stderr) within the context block.\n\nArguments:\nNo arguments are passed explicitly to this function.\n\nSide Effects:\nTemporarily suppresses the standard error output within the context block.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "a9a5b06135a0ae3abec6be869bdff9aae891bd26",
            "docstring": "\"\"\"\nInitialize a recognizer for testing purposes using mock objects.\n\nArguments:\n- MockKaldiRecognizer: A mock object representing a Kaldi recognizer.\n- MockModel: A mock object representing a model.\n\nSide Effects:\n- Initializes mock objects for model and recognizer for testing.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "b0780c252002584993c4afc64a95582d0835c46c",
            "docstring": "\"\"\"\nProcesses the given text input for AI completion and communicates the result via CLI.\n\nArguments:\n- cli (bool): A boolean flag indicating whether to communicate the result via CLI.\n- text (str): The text input to be processed by the AI for completion.\n- voice (bool): A boolean flag indicating whether the input text includes voice data.\n\nSide Effects:\n- Communicates the processed text result via the Command Line Interface (CLI).\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "74cfaf043e4aaa506c286b074fe470b997fa4025",
            "docstring": "\"\"\"\nProcesses the given text and communicates the stop command via the provided command line interface.\n\nArguments:\n- cli (CommandLineInterface): The command line interface used to communicate the stop command.\n\nSide Effects:\n- Modifies the global variables 'text' and 'voice'.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "a40fb16e80a5e01416ce2a81d1e64eec8d85e8a1",
            "docstring": "\"\"\"\nProcesses the given text and communicates it using a specified method.\n\nArguments:\n- cli (str): The method used for communication.\n\nSide Effects:\n- Modifies the 'text' and 'voice' variables.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "c4ef21f216d78a36721fef89fe243ec9e48ec107",
            "docstring": "\"\"\"\nProcess valid audio data using mocked JSON loads function.\n\nArguments:\n- mock_json_loads: A MagicMock object representing the mocked JSON loads function.\n\nSide Effects:\n- Creates a MagicMock object 'mock_q'.\n- Creates a MagicMock object 'mock_rec'.\n\nThe function processes audio data by simulating valid audio data retrieval, acceptance, and recognition using\nmocked objects. It then uses the mocked JSON loads function to process the recognized text. The result is the\nrecognized text extracted from the audio data.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "46848bc8ec201dc1f8ba7d48db548fc212bec8f9",
            "docstring": "\"\"\"\nProcesses audio data from a JSON file and performs validation.\n\nArguments:\n- mock_json_loads: A MagicMock object for the json.loads function.\n\nSide Effects:\n- Creates a MagicMock object for the q variable.\n- Creates a MagicMock object for the rec variable.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "f7381e48b47679b3f92167a2823d9a96fca2dabe",
            "docstring": "\"\"\"\nProcesses audio data and handles empty results.\n\nArguments:\n- mock_json_loads: A mock object for JSON deserialization.\n\nSide Effects:\n- Uses MagicMock objects mock_q and mock_rec for testing purposes.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "82372dd3a0ecf117b6a1b0dcf658742f023f9da8",
            "docstring": "\"\"\"\nMocks external dependencies for the CLI talk functionality.\n\nArguments:\nNo arguments.\n\nSide Effects:\n- Mocks the 'flush_queue', 'process_audio_data', 'process_text_and_communicate', 'RawInputStream', 'do_once',\n  'initialize_recognizer', and 'EnvFetcher.get' functions.\n- Sets return values for 'get' and 'initialize_recognizer' functions.\n- Mocks the context manager of the 'RawInputStream' stream.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "d3ded93475e04011fd881fd80082cc5ad6556930",
            "docstring": "\"\"\"\nSimulates a test case for a CLI talk function with voice feature enabled.\n\nArguments:\n- cli_talk_mocks: A MagicMock object containing mocks for CLI talk functionality.\n\nSide Effects:\n- Modifies the `args` object by setting the 'voice' attribute to True.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "7e482cc1cdf3e0656fe89df7a39115cc18138e2f",
            "docstring": "\"\"\"\nTest the CLI talk function with invalid audio input.\n\nArguments:\n- cli_talk_mocks: Mock objects for CLI talk function testing.\n\nSide Effects:\n- Sets up a mock object for the CLI talk function testing.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "69cc353b9fcce13447a861604091398f9c39f1e4",
            "docstring": "\"\"\"\nSimulates a test case where the 'voice' argument is set to True in a CLI talk function.\n\nArguments:\n- cli_talk_mocks: Mock object used for testing CLI talk functionality.\n\nSide Effects:\n- Initializes a MagicMock object to simulate command line arguments with the 'voice' attribute set to True.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "c7f5024e3c52752bda941305d6a438821f22a0ed",
            "docstring": "\"\"\"\nCreate a mock queue for testing purposes.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "687a5efa794c79c0a9db7af68a8ff449e357c70e",
            "docstring": "\"\"\"\nThis module contains unit tests for the `cli_talk` command-line interface, focusing on audio processing, text\ncommunication, and utility functions.\n\nThe tests are organized to validate the functionality of various methods, including `flush_queue`,\n`fuzzy_digit_cleanup`, `word_digits_to_numbers`, `combine_consecutive_digits`, `normalize_issue_references`,\n`initialize_recognizer`, `process_audio_data`, and `process_text_and_communicate`. Each test case utilizes the `pytest`\nframework and incorporates mock objects to simulate dependencies, ensuring that functions respond correctly to both\nexpected inputs and edge cases.\n\nKey functions tested include:\n- `test_flush_queue_empty_exception`: Tests exception handling for an empty queue in `flush_queue`.\n- `test_do_once`: Verifies the return value of the `do_once` function.\n- `test_cli_exec`: Tests execution of the CLI talk function.\n- `test_fuzzy_digit_cleanup`: Validates the fuzzy digit cleanup functionality.\n- `test_word_digits_to_numbers`: Checks conversion of word digits to numerical representation.\n- `test_combine_consecutive_digits`: Ensures consecutive digits are combined correctly.\n- `test_normalize_issue_references`: Tests normalization of issue references in text.\n- `test_flush_queue`: Verifies the flushing of the queue.\n- `test_suppress_stderr`: Tests suppression of standard error output.\n- `test_initialize_recognizer`: Ensures correct initialization of the recognizer.\n- `test_process_text_and_communicate`: Tests processing of text and communication with AI.\n- `test_process_audio_data`: Validates audio data processing for various scenarios.\n- `test_cli_talk`: Tests the main CLI talk function with different audio inputs.\n\nThe module also includes a fixture, `cli_talk_mocks`, which sets up mock objects for testing CLI talk functionality,\nallowing for controlled testing of the command line interactions and audio processing logic.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/rest/ops/set_priority.py": [
        {
            "sha1": "adc7144f6c95fe5f83e6896489d737b0f4bf07b8",
            "docstring": "\"\"\"\nA function to set the priority of an issue in a Jira system.\n\n:param request_fn: Function to send HTTP requests.\n:param issue_key: Key of the issue to update.\n:param priority: Priority level to set for the issue (critical, major, normal, minor).\n\nThe set_priority function takes in a request function, an issue key, and a priority level as arguments. It then updates\nthe priority of the specified issue in the Jira system using the provided request function. The priority level should\nbe one of the following: \"critical\", \"major\", \"normal\", or \"minor\".\n\nThe set_priority function sets the priority of an issue identified by the given issue key. It takes three arguments:\nrequest_fn, a function used to make the request; issue_key, a unique key identifying the issue; and priority, the\npriority\nlevel to set for the issue, which should be one of: \"critical\", \"major\", \"normal\", or \"minor.\n\"\"\"",
            "last_accessed": 1745566152
        },
        {
            "sha1": "2387423974f2a461dfe95b15880455d71c60e79c",
            "docstring": "\"\"\"\nSet the priority of an issue identified by the given issue key.\n\nArguments:\n- request_fn (function): The function used to make the request.\n- issue_key (str): The unique key identifying the issue.\n- priority (str): The priority level to set for the issue. Should be one of: \"critical\", \"major\", \"normal\", or \"minor\".\n\"\"\"",
            "last_accessed": 1745566155
        },
        {
            "sha1": "1abe19a86366d5f7dad4fd9a7aa9f4b73af125fc",
            "docstring": "\"\"\"\nA function to set the priority of an issue in a Jira system.\n\n:param request_fn: Function to send HTTP requests.\n:param issue_key: Key of the issue to update.\n:param priority: Priority level to set for the issue (critical, major, normal, minor).\n\nThe set_priority function takes in a request function, an issue key, and a priority level as arguments. It then updates\nthe priority of the specified issue in the Jira system using the provided request function. The priority level should\nbe one of the following: \"critical\", \"major\", \"normal\", or \"minor\".\n\nThe set_priority function sets the priority of an issue identified by the given issue key. It takes three arguments:\nrequest_fn, a function used to make the request; issue_key, a unique key identifying the issue; and priority, the\npriority\nlevel to set for the issue, which should be one of: \"critical\", \"major\", \"normal\", or \"minor.\n\"\"\"",
            "last_accessed": 1745613270
        },
        {
            "sha1": "c8b47609f6ed6a7df3ba4024a622318d3beef90c",
            "docstring": "\"\"\"\nSet the priority of an issue identified by the given issue key.\n\nArguments:\n- request_fn (function): The function used to make the request.\n- issue_key (str): The unique key identifying the issue.\n- priority (str): The priority level to set for the issue. Should be one of: \"critical\", \"major\", \"normal\", or \"minor\".\n\"\"\"",
            "last_accessed": 1745613376
        },
        {
            "sha1": "5e23e8e5497407f707830b1123482ca211f652e3",
            "docstring": "\"\"\"\nA function to set the priority of an issue in a Jira system.\n\n:param request_fn: Function to send HTTP requests.\n:param issue_key: Key of the issue to update.\n:param priority: Priority level to set for the issue (critical, major, normal, minor).\n\nThe set_priority function takes in a request function, an issue key, and a priority level as arguments. It then updates\nthe priority of the specified issue in the Jira system using the provided request function. The priority level should\nbe one of the following: \"critical\", \"major\", \"normal\", or \"minor\".\n\nThe set_priority function sets the priority of an issue identified by the given issue key. It takes three arguments:\nrequest_fn, a function used to make the request; issue_key, a unique key identifying the issue; and priority, the\npriority\nlevel to set for the issue, which should be one of: \"critical\", \"major\", \"normal\", or \"minor.\n\"\"\"",
            "last_accessed": 1745613376
        }
    ],
    "jira_creator/rest/ops/unblock_issue.py": [
        {
            "sha1": "3934f7bbabc50b323ea26eadcba0b29dd069d9d4",
            "docstring": "\"\"\"\nThis script defines a function 'unblock_issue' that unblocks a JIRA issue by updating the blocked_field and\nreason_field in the issue payload. The function takes two parameters: request_fn, a function to make HTTP requests, and\nissue_key, the key of the JIRA issue to unblock. The function constructs a payload with the updated fields and sends a\nPUT request to the JIRA API to update the specified issue.\n\nThe 'unblock_issue' function takes 'request_fn' as a function parameter used to make requests to the JIRA API and\n'issue_key' as a string parameter representing the key of the JIRA issue to unblock. It modifies the specified fields\nin the JIRA issue to unblock it by updating the blocked_field and reason_field. The function constructs a payload with\nthe updated fields and sends a PUT request to the JIRA API to update the specified issue.\n\"\"\"",
            "last_accessed": 1745566160
        },
        {
            "sha1": "3f99b87dfe6d385bf19c4a74f12494f476565770",
            "docstring": "\"\"\"\nUnblocks a JIRA issue by updating the specified fields.\n\nArguments:\n- request_fn (function): A function used to make requests to the JIRA API.\n- issue_key (str): The key of the JIRA issue to unblock.\n\nSide Effects:\n- Modifies the specified fields in the JIRA issue to unblock it.\n\"\"\"",
            "last_accessed": 1745566163
        },
        {
            "sha1": "c94c12bf33168c7f277a1eb204342ca30f6d1ba5",
            "docstring": "\"\"\"\nThis script defines a function 'unblock_issue' that unblocks a JIRA issue by updating the blocked_field and\nreason_field in the issue payload. The function takes two parameters: request_fn, a function to make HTTP requests, and\nissue_key, the key of the JIRA issue to unblock. The function constructs a payload with the updated fields and sends a\nPUT request to the JIRA API to update the specified issue.\n\nThe 'unblock_issue' function takes 'request_fn' as a function parameter used to make requests to the JIRA API and\n'issue_key' as a string parameter representing the key of the JIRA issue to unblock. It modifies the specified fields\nin the JIRA issue to unblock it by updating the blocked_field and reason_field. The function constructs a payload with\nthe updated fields and sends a PUT request to the JIRA API to update the specified issue.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "17e6e78cbf7ac21968cc8d388eb01a3eec81afc7",
            "docstring": "\"\"\"\nUnblocks a JIRA issue by updating the specified fields.\n\nArguments:\n- request_fn (function): A function used to make requests to the JIRA API.\n- issue_key (str): The key of the JIRA issue to unblock.\n\nSide Effects:\n- Modifies the specified fields in the JIRA issue to unblock it.\n\"\"\"",
            "last_accessed": 1745613386
        },
        {
            "sha1": "437ec7734d15d673e84170a0e3beefe48728ed1f",
            "docstring": "\"\"\"\nThis script defines a function 'unblock_issue' that unblocks a JIRA issue by updating the blocked_field and\nreason_field in the issue payload. The function takes two parameters: request_fn, a function to make HTTP requests, and\nissue_key, the key of the JIRA issue to unblock. The function constructs a payload with the updated fields and sends a\nPUT request to the JIRA API to update the specified issue.\n\nThe 'unblock_issue' function takes 'request_fn' as a function parameter used to make requests to the JIRA API and\n'issue_key' as a string parameter representing the key of the JIRA issue to unblock. It modifies the specified fields\nin the JIRA issue to unblock it by updating the blocked_field and reason_field. The function constructs a payload with\nthe updated fields and sends a PUT request to the JIRA API to update the specified issue.\n\"\"\"",
            "last_accessed": 1745613386
        }
    ],
    "jira_creator/rest/ops/add_to_sprint.py": [
        {
            "sha1": "99b5fd3c4b26070b1a1cb9bec978c590919c702a",
            "docstring": "\"\"\"\nThis module provides a function to add an issue to a sprint in JIRA.\n\nThe function 'add_to_sprint_by_name' takes four parameters:\n- request_fn: a function for making HTTP requests\n- board_id: the ID of the JIRA board\n- issue_key: the key of the issue to be added to the sprint\n- sprint_name: the name of the sprint to which the issue will be added\n\nIf the 'board_id' is not provided, it raises an AddSprintError indicating that the JIRA_BOARD_ID is not set in the\nenvironment.\n\nIt retrieves the list of sprints associated with the board using the 'request_fn' function, then finds the sprint ID\ncorresponding to the provided 'sprint_name'.\n\nIf the sprint ID is not found, it raises an AddSprintError indicating that the sprint with the provided name could not\nbe found.\n\nFinally, it adds the 'issue_key' to the identified sprint using a POST request and prints a success message.\n\nNote: This function assumes the 'request_fn' function is implemented elsewhere to handle HTTP requests.\n\"\"\"",
            "last_accessed": 1745566168
        },
        {
            "sha1": "5c99da4bf5db14aa8c0e0550423e53ca9c3ceb06",
            "docstring": "\"\"\"\nAdd a specified sprint to a JIRA board using its name.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- board_id (str): The ID of the JIRA board to which the sprint will be added.\n- issue_key (str): The key of the JIRA issue to be added to the sprint.\n- sprint_name (str): The name of the sprint to be added to the board.\n\nExceptions:\n- AddSprintError: Raised when the 'board_id' is not provided in the environment variables.\n\"\"\"",
            "last_accessed": 1745566171
        },
        {
            "sha1": "36f64d5c92e19834b097336c3f2f6abcc9135f83",
            "docstring": "\"\"\"\nThis module provides a function to add an issue to a sprint in JIRA.\n\nThe function 'add_to_sprint_by_name' takes four parameters:\n- request_fn: a function for making HTTP requests\n- board_id: the ID of the JIRA board\n- issue_key: the key of the issue to be added to the sprint\n- sprint_name: the name of the sprint to which the issue will be added\n\nIf the 'board_id' is not provided, it raises an AddSprintError indicating that the JIRA_BOARD_ID is not set in the\nenvironment.\n\nIt retrieves the list of sprints associated with the board using the 'request_fn' function, then finds the sprint ID\ncorresponding to the provided 'sprint_name'.\n\nIf the sprint ID is not found, it raises an AddSprintError indicating that the sprint with the provided name could not\nbe found.\n\nFinally, it adds the 'issue_key' to the identified sprint using a POST request and prints a success message.\n\nNote: This function assumes the 'request_fn' function is implemented elsewhere to handle HTTP requests.\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "a32a84fa20bcae550df8206582647961624d2d17",
            "docstring": "\"\"\"\nAdd a specified sprint to a JIRA board using its name.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- board_id (str): The ID of the JIRA board to which the sprint will be added.\n- issue_key (str): The key of the JIRA issue to be added to the sprint.\n- sprint_name (str): The name of the sprint to be added to the board.\n\nExceptions:\n- AddSprintError: Raised when the 'board_id' is not provided in the environment variables.\n\"\"\"",
            "last_accessed": 1745613393
        },
        {
            "sha1": "9a458836ea853e17ee961abf9c2bd3e7ce602205",
            "docstring": "\"\"\"\nThis module provides a function to add an issue to a sprint in JIRA.\n\nThe function 'add_to_sprint_by_name' takes four parameters:\n- request_fn: a function for making HTTP requests\n- board_id: the ID of the JIRA board\n- issue_key: the key of the issue to be added to the sprint\n- sprint_name: the name of the sprint to which the issue will be added\n\nIf the 'board_id' is not provided, it raises an AddSprintError indicating that the JIRA_BOARD_ID is not set in the\nenvironment.\n\nIt retrieves the list of sprints associated with the board using the 'request_fn' function, then finds the sprint ID\ncorresponding to the provided 'sprint_name'.\n\nIf the sprint ID is not found, it raises an AddSprintError indicating that the sprint with the provided name could not\nbe found.\n\nFinally, it adds the 'issue_key' to the identified sprint using a POST request and prints a success message.\n\nNote: This function assumes the 'request_fn' function is implemented elsewhere to handle HTTP requests.\n\"\"\"",
            "last_accessed": 1745613393
        }
    ],
    "jira_creator/commands/cli_list_sprints.py": [
        {
            "sha1": "81a65f418b77917b35ed81e31301ad4c122888a8",
            "docstring": "\"\"\"\nA function to retrieve and list sprints from a Jira board using the provided Jira instance and arguments.\n\nParameters:\n- jira (Jira): An instance of the Jira class to interact with Jira API.\n- args (dict): A dictionary containing arguments including 'board_id' for the board to retrieve sprints from.\n\nReturns:\n- list: A list of sprints retrieved from the specified Jira board.\n\nRaises:\n- Exception: If there is an error while retrieving the sprints, an exception is raised with an error message.\n\nPrints:\n- The retrieved sprints are printed in a formatted manner.\n- Success message if sprints are retrieved successfully.\n- Error message if there is a failure in retrieving sprints.\n\"\"\"",
            "last_accessed": 1745613440
        },
        {
            "sha1": "cc39bee67e543bd9845e5699f5dda12298a0fc59",
            "docstring": "\"\"\"\nRetrieve and display a list of sprints for a specified Jira board.\n\nArguments:\n- jira (JiraClient): An instance of the JiraClient class used to interact with the Jira API.\n- args (Namespace): A namespace object containing parsed command-line arguments.\n\nSide Effects:\n- Prints the list of sprints retrieved from the specified Jira board.\n\nExceptions:\n- If an error occurs during the retrieval of sprints, an exception is raised with a descriptive error message.\n\"\"\"",
            "last_accessed": 1745613440
        },
        {
            "sha1": "e016de401bca85bc8c7087aee0b5ce8e037f7aaf",
            "docstring": "\"\"\"\nA function to retrieve and list sprints from a Jira board using the provided Jira instance and arguments.\n\nParameters:\n- jira (Jira): An instance of the Jira class to interact with Jira API.\n- args (dict): A dictionary containing arguments including 'board_id' for the board to retrieve sprints from.\n\nReturns:\n- list: A list of sprints retrieved from the specified Jira board.\n\nRaises:\n- Exception: If there is an error while retrieving the sprints, an exception is raised with an error message.\n\nPrints:\n- The retrieved sprints are printed in a formatted manner.\n- Success message if sprints are retrieved successfully.\n- Error message if there is a failure in retrieving sprints.\n\"\"\"",
            "last_accessed": 1745613275
        }
    ],
    "jira_creator/commands/cli_add_comment.py": [
        {
            "sha1": "ee3ffae632c367108b93a2581fdb078ee13abc70",
            "docstring": "\"\"\"\nThis module provides a function to interact with Jira by adding comments to an issue. It prompts the user to enter a\ncomment either directly or through a text editor if not provided. The comment is then processed by an AI provider to\nimprove the text before being added to the specified Jira issue.\n\nFunctions:\n- cli_add_comment(jira, ai_provider, comment_prompt, args): Adds a comment to a Jira issue after processing it with an\nAI provider.\n\nExceptions:\n- AddCommentError: Raised when there is an issue adding a comment to the Jira issue.\n- AiError: Raised when there is an error with the AI processing the comment.\n\"\"\"",
            "last_accessed": 1745613440
        },
        {
            "sha1": "268e40dd0fea8d264c59aafcd4ed9de6f092828e",
            "docstring": "\"\"\"\nAdd a comment to a Jira issue via the command line interface.\n\nArguments:\n- jira (JIRA): An instance of the JIRA class for interacting with Jira.\n- ai_provider (str): The AI provider to use for processing the comment.\n- comment_prompt (str): The prompt message for entering the comment.\n- args (argparse.Namespace): Command-line arguments parsed by argparse.\n\nSide Effects:\n- If args.text is provided, the comment is set to args.text.\n- If args.text is not provided, a temporary Markdown file is created with a prompt message.\nThe user is prompted to enter the comment using the default text editor (or vim if not set).\nThe content of the temporary file is then read as the comment.\n\nNote: This function is designed for command-line interaction to add comments to Jira issues.\n\"\"\"",
            "last_accessed": 1745613440
        },
        {
            "sha1": "737be16dd7e902ff7671a383d43a11f62321f823",
            "docstring": "\"\"\"\nThis module provides a function to interact with Jira by adding comments to an issue. It prompts the user to enter a\ncomment either directly or through a text editor if not provided. The comment is then processed by an AI provider to\nimprove the text before being added to the specified Jira issue.\n\nFunctions:\n- cli_add_comment(jira, ai_provider, comment_prompt, args): Adds a comment to a Jira issue after processing it with an\nAI provider.\n\nExceptions:\n- AddCommentError: Raised when there is an issue adding a comment to the Jira issue.\n- AiError: Raised when there is an error with the AI processing the comment.\n\"\"\"",
            "last_accessed": 1745613275
        }
    ],
    "jira_creator/commands/cli_validate_issue.py": [
        {
            "sha1": "dc990af6cba3fbf8ebdb8811f5ac764648859ebd",
            "docstring": "\"\"\"\nThis module provides functionality to validate Jira issues based on various criteria, utilizing AI for quality checks\non specific fields.\n\nKey functions include:\n\n- `get_cache_path()`: Returns the path to the cache file for storing issue hashes.\n- `sha256(text)`: Computes the SHA-256 hash of the given text.\n- `load_cache()`: Loads the cached issue data from the cache file, if it exists.\n- `save_cache(data)`: Saves the provided data to the cache file, creating necessary directories if they do not exist.\n- `load_and_cache_issue(issue_key)`: Loads the cache and retrieves cached values for a specified issue key.\n- Validation functions: A series of functions that check various aspects of an issue to ensure it meets specific\ncriteria.\n- `cli_validate_issue(fields, ai_provider)`: The main function that orchestrates the validation of an issue by\nextracting relevant fields, performing validations, and utilizing AI for field quality checks.\n\nThe module is designed to be used in a command-line interface context, providing feedback on issues that do not meet\nthe specified validation rules.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "433d6edc682af856ef94d389d2675d854bec531e",
            "docstring": "\"\"\"\nReturn the path to the cache file for storing AI hashes.\n\nReturns:\nstr: A string representing the file path to the cache file for AI hashes.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "25baba054a0345eeaab14fa0ddd2e66e4e769993",
            "docstring": "\"\"\"\nReturn the SHA-256 hash of the input text.\n\nArguments:\n- text (str): The text to be hashed using the SHA-256 algorithm.\n\nReturn:\n- str: The hexadecimal representation of the SHA-256 hash of the input text.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "50a9142be682a0b716359479a827a56b86e7ad45",
            "docstring": "\"\"\"\nLoad cached data from a file if it exists, otherwise return an empty dictionary.\n\nArguments:\nNo arguments.\n\nReturn:\ndict: A dictionary containing the cached data if the cache file exists, otherwise an empty dictionary.\n\nExceptions:\nNo exceptions are raised in this function.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "3d9f105f744ee3fc1e2b0763e23e63874b5ab70f",
            "docstring": "\"\"\"\nSummary:\nSave_cache function retrieves the directory path for the cache and stores it in the cache_dir variable.\n\nArguments:\n- data: The data to be cached.\n\nReturn:\nThis function does not return anything.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "bc11841fe75643f5cb7bfa0b8ec170408ee91606",
            "docstring": "\"\"\"\nLoad cache and get the cached values for a given issue key.\n\nArguments:\n- issue_key (str): A string representing the key of the issue for which cached values are retrieved.\n\nReturn:\n- tuple: A tuple containing the cache (dict) and the cached values for the specified issue key (dict).\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "43db05dd393c45241bb368fbde63c3fe4668ce2c",
            "docstring": "\"\"\"\nValidate if the issue is assigned when it's in progress.\n\nArguments:\n- status (str): The status of the issue.\n- assignee (str): The person assigned to the issue.\n- problems (list): A list to store validation problems.\n- issue_status (dict): A dictionary to track the status of the issue.\n\nExceptions:\nNone\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "0d523b57a091f471cdd0b551c9aeebb14dbfe972",
            "docstring": "\"\"\"\nValidate if an issue has an assigned epic link.\n\nArguments:\n- issue_type (str): The type of the issue (e.g., \"Bug\", \"Story\", \"Epic\").\n- status (str): The status of the issue.\n- epic_link (str): The epic link assigned to the issue.\n- problems (list): A list to store validation problems.\n- issue_status (dict): A dictionary to track the status of different aspects of the issue.\n\nExceptions:\nNone\n\nSide Effects:\nModifies the 'problems' list and updates the 'issue_status' dictionary based on the validation result.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "398b737b4afd6f32cca140eec83f2f86118eaa0a",
            "docstring": "\"\"\"\nValidate if the issue is assigned to a sprint when in progress.\n\nArguments:\n- status (str): The status of the issue.\n- sprint_field (bool): Indicates if the issue is assigned to a sprint.\n- problems (list): A list to store validation problems.\n- issue_status (dict): A dictionary to track the issue status.\n\nSide Effects:\n- Modifies the 'problems' list if the issue is in progress but not assigned to a sprint.\n- Updates the 'issue_status' dictionary to reflect whether the issue is assigned to a sprint or not.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "3b75f5df314ace713e49bfceb8b365ad4b89d103",
            "docstring": "\"\"\"\nValidate if priority is set.\n\nArguments:\n- priority (bool): Represents whether priority is set or not.\n- problems (list): A list to store validation problems.\n- issue_status (dict): A dictionary to track the status of different fields.\n\nSide Effects:\n- Modifies the 'problems' list by appending a message if priority is not set.\n- Updates the 'issue_status' dictionary with the status of the 'Priority' field.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "6fddd4eb9899f0b053a120bbf68f2645ec27cb1f",
            "docstring": "\"\"\"\nValidate if story points are assigned, unless the status is 'Refinement' or 'New'.\n\nArguments:\n- story_points (int): The number of story points assigned to a task.\n- status (str): The current status of the task.\n- problems (list): A list to store validation problems.\n- issue_status (dict): A dictionary to track the status of different issues.\n\nExceptions:\nNone\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "8b6bacbf92eddff2e22342aaaee87613a13c1c22",
            "docstring": "\"\"\"\nValidate if blocked issues have a reason.\n\nArguments:\n- blocked_value (str): A string indicating if the issue is blocked.\n- blocked_reason (str): The reason for blocking the issue.\n- problems (list): A list to store validation problems.\n- issue_status (dict): A dictionary containing the status of the issue.\n\nExceptions:\nNone\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "8cc8ff5e0c8a71df4f818026f04f70d31724dc09",
            "docstring": "\"\"\"\nValidate the fields of an issue using an AI provider to ensure compliance with specified criteria.\n\nArguments:\n- fields (dict): A dictionary containing the fields of the issue to be validated.\n- ai_provider (str): The name or identifier of the AI provider used for validation.\n\nReturn:\n- tuple: A tuple containing two elements:\n  - problems (list): A list of validation issues encountered during the process.\n  - issue_status (dict): A dictionary tracking the validation status of each field.\n\nSide Effects:\n- Initializes an empty list 'problems' to store validation issues.\n- Initializes an empty dictionary 'issue_status' to track the validation status of each field.\n- Modifies a cache to store validation results for the issue.\n\"\"\"",
            "last_accessed": 1745566251
        },
        {
            "sha1": "2cceacfa890046d4c56d5e6e7533f02998235249",
            "docstring": "\"\"\"\nThis module provides functionality to validate Jira issues based on various criteria, utilizing AI for quality checks\non specific fields.\n\nKey functions include:\n\n- `get_cache_path()`: Returns the path to the cache file for storing issue hashes.\n- `sha256(text)`: Computes the SHA-256 hash of the given text.\n- `load_cache()`: Loads the cached issue data from the cache file, if it exists.\n- `save_cache(data)`: Saves the provided data to the cache file, creating necessary directories if they do not exist.\n- `load_and_cache_issue(issue_key)`: Loads the cache and retrieves cached values for a specified issue key.\n- Validation functions: A series of functions that check various aspects of an issue to ensure it meets specific\ncriteria.\n- `cli_validate_issue(fields, ai_provider)`: The main function that orchestrates the validation of an issue by\nextracting relevant fields, performing validations, and utilizing AI for field quality checks.\n\nThe module is designed to be used in a command-line interface context, providing feedback on issues that do not meet\nthe specified validation rules.\n\"\"\"",
            "last_accessed": 1745613276
        },
        {
            "sha1": "80ed3dd7ef2fdff735fb5981217c5b1c5f26be26",
            "docstring": "\"\"\"\nValidate the fields of an issue using an AI provider to ensure compliance with specified criteria.\n\nArguments:\n- fields (dict): A dictionary containing the fields of the issue to be validated.\n- ai_provider (str): The name or identifier of the AI provider used for validation.\n\nReturn:\n- tuple: A tuple containing two elements:\n    - problems (list): A list of validation issues encountered during the process.\n    - issue_status (dict): A dictionary tracking the validation status of each field.\n\nSide Effects:\n- Initializes an empty list 'problems' to store validation issues.\n- Initializes an empty dictionary 'issue_status' to track the validation status of each field.\n- Modifies a cache to store validation results for the issue.\n\"\"\"",
            "last_accessed": 1745610003
        },
        {
            "sha1": "926896ab1100c0f6189c5d23b9584bc3a2ce42bf",
            "docstring": "\"\"\"\nValidate a field using an AI provider by comparing field hashes and checking the quality of the field value.\n\nArguments:\n- field_name (str): The name of the field being validated.\n- field_value (str): The value of the field being validated.\n- field_hash (str): The hash of the current field value.\n- cached_field_hash (str): The cached hash of the field value.\n- ai_provider (object): The AI provider object used to improve text quality.\n- problems (list): A list to store validation problems encountered.\n- issue_status (dict): A dictionary to track the validation status of each field.\n\nSide Effects:\n- Modifies the 'problems' list if validation issues are found.\n- Modifies the 'issue_status' dictionary to track the validation status of each field.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "7f27dbbd264bbb35f0804cae3b9a5b66b164d7bc",
            "docstring": "\"\"\"\nValidate the fields of an issue using an AI provider to ensure compliance with specified criteria.\n\nArguments:\n- fields (dict): A dictionary containing the fields of the issue to be validated.\n- ai_provider (str): The name or identifier of the AI provider used for validation.\n\nReturn:\n- tuple: A tuple containing two elements:\n  - problems (list): A list of validation issues encountered during the process.\n  - issue_status (dict): A dictionary tracking the validation status of each field.\n\nSide Effects:\n- Initializes an empty list 'problems' to store validation issues.\n- Initializes an empty dictionary 'issue_status' to track the validation status of each field.\n- Modifies a cache to store validation results for the issue.\n\"\"\"",
            "last_accessed": 1745613441
        }
    ],
    "jira_creator/commands/cli_set_story_points.py": [
        {
            "sha1": "a33c8dae357b944549b31c696fb1bdc6d3b61c4c",
            "docstring": "\"\"\"\nThis module provides a function for setting story points in Jira using the command-line interface (CLI).\n\nThe 'cli_set_story_points' function takes two arguments:\n- jira: A Jira connection object.\n- args: A dictionary containing the arguments passed in the command-line interface. It should contain a key 'points'\nrepresenting the story points to be set for the Jira issue.\n\nThe function attempts to convert the story points provided in the arguments to an integer. If successful, it calls the\n'set_story_points' method of the Jira client to set the story points for a specific issue identified by the issue key\nprovided in the arguments.\n\nIf the conversion to an integer fails, an error message is displayed, and the function returns False. If setting the\nstory points fails due to a 'SetStoryPointsError', the function raises the exception with an error message.\n\nThe function provides feedback messages on the success or failure of setting the story points.\n\nNote: The 'SetStoryPointsError' is imported from 'exceptions.exceptions'.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "e87b613a07fe6b7285c3188fe3d3f87818f95b15",
            "docstring": "\"\"\"\nSet the story points for a Jira issue in the command-line interface.\n\nArguments:\n- jira: A Jira connection object.\n- args: A dictionary containing the arguments passed in the command-line interface.\n  It should contain a key 'points' representing the story points to be set for the Jira issue.\n\nReturn:\n- False if the provided story points are not an integer.\n\nExceptions:\n- No exceptions are raised explicitly in this function.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "676cf93549c79b2d6fccba262caadc2851dd2134",
            "docstring": "\"\"\"\nThis module provides a function for setting story points in Jira using the command-line interface (CLI).\n\nThe 'cli_set_story_points' function takes two arguments:\n- jira: A Jira connection object.\n- args: A dictionary containing the arguments passed in the command-line interface. It should contain a key 'points'\nrepresenting the story points to be set for the Jira issue.\n\nThe function attempts to convert the story points provided in the arguments to an integer. If successful, it calls the\n'set_story_points' method of the Jira client to set the story points for a specific issue identified by the issue key\nprovided in the arguments.\n\nIf the conversion to an integer fails, an error message is displayed, and the function returns False. If setting the\nstory points fails due to a 'SetStoryPointsError', the function raises the exception with an error message.\n\nThe function provides feedback messages on the success or failure of setting the story points.\n\nNote: The 'SetStoryPointsError' is imported from 'exceptions.exceptions'.\n\"\"\"",
            "last_accessed": 1745613319
        }
    ],
    "jira_creator/commands/cli_set_priority.py": [
        {
            "sha1": "e304c7911107a4737e56f27ffffe9c6fb99f03a2",
            "docstring": "\"\"\"\nSet the priority of a Jira issue using the provided Jira instance and arguments.\n\nThis script defines a function 'cli_set_priority' that takes a Jira instance and arguments as input to set the priority\nof a Jira issue. It catches exceptions of type 'SetPriorityError' and raises them if there is an error setting the\npriority.\n\nArguments:\n- jira: A Jira instance used to set the priority of the issue.\n- args: An object containing the issue key and the priority to be set.\n\nReturn:\n- True if the priority is set successfully.\n\nExceptions:\n- SetPriorityError: Raised when there is an error setting the priority of the Jira issue.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "d5006e80aad710294edf7c83fd99eb337a6757b1",
            "docstring": "\"\"\"\nSet the priority of a Jira issue using the provided Jira instance and arguments.\n\nArguments:\n- jira: A Jira instance used to set the priority of the issue.\n- args: An object containing the issue key and the priority to be set.\n\nReturn:\n- True if the priority is set successfully.\n\nExceptions:\n- SetPriorityError: Raised when there is an error setting the priority of the Jira issue.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "fa53d2e05d5ea9b1378f1192cfb8572175c7218c",
            "docstring": "\"\"\"\nSet the priority of a Jira issue using the provided Jira instance and arguments.\n\nThis script defines a function 'cli_set_priority' that takes a Jira instance and arguments as input to set the priority\nof a Jira issue. It catches exceptions of type 'SetPriorityError' and raises them if there is an error setting the\npriority.\n\nArguments:\n- jira: A Jira instance used to set the priority of the issue.\n- args: An object containing the issue key and the priority to be set.\n\nReturn:\n- True if the priority is set successfully.\n\nExceptions:\n- SetPriorityError: Raised when there is an error setting the priority of the Jira issue.\n\"\"\"",
            "last_accessed": 1745613320
        }
    ],
    "jira_creator/commands/cli_add_to_sprint.py": [
        {
            "sha1": "13a4154a356279b4320b0032d851b3a7c092fdb9",
            "docstring": "\"\"\"\nAdds an issue to a sprint in Jira.\n\nThis script provides a function 'cli_add_to_sprint' that adds an issue to a sprint in Jira. It takes two arguments:\n- jira (JIRA): An instance of the JIRA client.\n- args (Namespace): A namespace object containing 'issue_key' and 'sprint_name' attributes.\n\nThe function returns a boolean value:\n- True if the issue was successfully added to the sprint.\n\nIt may raise an 'AddSprintError' exception if an error occurs during the process.\n\nSide effects include:\n- Printing a success message if the issue is added to the sprint.\n- Printing an error message and raising 'AddSprintError' if an error occurs during the process.\n\"\"\"",
            "last_accessed": 1745566265
        },
        {
            "sha1": "32b8fb0892b22e5dffaab38efa74c32165c9c7da",
            "docstring": "\"\"\"\nAdds an issue to a sprint in Jira.\n\nArguments:\n- jira (JIRA): An instance of the JIRA client.\n- args (Namespace): A namespace object containing 'issue_key' and 'sprint_name' attributes.\n- issue_key (str): The key of the issue to be added to the sprint.\n- sprint_name (str): The name of the sprint to add the issue to.\n\nReturn:\n- bool: True if the issue was successfully added to the sprint.\n\nExceptions:\n- AddSprintError: Raised when an error occurs while adding the issue to the sprint.\n\nSide Effects:\n- Prints a success message if the issue is added to the sprint.\n- Prints an error message and raises AddSprintError if an error occurs during the process.\n\"\"\"",
            "last_accessed": 1745613445
        },
        {
            "sha1": "356065950854b1052fedf6f7069cd7e3d27b8334",
            "docstring": "\"\"\"\nAdds an issue to a sprint in Jira.\n\nThis script provides a function 'cli_add_to_sprint' that adds an issue to a sprint in Jira. It takes two arguments:\n- jira (JIRA): An instance of the JIRA client.\n- args (Namespace): A namespace object containing 'issue_key' and 'sprint_name' attributes.\n\nThe function returns a boolean value:\n- True if the issue was successfully added to the sprint.\n\nIt may raise an 'AddSprintError' exception if an error occurs during the process.\n\nSide effects include:\n- Printing a success message if the issue is added to the sprint.\n- Printing an error message and raising 'AddSprintError' if an error occurs during the process.\n\"\"\"",
            "last_accessed": 1745613320
        },
        {
            "sha1": "afd5ca73364503864b717c5ac94d40976b27d810",
            "docstring": "\"\"\"\nAdds an issue to a sprint in Jira.\n\nThis script provides a function 'cli_add_to_sprint' that adds an issue to a sprint in Jira. It takes two arguments:\n- jira (JIRA): An instance of the JIRA client.\n- args (Namespace): A namespace object containing 'issue_key' and 'sprint_name' attributes.\n\nThe function returns a boolean value:\n- True if the issue was successfully added to the sprint.\n\nIt may raise an 'AddSprintError' exception if an error occurs during the process.\n\nSide effects include:\n- Printing a success message if the issue is added to the sprint.\n- Printing an error message and raising 'AddSprintError' if an error occurs during the process.\n\"\"\"",
            "last_accessed": 1745613445
        }
    ],
    "jira_creator/commands/cli_add_flag.py": [
        {
            "sha1": "7aa7bdc92c1bd841950d1582c132a165f88d1448",
            "docstring": "\"\"\"\nAdds a flag to a Jira issue specified by the given issue key.\n\nArgs:\njira (Jira): An instance of the Jira client used to interact with the Jira API.\nargs (Namespace): A namespace object containing the command-line arguments passed to the script.\nIt should contain the 'issue_key' attribute which represents the key of the Jira issue to add the flag to.\n\nReturns:\ndict: A dictionary representing the response received after adding the flag to the Jira issue.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "c32485890b420be92dd89ab38f8a5601400edc99",
            "docstring": "\"\"\"\nAdds a flag to a Jira issue specified by the given issue key.\n\nArgs:\n    jira (Jira): An instance of the Jira client used to interact with the Jira API.\n    args (Namespace): A namespace object containing the command-line arguments passed to the script.\n        It should contain the 'issue_key' attribute which represents the key of the Jira issue to add the flag to.\n\nReturns:\n    dict: A dictionary representing the response received after adding the flag to the Jira issue.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "33a517ae95f0569c9a984060d1fea89e35625cb6",
            "docstring": "\"\"\"\nAdds a flag to a Jira issue specified by the given issue key.\n\nArgs:\njira (Jira): An instance of the Jira client used to interact with the Jira API.\nargs (Namespace): A namespace object containing the command-line arguments passed to the script.\nIt should contain the 'issue_key' attribute which represents the key of the Jira issue to add the flag to.\n\nReturns:\ndict: A dictionary representing the response received after adding the flag to the Jira issue.\n\"\"\"",
            "last_accessed": 1745613320
        }
    ],
    "jira_creator/providers/__init__.py": [
        {
            "sha1": "852cad4a10b07a517d045c43d9582c0203c6bd14",
            "docstring": "\"\"\"\nThis module provides a function to retrieve AI providers based on the specified name. The function takes a name\nparameter, which is a string representing the desired AI provider. It attempts to import the corresponding provider\nclass based on the name and returns an instance of that provider.\n\nIf the specified provider is not found or if there is an error during initialization, the function falls back to a\ndefault NoAIProvider and prints a warning message.\n\nThe supported AI providers include OpenAI, GPT4All, InstructLab, BART, and DeepSeek. If a provider is not found or if\nthere is an error, appropriate warning messages are printed.\n\nNote: The module assumes the existence of provider classes like OpenAIProvider, GPT4AllProvider, InstructLabProvider,\nBARTProvider, DeepSeekProvider, and NoAIProvider in the respective modules.\n\nUsage:\nprovider = get_ai_provider(\"openai\")\nprovider.do_something()\n\nReturns:\nAn instance of the specified AI provider class or a NoAIProvider instance if the specified provider is not found or if\nthere is an error during initialization.\n\"\"\"",
            "last_accessed": 1745566276
        },
        {
            "sha1": "4c77f5edb3c463cc4158a04bc595d3d74198d483",
            "docstring": "\"\"\"\nConverts the input name to lowercase and returns the corresponding AI provider.\n\nArguments:\n- name (str): A string representing the name of an AI provider.\n\nReturns:\n- An instance of the specified AI provider class or a NoAIProvider instance if the specified provider is not found\nor if there is an error during initialization.\n\nExceptions:\n- AiProviderError: Raised if the specified provider is not supported or if there is an error during initialization.\n\nSide Effects:\n- May print a warning message if there is a failure to load the provider.\n\"\"\"",
            "last_accessed": 1745613446
        },
        {
            "sha1": "9dd957a3c7b5c8c13f8b77d5b233b4c856f8d05b",
            "docstring": "\"\"\"\nThis module provides a function to retrieve AI providers based on the specified name. The function takes a name\nparameter, which is a string representing the desired AI provider. It attempts to import the corresponding provider\nclass based on the name and returns an instance of that provider.\n\nIf the specified provider is not found or if there is an error during initialization, the function falls back to a\ndefault NoAIProvider and prints a warning message.\n\nThe supported AI providers include OpenAI, GPT4All, InstructLab, BART, and DeepSeek. If a provider is not found or if\nthere is an error, appropriate warning messages are printed.\n\nNote: The module assumes the existence of provider classes like OpenAIProvider, GPT4AllProvider, InstructLabProvider,\nBARTProvider, DeepSeekProvider, and NoAIProvider in the respective modules.\n\nUsage:\nprovider = get_ai_provider(\"openai\")\nprovider.do_something()\n\nReturns:\nAn instance of the specified AI provider class or a NoAIProvider instance if the specified provider is not found or if\nthere is an error during initialization.\n\"\"\"",
            "last_accessed": 1745613446
        }
    ],
    "jira_creator/tests/conftest.py": [
        {
            "sha1": "db4272c9042b652916a15da3fd14e3c5ea84cd55",
            "docstring": "\"\"\"\nThis module contains pytest fixtures for testing the JiraCLI class and its interactions with the JiraClient.\n\nFixtures include:\n- `client`: A mocked instance of the JiraClient with a mocked request method.\n- `patch_subprocess_call`: Patches the subprocess.call method to prevent actual command execution.\n- `patch_tempfile_namedtemporaryfile`: Mocks the NamedTemporaryFile to simulate file handling without creating real\nfiles.\n- `cli`: A fixture that creates a mocked instance of JiraCLI, including mocked Jira methods and an AI provider.\n- `mock_search_issues`: Mocks the search_issues method of the Jira client to return a predefined list of issues.\n- `mock_cache_path`: Mocks the get_cache_path function to return a dummy file path for testing.\n- `mock_load_cache`: Mocks the load_cache function to return a dummy cache for testing purposes.\n- `mock_save_cache`: Mocks the save_cache function to prevent actual file writing during tests.\n- `mock_load_and_cache_issue`: Mocks the load_and_cache_issue function to return predefined cached values.\n\nThese fixtures facilitate unit testing of the JiraCLI functionality while isolating dependencies and avoiding side\neffects.\n\"\"\"",
            "last_accessed": 1745566284
        },
        {
            "sha1": "a0ff48b3e1ebcd789999eca2406fd0834c88e624",
            "docstring": "\"\"\"\nCreates a Jira client for interacting with Jira services.\n\nReturns:\nJiraClient: An instance of JiraClient for interacting with Jira services.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "98c95719f4d42feb0ed5ce6df96bfd84d52dee5a",
            "docstring": "\"\"\"\nMocks the subprocess.call function from the commands.cli_edit_issue module.\n\nThis function is used as a context manager to mock the subprocess.call function from the commands.cli_edit_issue\nmodule by returning a predefined value of 0. It is typically used in unit tests to simulate the behavior of\nsubprocess.call without actually executing the command.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "211cdc7fb0778ad5899c00a5a412ee475bb84f05",
            "docstring": "\"\"\"\nMocks the behavior of tempfile.NamedTemporaryFile for testing purposes.\n\nArguments:\nNo arguments.\n\nReturn:\nYields a MagicMock object representing a fake file with edited content and a fake file path.\n\nSide Effects:\nModifies the behavior of tempfile.NamedTemporaryFile for the duration of the context manager.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "63b5c5f742d10fb44764e2d5a14892203bd1e258",
            "docstring": "\"\"\"\nApply patches to provided functions for testing purposes.\n\nArguments:\n- patch_subprocess_call (fixture): Patch fixture for subprocess.call function.\n- patch_tempfile_namedtemporaryfile (fixture): Patch fixture for tempfile.NamedTemporaryFile function.\n\"\"\"",
            "last_accessed": 1745566290
        },
        {
            "sha1": "5c5b4e5fb806009de6cd3e4ee91eb7314057dad0",
            "docstring": "\"\"\"\nThis function mocks the cache path used in the 'cli_validate_issue' command.\nIt temporarily replaces the 'get_cache_path' function with a dummy file path and yields the dummy file path.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "05bf9aea1056e6bf51f16f7435365796614e0d74",
            "docstring": "\"\"\"\nMock a cache load operation for testing purposes.\n\nArguments:\n- mock_cache_path (str): The path to the cache being mocked.\n\nSide Effects:\n- Temporarily patches the 'load_cache' function to return a dummy cache dictionary.\n\nReturns:\n- None\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "ebed3249177f34483818f3cf4b5b9f0f687eb524",
            "docstring": "\"\"\"\nMocks the save_cache function for testing purposes.\n\nArguments:\n- mock_cache_path (str): The path to the mock cache.\n\nYields:\n- mock_save: A mock object for the save_cache function.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "6f9a25fe18f9c6bcc6e5d7590cd472641c27c5d6",
            "docstring": "\"\"\"\nMocks the 'load_and_cache_issue' function for testing purposes.\n\nArguments:\n- mock_save_cache: A mock object used for saving cache.\n\nSide Effects:\n- Mocks the 'load_and_cache_issue' function using the provided 'mock_save_cache' object.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "c85d11724a5ac2240773649bc69d7665bea04e2a",
            "docstring": "\"\"\"\nThis module contains pytest fixtures for testing the JiraCLI class and its interactions with the JiraClient.\n\nFixtures include:\n- `client`: A mocked instance of the JiraClient with a mocked request method.\n- `patch_subprocess_call`: Patches the subprocess.call method to prevent actual command execution.\n- `patch_tempfile_namedtemporaryfile`: Mocks the NamedTemporaryFile to simulate file handling without creating real\nfiles.\n- `cli`: A fixture that creates a mocked instance of JiraCLI, including mocked Jira methods and an AI provider.\n- `mock_search_issues`: Mocks the search_issues method of the Jira client to return a predefined list of issues.\n- `mock_cache_path`: Mocks the get_cache_path function to return a dummy file path for testing.\n- `mock_load_cache`: Mocks the load_cache function to return a dummy cache for testing purposes.\n- `mock_save_cache`: Mocks the save_cache function to prevent actual file writing during tests.\n- `mock_load_and_cache_issue`: Mocks the load_and_cache_issue function to return predefined cached values.\n\nThese fixtures facilitate unit testing of the JiraCLI functionality while isolating dependencies and avoiding side\neffects.\n\"\"\"",
            "last_accessed": 1745610486
        },
        {
            "sha1": "a1993b8e12fb0e50cf56f7fb8cf525e55500b464",
            "docstring": "\"\"\"\nApply patches to provided functions for testing purposes.\n\nArguments:\n- patch_subprocess_call (fixture): Patch fixture for subprocess.call function.\n- patch_tempfile_namedtemporaryfile (fixture): Patch fixture for tempfile.NamedTemporaryFile function.\n\"\"\"",
            "last_accessed": 1745610008
        },
        {
            "sha1": "8e05bfd5b2bf85f66debe9146a5499f7219c7975",
            "docstring": "\"\"\"\nApply patches to provided functions for testing purposes.\n\nArguments:\n- patch_subprocess_call (fixture): Patch fixture for subprocess.call function.\n- patch_tempfile_namedtemporaryfile (fixture): Patch fixture for tempfile.NamedTemporaryFile function.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "d8f66d8bb52143b06bf24ca90cf210f6cd7df667",
            "docstring": "\"\"\"\nApply patches to provided functions for testing purposes.\n\nArguments:\n- cli: Command-line interface object.\n\"\"\"",
            "last_accessed": 1745610489
        },
        {
            "sha1": "58437b8eeb820a8b7c85a94d4618da2139e4cec8",
            "docstring": "\"\"\"\nThis module contains pytest fixtures for testing the JiraCLI class and its interactions with the JiraClient.\n\nFixtures include:\n- `client`: A mocked instance of the JiraClient with a mocked request method.\n- `patch_subprocess_call`: Patches the subprocess.call method to prevent actual command execution.\n- `patch_tempfile_namedtemporaryfile`: Mocks the NamedTemporaryFile to simulate file handling without creating real\nfiles.\n- `cli`: A fixture that creates a mocked instance of JiraCLI, including mocked Jira methods and an AI provider.\n- `mock_search_issues`: Mocks the search_issues method of the Jira client to return a predefined list of issues.\n- `mock_cache_path`: Mocks the get_cache_path function to return a dummy file path for testing.\n- `mock_load_cache`: Mocks the load_cache function to return a dummy cache for testing purposes.\n- `mock_save_cache`: Mocks the save_cache function to prevent actual file writing during tests.\n- `mock_load_and_cache_issue`: Mocks the load_and_cache_issue function to return predefined cached values.\n\nThese fixtures facilitate unit testing of the JiraCLI functionality while isolating dependencies and avoiding side\neffects.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "5d21278d9dbfa92c3edf4d7c11e25dce6063b831",
            "docstring": "\"\"\"\nApply patches to provided functions for testing purposes.\n\nArguments:\n- cli: Command-line interface object.\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/rest/test_prompt_library.py": [
        {
            "sha1": "a5ceaa92d7fe022a5c77e3b0270da94cc9d4a9b3",
            "docstring": "\"\"\"\nThis file contains unit tests for the PromptLibrary class in the rest.prompts module.\n\nIt includes tests to ensure that prompts exist for all issue types defined in the IssueType enum. The tests verify the\nexistence and content of prompts for various issue types, as well as handling scenarios where a template file is not\nfound, raising a FileNotFoundError.\n\nFunctions:\n- test_prompt_exists_for_all_types: Tests the existence and correctness of prompts for all issue types in the IssueType\nenum.\n- test_prompt_raises_file_not_found_error: Simulates a file not found error when attempting to retrieve a prompt,\nensuring appropriate exception handling.\n\nDependencies:\n- unittest.mock: For mocking functions and simulating file not found scenarios.\n- pytest: For the testing framework and exception assertion.\n\"\"\"",
            "last_accessed": 1745566299
        },
        {
            "sha1": "94d97adf1cd7a570ea66e2f69324d00da9b9cb00",
            "docstring": "\"\"\"\nCheck if a prompt exists for all types in the IssueType enum.\n\nArguments:\nNo arguments.\n\nReturn:\nNo return value.\n\nExceptions:\nThis function does not raise any exceptions.\n\nSide Effects:\nThis function asserts the existence and content of prompts for different types in the IssueType enum by interacting\nwith PromptLibrary.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "1812bbe275e8386a4677b8e4d1c3af42eb938ac3",
            "docstring": "\"\"\"\nSimulates a file not found error when trying to retrieve a prompt from PromptLibrary.\n\nArguments:\nNo arguments.\n\nExceptions:\n- FileNotFoundError: Raised when the specified template file is not found.\n\nSide Effects:\n- Modifies the behavior of os.path.exists to return False, simulating a file not found error.\n- Raises a FileNotFoundError with a specific message pattern when trying to retrieve a prompt.\n\"\"\"",
            "last_accessed": 1745613447
        },
        {
            "sha1": "3999eef4338e1f82c80101d7fb0e001bba056dec",
            "docstring": "\"\"\"\nThis file contains unit tests for the PromptLibrary class in the rest.prompts module.\n\nIt includes tests to ensure that prompts exist for all issue types defined in the IssueType enum. The tests verify the\nexistence and content of prompts for various issue types, as well as handling scenarios where a template file is not\nfound, raising a FileNotFoundError.\n\nFunctions:\n- test_prompt_exists_for_all_types: Tests the existence and correctness of prompts for all issue types in the IssueType\nenum.\n- test_prompt_raises_file_not_found_error: Simulates a file not found error when attempting to retrieve a prompt,\nensuring appropriate exception handling.\n\nDependencies:\n- unittest.mock: For mocking functions and simulating file not found scenarios.\n- pytest: For the testing framework and exception assertion.\n\"\"\"",
            "last_accessed": 1745613447
        }
    ],
    "jira_creator/tests/rest/ops/test_set_story_epic_rest.py": [
        {
            "sha1": "c740d9aa7330907c5e4672f57aae79a96fc5263f",
            "docstring": "\"\"\"\nThis file contains a test function to set story epic in a client using a mocked request. The function calls the\n'set_story_epic' method on the client object with specific parameters and then asserts that a PUT request is made with\nthe correct payload and endpoint using a mocked '_request' method.\n\nThe 'test_set_story_epic_rest' function is used to test the setting of the story epic REST endpoint. It takes a 'client'\nparameter, which is an instance of a client class used to make REST API requests. Within the function, the '_request'\nattribute of the client is modified by replacing it with a MagicMock object. The function then sets the story epic using\nspecific parameters and asserts that a PUT request is made with the correct payload and endpoint.\n\nSide Effects:\n- Modifies the _request attribute of the client by replacing it with a MagicMock object.\n\"\"\"",
            "last_accessed": 1745566305
        },
        {
            "sha1": "55c107be3ae632b0edbd7e33ef61df4f58cebe75",
            "docstring": "\"\"\"\nSet the story epic REST endpoint test.\n\nArguments:\n- client: An instance of a client class used to make REST API requests.\n\nSide Effects:\n- Modifies the _request attribute of the client by replacing it with a MagicMock object.\n\"\"\"",
            "last_accessed": 1745566307
        },
        {
            "sha1": "b45e504b8dd1446782776d7c651542afc4405b0e",
            "docstring": "\"\"\"\nThis file contains a test function to set story epic in a client using a mocked request. The function calls the\n'set_story_epic' method on the client object with specific parameters and then asserts that a PUT request is made with\nthe correct payload and endpoint using a mocked '_request' method.\n\nThe 'test_set_story_epic_rest' function is used to test the setting of the story epic REST endpoint. It takes a 'client'\nparameter, which is an instance of a client class used to make REST API requests. Within the function, the '_request'\nattribute of the client is modified by replacing it with a MagicMock object. The function then sets the story epic using\nspecific parameters and asserts that a PUT request is made with the correct payload and endpoint.\n\nSide Effects:\n- Modifies the _request attribute of the client by replacing it with a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613452
        },
        {
            "sha1": "bc1c75b8961aa2270f28a945e077a1ba120c5145",
            "docstring": "\"\"\"\nSet the story epic REST endpoint test.\n\nArguments:\n- client: An instance of a client class used to make REST API requests.\n\nSide Effects:\n- Modifies the _request attribute of the client by replacing it with a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613452
        }
    ],
    "jira_creator/tests/rest/ops/test_get_acceptance_criteria_rest.py": [
        {
            "sha1": "4e79de8f78481b7a4d26c099c53ae51e51f6b92e",
            "docstring": "\"\"\"\nThis file contains a test case for the 'get_acceptance_criteria' method in the 'client' class.\nThe test mocks the '_request' method to simulate fetching the acceptance criteria field value from JIRA.\nIt then calls the 'get_acceptance_criteria' method with a specific test identifier and asserts that the correct\ndescription is returned.\n\ntest_get_acceptance_criteria(client):\nRetrieve acceptance criteria for a given client.\n\nArguments:\n- client: An object representing the client for which acceptance criteria needs to be retrieved.\n\nThis function mocks the _request method of the client object to simulate getting the description, specifically the\nacceptance criteria field.\n\"\"\"",
            "last_accessed": 1745566310
        },
        {
            "sha1": "72d08927d1312cb34e5bec206c0034d03bb42c2d",
            "docstring": "\"\"\"\nRetrieve acceptance criteria for a given client.\n\nArguments:\n- client: An object representing the client for which acceptance criteria needs to be retrieved.\n\nThis function mocks the _request method of the client object to simulate getting the description, specifically the\nacceptance criteria field.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "3cd4dcd1c761eb1ce24cde9575253024226ec6b0",
            "docstring": "\"\"\"\nThis file contains a test case for the 'get_acceptance_criteria' method in the 'client' class.\nThe test mocks the '_request' method to simulate fetching the acceptance criteria field value from JIRA.\nIt then calls the 'get_acceptance_criteria' method with a specific test identifier and asserts that the correct\ndescription is returned.\n\ntest_get_acceptance_criteria(client):\nRetrieve acceptance criteria for a given client.\n\nArguments:\n- client: An object representing the client for which acceptance criteria needs to be retrieved.\n\nThis function mocks the _request method of the client object to simulate getting the description, specifically the\nacceptance criteria field.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_build_payload_rest.py": [
        {
            "sha1": "031a8ac37ec1abe647f36268f88efa5662a97560",
            "docstring": "\"\"\"\nThis file contains test functions for the build_payload method of a client class.\nThe test_build_payload_epic function tests the build_payload method with \"epic\" as the issue type,\nwhile the test_build_payload_non_epic function tests it with a non-\"epic\" issue type.\nMock values are set for client attributes such as epic_field, project_key, priority, affects_version, and\ncomponent_name.\nAssertions are used to verify the presence or absence of the epic field in the result fields based on the issue type provided.\n\ntest_build_payload_epic(client):\n- Builds a payload for an epic in a project.\n- Arguments:\n- client (Client): An object representing the client connection.\n- Side Effects:\n- Modifies client attributes: epic_field, project_key, priority, affects_version, component_name.\n\ntest_build_payload_non_epic(client):\n- Builds a payload using client attributes for a non-epic issue.\n- Arguments:\n- client (Client): An object containing attributes related to the client.\n- Side Effects:\n- Modifies the client object by setting values for epic_field, project_key, priority, affects_version, and\ncomponent_name.\n\"\"\"",
            "last_accessed": 1745566314
        },
        {
            "sha1": "c28d1e9361115a2f3d48f07be2c636085cde1f70",
            "docstring": "\"\"\"\nBuilds a payload for an epic in a project.\n\nArguments:\n- client (Client): An object representing the client connection.\n\nSide Effects:\n- Modifies client attributes: epic_field, project_key, priority, affects_version, component_name.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "1f1a94653c0c97d510d5c6bc915b0b012c25df82",
            "docstring": "\"\"\"\nBuilds a payload using client attributes for a non-epic issue.\n\nArguments:\n- client (Client): An object containing attributes related to the client.\n\nSide Effects:\n- Modifies the client object by setting values for epic_field, project_key, priority, affects_version, and component_name.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "379d981ec280d3c80d6d198caa0185767b9a01e3",
            "docstring": "\"\"\"\nThis file contains test functions for the build_payload method of a client class.\nThe test_build_payload_epic function tests the build_payload method with \"epic\" as the issue type,\nwhile the test_build_payload_non_epic function tests it with a non-\"epic\" issue type.\nMock values are set for client attributes such as epic_field, project_key, priority, affects_version, and\ncomponent_name.\nAssertions are used to verify the presence or absence of the epic field in the result fields based on the issue type provided.\n\ntest_build_payload_epic(client):\n- Builds a payload for an epic in a project.\n- Arguments:\n- client (Client): An object representing the client connection.\n- Side Effects:\n- Modifies client attributes: epic_field, project_key, priority, affects_version, component_name.\n\ntest_build_payload_non_epic(client):\n- Builds a payload using client attributes for a non-epic issue.\n- Arguments:\n- client (Client): An object containing attributes related to the client.\n- Side Effects:\n- Modifies the client object by setting values for epic_field, project_key, priority, affects_version, and\ncomponent_name.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_unblock_issue_rest.py": [
        {
            "sha1": "e430e0a011cdf5b8f86d48e8c4ba4b47485d6a8b",
            "docstring": "\"\"\"\nThis script defines a test function to verify that the 'unblock_issue' method in a client class is calling the expected\nfields with the correct values. It sets up a fake request function to capture the method, path, and json data sent by\nthe client during the test. The test asserts that the method is 'PUT', the path matches the expected JIRA API endpoint,\nand the json data includes specific fields with predefined values.\n\nThe 'test_unblock_issue_calls_expected_fields' function is used to test if a specific client function correctly calls\nexpected fields. It takes a 'client' object as an argument and modifies the 'called' dictionary to keep track of called\nfields.\n\nThe 'fake_request' function is used to make a fake HTTP request with the specified method, path, and optional JSON\ndata. It returns an empty dictionary representing the response from the fake request.\n\"\"\"",
            "last_accessed": 1745566323
        },
        {
            "sha1": "9adec495047e9730f9b8e84c777c91707f45bcab",
            "docstring": "\"\"\"\nSummary:\nThis function is used to test if a specific client function correctly calls expected fields.\n\nArguments:\n- client (object): The client object being tested.\n\nSide Effects:\n- Modifies the 'called' dictionary to keep track of called fields.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "bbd9dc3362b5f4bf6d3c2121bd28f51cb48cfced",
            "docstring": "\"\"\"\nMake a fake HTTP request with the specified method and path.\n\nArguments:\n- method (str): The HTTP method to use for the request (e.g., 'GET', 'POST').\n- path (str): The path or endpoint to send the request to.\n- json (dict): Optional. A dictionary containing the JSON data to be sent in the request body.\n- **kwargs: Additional keyword arguments that are not used in this function.\n\nReturn:\n- dict: An empty dictionary representing the response from the fake request.\n\"\"\"",
            "last_accessed": 1745566325
        },
        {
            "sha1": "68c098bd29e4732ac6d2a7ed06c718306d014254",
            "docstring": "\"\"\"\nThis script defines a test function to verify that the 'unblock_issue' method in a client class is calling the expected\nfields with the correct values. It sets up a fake request function to capture the method, path, and json data sent by\nthe client during the test. The test asserts that the method is 'PUT', the path matches the expected JIRA API endpoint,\nand the json data includes specific fields with predefined values.\n\nThe 'test_unblock_issue_calls_expected_fields' function is used to test if a specific client function correctly calls\nexpected fields. It takes a 'client' object as an argument and modifies the 'called' dictionary to keep track of called\nfields.\n\nThe 'fake_request' function is used to make a fake HTTP request with the specified method, path, and optional JSON\ndata. It returns an empty dictionary representing the response from the fake request.\n\"\"\"",
            "last_accessed": 1745608590
        },
        {
            "sha1": "29bcdc7a6d00916a9b7fbaf4d54d647c7135a9b8",
            "docstring": "\"\"\"\nMake a fake HTTP request with the specified method and path.\n\nArguments:\n- method (str): The HTTP method to use for the request (e.g., 'GET', 'POST').\n- path (str): The path or endpoint to send the request to.\n- json_data (dict): Optional. A dictionary containing the JSON data to be sent in the request body.\n- **kwargs: Additional keyword arguments that are not used in this function.\n\nReturn:\n- dict: An empty dictionary representing the response from the fake request.\n\"\"\"",
            "last_accessed": 1745608593
        },
        {
            "sha1": "69142d6c32467a87244c663d5797e4d12d049ae1",
            "docstring": "\"\"\"\nThis script defines a test function to verify that the 'unblock_issue' method in a client class is calling the expected\nfields with the correct values. It sets up a fake request function to capture the method, path, and json data sent by\nthe client during the test. The test asserts that the method is 'PUT', the path matches the expected JIRA API endpoint,\nand the json data includes specific fields with predefined values.\n\nThe 'test_unblock_issue_calls_expected_fields' function is used to test if a specific client function correctly calls\nexpected fields. It takes a 'client' object as an argument and modifies the 'called' dictionary to keep track of called\nfields.\n\nThe 'fake_request' function is used to make a fake HTTP request with the specified method, path, and optional JSON\ndata. It returns an empty dictionary representing the response from the fake request.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "e321b50e2db18131b6a245334af500ab9fbd395e",
            "docstring": "\"\"\"\nMake a fake HTTP request with the specified method and path.\n\nArguments:\n- method (str): The HTTP method to use for the request (e.g., 'GET', 'POST').\n- path (str): The path or endpoint to send the request to.\n- json_data (dict): Optional. A dictionary containing the JSON data to be sent in the request body.\n- **kwargs: Additional keyword arguments that are not used in this function.\n\nReturn:\n- dict: An empty dictionary representing the response from the fake request.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/rest/ops/test_block_issue_rest.py": [
        {
            "sha1": "920598933b2e5f73f6d8926dbac9c23a8f39ffe1",
            "docstring": "\"\"\"\nThis file contains a unit test to validate that the block_issue method of the client class is calling the expected\nfields with the correct payload. The test uses a MagicMock object to mock the _request method of the client and checks\nif it is called once with the appropriate arguments. The payload is constructed using values fetched from the\nEnvFetcher class.\n\nTested Function:\ntest_block_issue_calls_expected_fields(client)\n- Summary: Mocks the client's request method and calls the block_issue method with specified parameters.\n- Arguments:\n- client (object): The client object used to interact with an external service.\n- Return: This function does not return any value.\n- Exceptions: This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745566328
        },
        {
            "sha1": "6b0abec284f7efe2daa8eadb108ef399c936fbab",
            "docstring": "\"\"\"\nSummary:\nMocks the client's request method and calls the block_issue method with specified parameters.\n\nArguments:\n- client (object): The client object used to interact with an external service.\n\nReturn:\nThis function does not return any value.\n\nExceptions:\nThis function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745566329
        },
        {
            "sha1": "a5da98814eeea5abb17f54c779aa2df163efe7bb",
            "docstring": "\"\"\"\nThis file contains a unit test to validate that the block_issue method of the client class is calling the expected\nfields with the correct payload. The test uses a MagicMock object to mock the _request method of the client and checks\nif it is called once with the appropriate arguments. The payload is constructed using values fetched from the\nEnvFetcher class.\n\nTested Function:\ntest_block_issue_calls_expected_fields(client)\n- Summary: Mocks the client's request method and calls the block_issue method with specified parameters.\n- Arguments:\n- client (object): The client object used to interact with an external service.\n- Return: This function does not return any value.\n- Exceptions: This function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745613453
        },
        {
            "sha1": "ebeb1f6aa5eac01bd20bcc8b14bf130f4c079cee",
            "docstring": "\"\"\"\nSummary:\nMocks the client's request method and calls the block_issue method with specified parameters.\n\nArguments:\n- client (object): The client object used to interact with an external service.\n\nReturn:\nThis function does not return any value.\n\nExceptions:\nThis function does not raise any exceptions.\n\"\"\"",
            "last_accessed": 1745613453
        }
    ],
    "jira_creator/tests/commands/test_add_flag_cli.py": [
        {
            "sha1": "f5642fd2038835374aa450db6b9e8a47f0dfc477",
            "docstring": "\"\"\"\nThis script contains a unit test function 'test_add_flag' that tests the 'add_flag' method of a CLI application.\nIt mocks the 'jira' method using MagicMock and asserts the expected behavior of the 'add_flag' method by checking the\noutput and method calls.\nThe test case validates that the 'add_flag' method returns a success status and calls the 'jira.add_flag' method with\nthe correct argument.\n\nFunctions:\n- test_add_flag(cli, capsys): Simulates adding a flag to a Jira issue using a mock method. It takes 'cli' as an object\ncontaining the Jira client and 'capsys' as a Pytest fixture capturing stdout and stderr output. It modifies the\n'add_flag' method of the Jira client by replacing it with a MagicMock object.\n\"\"\"",
            "last_accessed": 1745566334
        },
        {
            "sha1": "5470a3efeb3016263df71c6b0d9dd52ff911e13c",
            "docstring": "\"\"\"\nSimulates adding a flag to a Jira issue using a mock method.\n\nArguments:\n- cli (object): An object containing the Jira client.\n- capsys (object): Pytest fixture capturing stdout and stderr output.\n\nSide Effects:\n- Modifies the 'add_flag' method of the Jira client by replacing it with a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "72cba8bf1ff338def84bed81b3b738f39047a8dc",
            "docstring": "\"\"\"\nThis script contains a unit test function 'test_add_flag' that tests the 'add_flag' method of a CLI application.\nIt mocks the 'jira' method using MagicMock and asserts the expected behavior of the 'add_flag' method by checking the\noutput and method calls.\nThe test case validates that the 'add_flag' method returns a success status and calls the 'jira.add_flag' method with\nthe correct argument.\n\nFunctions:\n- test_add_flag(cli, capsys): Simulates adding a flag to a Jira issue using a mock method. It takes 'cli' as an object\ncontaining the Jira client and 'capsys' as a Pytest fixture capturing stdout and stderr output. It modifies the\n'add_flag' method of the Jira client by replacing it with a MagicMock object.\n\n\"\"\"",
            "last_accessed": 1745610680
        },
        {
            "sha1": "172772e038b572924a6c257387671286628a7695",
            "docstring": "\"\"\"\nThis script contains a unit test function 'test_add_flag' that tests the 'add_flag' method of a CLI application.\nIt mocks the 'jira' method using MagicMock and asserts the expected behavior of the 'add_flag' method by checking the\noutput and method calls.\nThe test case validates that the 'add_flag' method returns a success status and calls the 'jira.add_flag' method with\nthe correct argument.\n\nFunctions:\n- test_add_flag(cli, capsys): Simulates adding a flag to a Jira issue using a mock method. It takes 'cli' as an object\ncontaining the Jira client and 'capsys' as a Pytest fixture capturing stdout and stderr output. It modifies the\n'add_flag' method of the Jira client by replacing it with a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_list_issues_empty_and_exception_cli.py": [
        {
            "sha1": "c2525d7e0fdd08ff2fc38ec38c0d049bb2ae73a5",
            "docstring": "\"\"\"\nThis file contains unit tests for the 'list_issues' method in the 'cli' module.\nIt includes tests for the scenarios where the list of issues is empty and when an exception is raised.\nMocking of the 'list_issues' method is done using MagicMock to control its behavior during testing.\nThe tests verify the expected output messages when listing issues fails or when no issues are found.\n\nFunctions:\n- test_list_issues_empty(cli, capsys): Mocks the list_issues method of a Jira CLI object to return an empty list for\ntesting purposes.\n- test_list_issues_fail(cli, capsys): Simulates a failure scenario for listing issues in Jira.\n\nArguments:\n- cli: A Jira CLI object.\n- capsys: Pytest fixture to capture stdout and stderr output.\n\nExceptions:\n- ListIssuesError: Raised when an error occurs while listing Jira issues.\n\nSide Effects:\n- Modifies the behavior of the list_issues method of the provided Jira CLI object.\n- Modifies the behavior of the 'list_issues' method in the Jira command line interface to raise a 'ListIssuesError'\nwith message \"fail\".\n\"\"\"",
            "last_accessed": 1745566338
        },
        {
            "sha1": "4a6f88bae270b6017b10d3f9510963023afa9d34",
            "docstring": "\"\"\"\nMock the list_issues method of a Jira CLI object to return an empty list for testing purposes.\n\nArgs:\n    cli: A Jira CLI object.\n    capsys: Pytest fixture to capture stdout and stderr output.\n\nSide Effects:\n    Modifies the behavior of the list_issues method of the provided Jira CLI object.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "01bfd75afed2dd19b1d0701699ce0e3040ff1833",
            "docstring": "\"\"\"\nSimulates a failure scenario for listing issues in Jira.\n\nArguments:\n- cli: Jira command line interface object.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nExceptions:\n- ListIssuesError: Raised when an error occurs while listing Jira issues.\n\nSide Effects:\n- Modifies the behavior of the 'list_issues' method in the Jira command line interface to raise a 'ListIssuesError'\nwith message \"fail\".\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "a4b40947157b272980987aca64473689a67cae86",
            "docstring": "\"\"\"\nThis file contains unit tests for the 'list_issues' method in the 'cli' module.\nIt includes tests for the scenarios where the list of issues is empty and when an exception is raised.\nMocking of the 'list_issues' method is done using MagicMock to control its behavior during testing.\nThe tests verify the expected output messages when listing issues fails or when no issues are found.\n\nFunctions:\n- test_list_issues_empty(cli, capsys): Mocks the list_issues method of a Jira CLI object to return an empty list for\ntesting purposes.\n- test_list_issues_fail(cli, capsys): Simulates a failure scenario for listing issues in Jira.\n\nArguments:\n- cli: A Jira CLI object.\n- capsys: Pytest fixture to capture stdout and stderr output.\n\nExceptions:\n- ListIssuesError: Raised when an error occurs while listing Jira issues.\n\nSide Effects:\n- Modifies the behavior of the list_issues method of the provided Jira CLI object.\n- Modifies the behavior of the 'list_issues' method in the Jira command line interface to raise a 'ListIssuesError'\nwith message \"fail\".\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_lint_cli.py": [
        {
            "sha1": "70b99e217143bc60db80621c62460ac612baf8d5",
            "docstring": "\"\"\"\nUnit tests for the lint command of a command-line interface (CLI) application, focusing on error handling, success scenarios, and exception management.\n\nThis module includes three main test functions:\n\n1. `test_lint_command_flags_errors`: Tests the lint command with a JIRA issue containing various lint issues, asserting that the correct error messages are displayed for each identified issue.\n\n2. `test_lint_command_success`: Tests the lint command with a valid JIRA issue that passes all lint checks, verifying that the success message is displayed correctly.\n\n3. `test_lint_command_exception`: Simulates an exception during the linting process by raising a `LintError`, checking that the appropriate error message is displayed when the exception occurs.\n\nThe tests utilize the pytest framework and mock objects to simulate the behavior of the command-line interface and JIRA API. Ensure that all dependencies are installed before running the tests.\n\"\"\"",
            "last_accessed": 1745566345
        },
        {
            "sha1": "094a3c838e184234d3ea81867c4c49a472e5d33c",
            "docstring": "\"\"\"\nSimulate linting command flags and handle errors.\n\nArguments:\n- mock_save_cache: A mock object for saving cache.\n- cli: An object representing the command-line interface.\n- capsys: A fixture for capturing stdout and stderr outputs.\n\nSide Effects:\n- Modifies the 'ai_provider' attribute of the 'cli' object to a MagicMock object.\n- Sets up a side effect for the 'improve_text' method of 'ai_provider' to return \"too short\" for texts \"Bad\" and \"Meh\", and \"OK\" for other texts.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "040f13aa240dd1bd90b0a9ea0dd80422be644213",
            "docstring": "\"\"\"\nExecute a test for the successful execution of a lint command.\n\nArguments:\n- mock_save_cache: An object used for mocking cache saving.\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nSide Effects:\n- Sets the 'ai_provider' attribute of the 'cli' object to a MagicMock object.\n- Configures the 'improve_text' method of the 'ai_provider' object to return \"OK\" for any prompt and text inputs.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "d6383f7d713f0b73275fb46f1a81199275c0ae0a",
            "docstring": "\"\"\"\nMock and test the lint command exception handling.\n\nArguments:\n- mock_save_cache: MagicMock object for saving cache.\n- cli: Command Line Interface object.\n- capsys: Pytest built-in fixture for capturing stdout and stderr.\n\nExceptions:\n- LintError: Raised when a simulated fetch failure occurs during the lint command execution.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "d19ca35823f06b3f024e1d1c14651538de0327a9",
            "docstring": "\"\"\"\nUnit tests for the lint command of a command-line interface (CLI) application, focusing on error handling, success\nscenarios, and exception management.\n\nThis module includes three main test functions:\n\n1. `test_lint_command_flags_errors`: Tests the lint command with a JIRA issue containing various lint issues, asserting\nthat the correct error messages are displayed for each identified issue.\n\n2. `test_lint_command_success`: Tests the lint command with a valid JIRA issue that passes all lint checks, verifying\nthat the success message is displayed correctly.\n\n3. `test_lint_command_exception`: Simulates an exception during the linting process by raising a `LintError`, checking\nthat the appropriate error message is displayed when the exception occurs.\n\nThe tests utilize the pytest framework and mock objects to simulate the behavior of the command-line interface and JIRA\nAPI. Ensure that all dependencies are installed before running the tests.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_create_dry_run_cli.py": [
        {
            "sha1": "569e7b4c782da0cf86910338044d27a96d9c97e8",
            "docstring": "\"\"\"\nThis file contains unit tests for the create_issue function in the CLI module.\nIt includes test cases for creating an issue in dry run mode and for handling exceptions during issue creation.\nMock objects are used to simulate interactions with the Jira API and user inputs.\nThe test_create_dry_run function tests the creation of an issue in dry run mode by mocking Jira API calls and user\ninput.\nThe test_create_issue_with_exception function tests the handling of exceptions during issue creation by mocking a\nCreateIssueError.\nBoth test cases utilize the pytest framework for assertions and mock objects for simulating behavior.\n\"\"\"",
            "last_accessed": 1745566358
        },
        {
            "sha1": "64976df50c9fbb5bd9cf255bad2f4c1b48f2e0fe",
            "docstring": "\"\"\"\nSet up a mock AI provider for testing purposes.\n\nArguments:\n- cli: An object representing the command line interface.\n\nSide Effects:\n- Modifies the `ai_provider` attribute of the `cli` object by assigning a MagicMock object to it.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "9c2e25c221c952a69304913956f1f1526b0d27f9",
            "docstring": "\"\"\"\nSet up a mock AI provider for the CLI to create an issue with an exception.\n\nArguments:\n- cli: An instance of the CLI class that will be used to create an issue with an exception.\n\nSide Effects:\n- Modifies the 'ai_provider' attribute of the provided 'cli' instance by setting it to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "c985074d6376ea638427b4d60a7e23ad4bae727c",
            "docstring": "\"\"\"\nThis file contains unit tests for the create_issue function in the CLI module.\nIt includes test cases for creating an issue in dry run mode and for handling exceptions during issue creation.\nMock objects are used to simulate interactions with the Jira API and user inputs.\nThe test_create_dry_run function tests the creation of an issue in dry run mode by mocking Jira API calls and user\ninput.\nThe test_create_issue_with_exception function tests the handling of exceptions during issue creation by mocking a\nCreateIssueError.\nBoth test cases utilize the pytest framework for assertions and mock objects for simulating behavior.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_change_type_prints_cli.py": [
        {
            "sha1": "23e1db5ec217fe3ca8bea01d31b405c2f53d17dd",
            "docstring": "\"\"\"\nThis file contains a unit test for the 'change_type' method in the 'cli' module. The test verifies that the method\ncorrectly changes the issue type in Jira and prints the expected output message. It mocks the 'change_issue_type'\nmethod using a MagicMock object and captures the output using capsys. The test case asserts that the printed output\nmatches the expected message indicating a successful change of issue type.\n\nThe 'test_change_type_prints' function simulates changing the type of an issue and prints the result. It takes two\narguments:\n- cli: Command-line interface object for interacting with Jira.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nSide Effects:\n- Mocks the change_issue_type method to return True.\n\"\"\"",
            "last_accessed": 1745566364
        },
        {
            "sha1": "39b040bd5193bd8a9745301024462810e9d1e40d",
            "docstring": "\"\"\"\nSimulate changing the type of an issue and print the result.\n\nArguments:\n- cli: Command-line interface object for interacting with Jira.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nSide Effects:\n- Mocks the change_issue_type method to return True.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "a3c2828b546ad9eae87083fb18009adc3f3015d1",
            "docstring": "\"\"\"\nThis file contains a unit test for the 'change_type' method in the 'cli' module. The test verifies that the method\ncorrectly changes the issue type in Jira and prints the expected output message. It mocks the 'change_issue_type'\nmethod using a MagicMock object and captures the output using capsys. The test case asserts that the printed output\nmatches the expected message indicating a successful change of issue type.\n\nThe 'test_change_type_prints' function simulates changing the type of an issue and prints the result. It takes two\narguments:\n- cli: Command-line interface object for interacting with Jira.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nSide Effects:\n- Mocks the change_issue_type method to return True.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_search_with_options_cli.py": [
        {
            "sha1": "a8bcb4365d967950632edce522aa9e8db0610c4b",
            "docstring": "\"\"\"\nUnit tests for the CLI search and list functionality of a JIRA integration.\n\nThis module contains a series of tests that validate the behavior of the CLI's search and list issue functionalities.\nIt uses the pytest framework along with unittest.mock to simulate JIRA responses and capture output for verification.\n\nTests include:\n- Searching for issues based on JQL queries and verifying the correct output is printed.\n- Handling cases where no issues are found and ensuring the appropriate message is displayed.\n- Managing exceptions raised during search operations and confirming error messages are printed.\n- Filtering listed issues by summary to ensure only relevant results are shown.\n\nDependencies:\n- pytest\n- unittest.mock\n- core.env_fetcher (for environment variable fetching)\n- exceptions.exceptions (for handling specific errors)\n\"\"\"",
            "last_accessed": 1745566370
        },
        {
            "sha1": "18667aa112f1fad9f25d9161f8fd74c64cf19932",
            "docstring": "\"\"\"\nSimulate a search functionality for issues using a mock search.\n\nArguments:\n- cli (object): An object representing the command-line interface.\n- mock_search_issues (object): A mock object used to simulate the search for issues.\n\nSide Effects:\n- Prepares the 'Args' object to simulate CLI arguments for the search.\n\nNote: This function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "99a8dbac33fb471f15dfcafa20a6142c570953c6",
            "docstring": "\"\"\"\nSimulate a test scenario where the search_issues function returns an empty list of issues.\n\nArguments:\n- cli: An object representing the command-line interface.\n\nSide Effects:\n- Modifies the search_issues function of the Jira client to return an empty list of issues.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "44540e663d1808e7c115827076aedcf2d45ffdef",
            "docstring": "\"\"\"\nMock the search_issues method of the provided cli object to raise a SearchError exception with the message \"An\nerror occurred\".\n\nArguments:\n- cli: An object representing the command-line interface (CLI) that contains a method for searching issues.\n\nExceptions:\n- SearchError: Raised when the search_issues method of the cli object encounters an error.\n\nSide Effects:\n- Modifies the behavior of the search_issues method in the cli object to raise a SearchError exception with the\nspecified message.\n- Captures and verifies the printed output when the exception is raised during the search operation.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "fa85ba03241a5c97fac999f31a23ddf2180b86e5",
            "docstring": "\"\"\"\nRetrieve and filter a list of JIRA issues based on a provided summary filter.\n\nArguments:\n- cli: An instance of a JIRA command-line interface.\n- capsys: A fixture to capture stdout and stderr output.\n\nReturn: N/A\n\nExceptions: N/A\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "321b65117083cc8219ef89d25cafdd91a8d35cae",
            "docstring": "\"\"\"\nUnit tests for the CLI search and list functionality of a JIRA integration.\n\nThis module contains a series of tests that validate the behavior of the CLI's search and list issue functionalities.\nIt uses the pytest framework along with unittest.mock to simulate JIRA responses and capture output for verification.\n\nTests include:\n- Searching for issues based on JQL queries and verifying the correct output is printed.\n- Handling cases where no issues are found and ensuring the appropriate message is displayed.\n- Managing exceptions raised during search operations and confirming error messages are printed.\n- Filtering listed issues by summary to ensure only relevant results are shown.\n\nDependencies:\n- pytest\n- unittest.mock\n- core.env_fetcher (for environment variable fetching)\n- exceptions.exceptions (for handling specific errors)\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_set_priority_cli.py": [
        {
            "sha1": "31d3e35b00c56b75f30eae41e0b49df24c8a5ea1",
            "docstring": "\"\"\"\nTest the functionality of setting the priority for a JIRA ticket using the provided CLI object.\n\nThis script defines a test function 'test_set_priority' that takes a CLI object as an argument. The function sets the\npriority for a JIRA ticket by modifying the 'jira' attribute of the CLI object with a MagicMock object. It then creates\nan Args class instance with issue_key and priority attributes, and calls the 'set_priority' method of the CLI object\nwith this Args instance.\n\nArguments:\n- cli (object): The CLI object used to interact with the JIRA system.\n\nSide Effects:\n- Modifies the 'jira' attribute of the CLI object by assigning it a MagicMock object.\n\"\"\"",
            "last_accessed": 1745566381
        },
        {
            "sha1": "50331d73875709a637da00590a92a522f52c4177",
            "docstring": "\"\"\"\nSet the priority for a JIRA ticket using the provided CLI object.\n\nArguments:\n- cli (object): The CLI object used to interact with the JIRA system.\n\nSide Effects:\n- Modifies the 'jira' attribute of the CLI object by assigning it a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "5482029f593e90eb83c053a2861c82a1a9b06d97",
            "docstring": "\"\"\"\nTest the functionality of setting the priority for a JIRA ticket using the provided CLI object.\n\nThis script defines a test function 'test_set_priority' that takes a CLI object as an argument. The function sets the\npriority for a JIRA ticket by modifying the 'jira' attribute of the CLI object with a MagicMock object. It then creates\nan Args class instance with issue_key and priority attributes, and calls the 'set_priority' method of the CLI object\nwith this Args instance.\n\nArguments:\n- cli (object): The CLI object used to interact with the JIRA system.\n\nSide Effects:\n- Modifies the 'jira' attribute of the CLI object by assigning it a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_open_issue_cli.py": [
        {
            "sha1": "1286576850e1f67acf7133905586dff3bcd0ead8",
            "docstring": "\"\"\"\nThis module contains unit tests for the 'open_issue' method in the CLI class.\nThe tests include scenarios for successful execution and exception handling.\nThe 'test_open_issue' function simulates the successful opening of an issue by patching subprocess.Popen.\nIt asserts that the correct arguments are passed to subprocess.Popen.\nThe 'test_open_issue_exception_handling' function simulates an exception during issue opening.\nIt asserts that the exception is properly handled and the error message is printed.\n\"\"\"",
            "last_accessed": 1745566385
        },
        {
            "sha1": "852ebf15287f0d0732a03f7901a6f2fe755a30b5",
            "docstring": "\"\"\"\nPrevents opening a process by patching subprocess.Popen.\n\nArguments:\n- cli (str): The command line interface command to be executed.\n\nSide Effects:\n- Modifies the behavior of subprocess.Popen to prevent opening a process.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "ac997b63a6a795d582626e2d7f9bc830cd567b52",
            "docstring": "\"\"\"\nSimulates exception handling when opening an issue using a CLI tool.\n\nArguments:\n- cli (str): The command-line interface (CLI) tool used to open the issue.\n\nExceptions:\n- OpenIssueError: Raised when there is a failure to open the issue using the CLI tool.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "59fc06af428c809a458f18161eeb2dca025abae2",
            "docstring": "\"\"\"\nThis module contains unit tests for the 'open_issue' method in the CLI class.\nThe tests include scenarios for successful execution and exception handling.\nThe 'test_open_issue' function simulates the successful opening of an issue by patching subprocess.Popen.\nIt asserts that the correct arguments are passed to subprocess.Popen.\nThe 'test_open_issue_exception_handling' function simulates an exception during issue opening.\nIt asserts that the exception is properly handled and the error message is printed.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_add_comment_blank_cli.py": [
        {
            "sha1": "a9370548ae8d0af1c179ae7f694b9524f7a72b84",
            "docstring": "\"\"\"\nThis script contains a unit test function test_add_comment_blank that tests the add_comment method of a CLI\napplication. It mocks the add_comment method using MagicMock and then calls the method with a blank comment. The test\nasserts that the output contains a warning message indicating that no comment was provided.\n\"\"\"",
            "last_accessed": 1745566390
        },
        {
            "sha1": "f27d11067df5a5282ecab1c7c1a5d92c5a2a9888",
            "docstring": "\"\"\"\nSimulate a test for adding a comment in a blank scenario.\n\nArguments:\n- cli: The CLI object used to interact with Jira.\n- capsys: A fixture to capture stdout and stderr outputs during testing.\n\nSide Effects:\n- Mocks the add_comment method of the Jira object in the CLI using MagicMock.\n\"\"\"",
            "last_accessed": 1745613454
        },
        {
            "sha1": "14ab7f3a4c5ac7ac99e664217ce3afc8ec837de7",
            "docstring": "\"\"\"\nThis script contains a unit test function test_add_comment_blank that tests the add_comment method of a CLI\napplication. It mocks the add_comment method using MagicMock and then calls the method with a blank comment. The test\nasserts that the output contains a warning message indicating that no comment was provided.\n\"\"\"",
            "last_accessed": 1745613454
        }
    ],
    "jira_creator/tests/commands/test_vote_points_invalid_cli.py": [
        {
            "sha1": "d2675ea6e877ea039fd1d58f12045a04da7b99db",
            "docstring": "\"\"\"\nThis file contains a function test_vote_story_points_value_error to test a scenario where a ValueError is raised when\nvoting for story points. The function takes two arguments:\n1. cli: An instance of the command-line interface.\n2. capsys: A pytest fixture to capture stdout and stderr output.\n\nWithin the function, an inner class Args is defined with attributes issue_key and points, representing the issue key\nand non-integer points to be voted on, respectively.\n\nThe function tests the system's behavior when a non-integer value is provided for story points during the voting\nprocess.\n\"\"\"",
            "last_accessed": 1745566395
        },
        {
            "sha1": "b8f4b1cda6ff9a0e86cf07d5f0e1445d7789d638",
            "docstring": "\"\"\"\nThis function is used to test a specific scenario where a ValueError is raised when attempting to vote for story\npoints. It takes two arguments:\n1. cli: An instance of the command-line interface.\n2. capsys: A pytest fixture to capture stdout and stderr output.\n\nThe function creates an inner class Args with two attributes:\n- issue_key: A string representing the key of the issue being voted on.\n- points: A string representing the points to be voted on, which intentionally contains a non-integer value.\n\nThis function is designed to test the behavior of the system when a non-integer value is provided for story points\nduring a voting process.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "315bbaf7f8d43b597aeafff0ea3cf3b33f5f48b2",
            "docstring": "\"\"\"\nThis file contains a function test_vote_story_points_value_error to test a scenario where a ValueError is raised when\nvoting for story points. The function takes two arguments:\n1. cli: An instance of the command-line interface.\n2. capsys: A pytest fixture to capture stdout and stderr output.\n\nWithin the function, an inner class Args is defined with attributes issue_key and points, representing the issue key\nand non-integer points to be voted on, respectively.\n\nThe function tests the system's behavior when a non-integer value is provided for story points during the voting\nprocess.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_edit_issue_cli.py": [
        {
            "sha1": "fdf5a3a8c4d7a5ba3844d29728d88e12b64cad2f",
            "docstring": "\"\"\"\nThis module contains unit tests for the Jira issue editing and validation commands in a command-line interface (CLI)\napplication. The tests are built using the pytest framework and focus on various functionalities, including editing\nissue descriptions, validating fields, and utilizing AI-assisted enhancements.\n\nKey functionalities tested include:\n- Creation of cache directories for issue data.\n- Editing issue descriptions with and without AI assistance.\n- Validation of Jira issue fields such as progress, epic link, sprint, priority, and story points.\n- Fetching and updating issue descriptions based on user input or AI suggestions.\n- Linting descriptions to ensure compliance with specified criteria.\n\nThe tests employ mocking to simulate interactions with Jira and AI providers, enabling isolated logic testing without\nactual network calls or user input. Both successful and failure scenarios are explored to ensure the robustness and\nreliability of the command implementations.\n\"\"\"",
            "last_accessed": 1745566403
        },
        {
            "sha1": "8fe108c2d5948f1c40dfb87433a8a8f58b27003b",
            "docstring": "\"\"\"\nCreates a test environment to validate the creation of a cache directory.\n\nArguments:\n- mock_cache_path (str): A mock path representing the cache directory path.\n- mock_save_cache (function): A function used to save cache data.\n\nSide Effects:\n- Sets up a mock cache path and patches os.makedirs to simulate directory creation.\n- Mocks the get_cache_path function to return the mock cache path.\n- Checks the condition where the cache directory doesn't exist.\n- Mocks the open function to prevent actual file system interactions.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "23d759f7cc34ea2d74d55b1ec7c0f7dc26ae14b1",
            "docstring": "\"\"\"\nSimulate an exception when trying to get the prompt.\n\nArguments:\n- cli (CommandLineInterface): An instance of the CommandLineInterface class used for interaction.\n\nExceptions:\n- This function does not raise any exceptions.\n\nSide Effects:\n- This function does not have any side effects.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "88bdb31ef04c4081db6ce4d310e7efb80f3934a6",
            "docstring": "\"\"\"\nExecutes a test to edit an issue using the provided CLI object.\n\nArguments:\n- cli: An instance of a CLI object used to interact with a Jira server.\n\nSide Effects:\n- Modifies the description of an issue identified by the key \"FAKE-123\" by calling the edit_issue method of the CLI object.\n- Asserts that the update_description method of the Jira object within the CLI object is called exactly once.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "47ea26774a36d1bde6084bc4797f983eb526815b",
            "docstring": "\"\"\"\nLoad and cache an issue for validation.\n\nArguments:\n- issue_key (str): The key of the issue to load and cache.\n\nReturn:\n- tuple: A tuple containing two elements:\n  - dict: A dictionary representing the cache after loading the issue.\n  - dict: A dictionary representing the cached issue with its key as the key and summary hash.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "db67d545d104a1200ec8f03b373f558e92522918",
            "docstring": "\"\"\"\nValidate the progress of an issue tracker test.\n\nArguments:\n- No arguments are taken.\n\nSide Effects:\n- Initializes an empty list 'problems' to store any encountered issues.\n- Initializes an empty dictionary 'issue_status' to track the status of each issue.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "9047a1712dcd94b3a7a12bbd439072927a366618",
            "docstring": "\"\"\"\nValidate the Epic Link field for test issues.\n\nArguments:\n- No arguments.\n\nSide Effects:\n- Modifies the 'problems' list.\n- Modifies the 'issue_status' dictionary.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "180d6121ce18414653719b36d30f11414d45846a",
            "docstring": "\"\"\"\nValidates the sprint by checking for any problems with the sprint setup.\n\nArguments:\n- No arguments.\n\nSide Effects:\n- Modifies the 'problems' list.\n- Modifies the 'issue_status' dictionary.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "25a10303327eb1845f0d06c93e16511a814e6552",
            "docstring": "\"\"\"\nValidate the priority of an issue in a test environment.\n\nArguments:\n- No arguments.\n\nSide Effects:\n- Modifies the 'problems' list and 'issue_status' dictionary in the test environment.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "6cabf9da85ad76f824dcb1c41439d070a3d1527c",
            "docstring": "\"\"\"\nValidate story points for test cases.\n\nArguments:\n- No arguments.\n\nSide Effects:\n- Modifies the 'problems' list.\n- Modifies the 'issue_status' dictionary.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "bf54b3cda95e75e6ac388ab578bdea6fb6f79fab",
            "docstring": "\"\"\"\nValidate if there are any blocked issues in the test.\n\nArguments:\n- No arguments.\n\nSide Effects:\n- Initializes an empty list 'problems' to store any blocked issues.\n- Initializes an empty dictionary 'issue_status' to track the status of each issue.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "859e6369c9e1c1e878b2bbcca0982be35dbb02eb",
            "docstring": "\"\"\"\nValidate a field using an AI-based provider.\n\nArguments:\n- None\n\nSide Effects:\n- Modifies the global state by initializing the 'problems' list, 'issue_status' dictionary, and 'cached_field_hash' variable.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "f7f51c202ae832895d259838bf0b0f96c5400707",
            "docstring": "\"\"\"\nValidate a field using an AI provider and handle invalid cases.\n\nArguments:\n- field_name (str): The name of the field being validated.\n- field_value (str): The value of the field being validated.\n- field_hash (str): The hash value of the field value.\n- cached_field_hash (str): The cached hash value of the field, initially set to None.\n- ai_provider (MagicMock): A mocked AI provider object used for validation.\n- problems (list): A list to store validation issues found during the process.\n- issue_status (dict): A dictionary to track the status of each field.\n\nSide Effects:\n- Modifies the global state by patching the 'ai_provider' to return a MagicMock object.\n- Initializes 'problems' list, 'issue_status' dictionary, and 'cached_field_hash' to empty values.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "7b3babf84b6e8e691fd004b5adb4acc36b4dd4a3",
            "docstring": "\"\"\"\nSummary:\nMock functions related to Jira API to test editing functionality without using AI.\n\nArguments:\n- cli (object): An object representing the command-line interface (CLI) used to interact with Jira.\n\nSide Effects:\n- Modifies the behavior of Jira API functions for testing purposes.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "b18a547caed86e659f413122f5be31fd0ab47516",
            "docstring": "\"\"\"\nUpdates Jira issue descriptions using an AI service.\n\nArguments:\n- cli: An object containing references to Jira API and AI service providers.\n\nSide Effects:\n- Modifies Jira issue descriptions by updating them with cleaned text generated by the AI service.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "14f4cc05b37953a1181f5b419a011c6397f5bcfd",
            "docstring": "\"\"\"\nFetches the description from a Jira issue using a provided CLI instance.\n\nArguments:\n- cli (object): An instance of the CLI used to interact with Jira.\n\nSide Effects:\n- Modifies the `get_description` method of the Jira mock object to return \"Test description\".\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "730415df6e01e9a598f7e1408068b1078cf0ceed",
            "docstring": "\"\"\"\nUpdate the description of a Jira issue using a mocked Jira object.\n\nArguments:\n- No arguments.\n\nSide Effects:\n- Modifies the description of a Jira issue using a mocked Jira object.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "80e450a54747e146c23d027da031947c1ee5dfba",
            "docstring": "\"\"\"\nMocks the AI provider to improve a text description and validates it once.\n\nArguments:\n- No arguments.\n\nSide Effects:\n- Mocks the AI provider to improve a text description.\n- Mocks the validation function to return a list containing the cleaned description.\n\nReturns:\n- No explicit return value.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "9abcc19e7c3886f41cac1ef69f1085395c57826a",
            "docstring": "\"\"\"\nThis function is a test case for linting a description using a mock AI provider. It creates a MagicMock object to\nsimulate an AI provider and sets up a mock method `improve_text` that returns a cleaned description when called.\n\nArguments:\n- No arguments are passed explicitly to this function.\n\nSide Effects:\n- The function sets up mock objects to simulate interactions with an AI provider and validation process.\n\nReturns:\n- No return value explicitly specified as the function is a test case.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "4b4d14c66a411b02fa7041be6bbafe867434c3ad",
            "docstring": "\"\"\"\nThis function is used to test the get_prompt function by creating a MagicMock object for a Jira issue. The\nMagicMock object simulates the behavior of a Jira issue and its type being a \"story\".\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "71dd1cbb0cd37a35b27f023fab4111a4aac77643",
            "docstring": "\"\"\"\nUpdates the description of a test.\n\nArguments:\n- original_description (str): The original description of the test.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "342bb594f6a9f09c5cfb4315637ef267e9574a74",
            "docstring": "\"\"\"\nMock the AI provider's improve_text method to return a cleaned description.\n\nArguments:\n- cleaned (str): The original description to be cleaned.\n- ai_provider_mock (MagicMock): A mock object of the AI provider to simulate the improve_text method.\n\nReturn:\n- tuple: A tuple containing the cleaned description (str) and a boolean indicating whether any issues were found\n(False in this case).\n\nSide Effects:\n- Calls the validate function to simulate no issues found in the description.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "7acee610a7b6054e797c11a5123e4bfa5226693e",
            "docstring": "\"\"\"\nSimulate editing an issue in a CLI without making any changes.\n\nArguments:\n- mock_save_cache: MagicMock object used for caching\n\nSide Effects:\n- Calls to the Jira API and an AI provider are simulated using MagicMock objects\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "31d9d45454c20f69b43e63d4cd86c2c0a1e693c9",
            "docstring": "\"\"\"\nSimulate a test scenario where the CLI edit issue lint is set to True.\n\nArguments:\n- cli: An object representing the command-line interface.\n- mock_save_cache: A mock object used to save cache data.\n\nSide Effects:\n- Sets up the necessary mocks for testing purposes.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "1aab15e39cc3e29d3b882c87b87a01e27158ef1a",
            "docstring": "\"\"\"\nCheck if the description of an issue is empty and return early.\n\nArguments:\n- No arguments.\n\nReturns:\n- No return value.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "93ea2af0e1b4d3062c613b3edeea8658c96087f6",
            "docstring": "\"\"\"\nThis module contains unit tests for the Jira issue editing and validation commands in a command-line interface (CLI)\napplication. The tests are built using the pytest framework and focus on various functionalities, including editing\nissue descriptions, validating fields, and utilizing AI-assisted enhancements.\n\nKey functionalities tested include:\n- Creation of cache directories for issue data.\n- Editing issue descriptions with and without AI assistance.\n- Validation of Jira issue fields such as progress, epic link, sprint, priority, and story points.\n- Fetching and updating issue descriptions based on user input or AI suggestions.\n- Linting descriptions to ensure compliance with specified criteria.\n\nThe tests employ mocking to simulate interactions with Jira and AI providers, enabling isolated logic testing without\nactual network calls or user input. Both successful and failure scenarios are explored to ensure the robustness and\nreliability of the command implementations.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_add_comment_ai_fail_cli.py": [
        {
            "sha1": "20d2d01d8d81c0c0bfdcfee12fe621ff24f90681",
            "docstring": "\"\"\"\nThis file contains a unit test for the 'add_comment' method in the 'cli' module.\nThe test case simulates a failure scenario by mocking the 'add_comment' method and causing the 'improve_text' method of\n'ai_provider' to raise an 'AiError' exception.\nThe test verifies that the 'AiError' exception is correctly raised and captures the output to check for the expected\nerror message.\n\nThe 'test_add_comment_ai_fail' function mocks the 'add_comment' method for testing purposes without a return value. It\nsets up the necessary mocks for 'ai_provider' and verifies that an 'AiError' exception is raised during the test,\ncapturing and asserting the expected error message.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "75d077e55e46ff51dd745d3693ce697448f1c9d8",
            "docstring": "\"\"\"\nMock the add_comment method for testing purposes.\nThis function does not have a return value.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_migrate_to_exception_cli.py": [
        {
            "sha1": "530c94e3de3e6dfcb30e8fad3fff911e02ef939f",
            "docstring": "\"\"\"\nThis script defines a test function test_migrate_to_exception that tests the migration functionality of a CLI\napplication. The test mocks the necessary objects and asserts that the migration process raises a MigrateError\nexception with a specific error message. The test also captures the output and verifies the error message. The script\nuses pytest for testing and unittest.mock for mocking objects.\n\nFunctions:\n- test_migrate_to_exception: Mocks the migrate_issue method to raise an exception and tests the migration process. It\ntakes\ncli (Command Line Interface object) and capsys (pytest fixture to capture stdout and stderr) as arguments. It raises\nMigrateError when the migrate_issue method fails and modifies the migrate_issue method to raise an exception. It also\nsets\nthe jira_url attribute of cli to \"http://fake\".\n\"\"\"",
            "last_accessed": 1745566442
        },
        {
            "sha1": "4ed57ce68cd305e2603d728004e4856a7a4bbf35",
            "docstring": "\"\"\"\nMock the migrate_issue method to raise an exception and test the migration process.\n\nArguments:\n- cli: Command Line Interface object.\n- capsys: pytest fixture to capture stdout and stderr.\n\nExceptions:\n- MigrateError: Raised when the migrate_issue method fails.\n\nSide Effects:\n- Modifies the migrate_issue method to raise an exception.\n- Sets the jira_url attribute of cli to \"http://fake\".\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "430a0a9d4902295012a94fde6d31fc9be6008a22",
            "docstring": "\"\"\"\nThis script defines a test function test_migrate_to_exception that tests the migration functionality of a CLI\napplication. The test mocks the necessary objects and asserts that the migration process raises a MigrateError\nexception with a specific error message. The test also captures the output and verifies the error message. The script\nuses pytest for testing and unittest.mock for mocking objects.\n\nFunctions:\n- test_migrate_to_exception: Mocks the migrate_issue method to raise an exception and tests the migration process. It\ntakes\ncli (Command Line Interface object) and capsys (pytest fixture to capture stdout and stderr) as arguments. It raises\nMigrateError when the migrate_issue method fails and modifies the migrate_issue method to raise an exception. It also\nsets\nthe jira_url attribute of cli to \"http://fake\".\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_assign_issue_and_failure_cli.py": [
        {
            "sha1": "1d234735939f057367e15616a48a76459a57ffe6",
            "docstring": "\"\"\"\nThis file contains test functions for the 'assign' method in a CLI tool.\nThe 'test_assign_success' function tests the successful assignment of an issue using a mock Jira client, while the\n'test_assign_failure' function tests the failure scenario.\nEach test function sets up a mock Jira client behavior, invokes the 'assign' method with specific arguments, captures\nthe output, and asserts the expected output message.\n\ntest_assign_success(cli, capsys):\nAssign a success test for the assign_issue method in the Jira CLI.\n\nArguments:\n- cli: An instance of the Jira CLI.\n- capsys: Pytest fixture for capturing stdout and stderr output.\n\nSide Effects:\n- Modifies the assign_issue method in the Jira CLI to always return True.\n\ntest_assign_failure(cli, capsys):\nAssign a failure status to a Jira issue using a mock CLI.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface).\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- None\n\nSide Effects:\n- Modifies the assign_issue method of the cli.jira object to always return False.\n\"\"\"",
            "last_accessed": 1745566448
        },
        {
            "sha1": "d725ed1b6fc5b30ff666eea678c669063a178996",
            "docstring": "\"\"\"\nAssign a success test for the assign_issue method in the Jira CLI.\n\nArguments:\n- cli: An instance of the Jira CLI.\n- capsys: Pytest fixture for capturing stdout and stderr output.\n\nSide Effects:\n- Modifies the assign_issue method in the Jira CLI to always return True.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "529612044f237243303796da2e018d4fe0e6a3e6",
            "docstring": "\"\"\"\nAssign a failure status to a Jira issue using a mock CLI.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface).\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- None\n\nSide Effects:\n- Modifies the assign_issue method of the cli.jira object to always return False.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "e4655bb563af6bc371a7bb841f9bb1017b3f8527",
            "docstring": "\"\"\"\nThis file contains test functions for the 'assign' method in a CLI tool.\nThe 'test_assign_success' function tests the successful assignment of an issue using a mock Jira client, while the\n'test_assign_failure' function tests the failure scenario.\nEach test function sets up a mock Jira client behavior, invokes the 'assign' method with specific arguments, captures\nthe output, and asserts the expected output message.\n\ntest_assign_success(cli, capsys):\nAssign a success test for the assign_issue method in the Jira CLI.\n\nArguments:\n- cli: An instance of the Jira CLI.\n- capsys: Pytest fixture for capturing stdout and stderr output.\n\nSide Effects:\n- Modifies the assign_issue method in the Jira CLI to always return True.\n\ntest_assign_failure(cli, capsys):\nAssign a failure status to a Jira issue using a mock CLI.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface).\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- None\n\nSide Effects:\n- Modifies the assign_issue method of the cli.jira object to always return False.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_dispatch_cli.py": [
        {
            "sha1": "92d224b7ffada3ebb7e2b9bb348fc61e4b9e9155",
            "docstring": "\"\"\"\nDispatches an unknown command for testing purposes.\n\nArguments:\n- cli (object): An object representing the command line interface.\n\nThis function is used to test the behavior of dispatching an unknown command in a command line interface.\n\"\"\"",
            "last_accessed": 1745566452
        },
        {
            "sha1": "0ce17c7413ee96b96947cb408d1d1fc42975cacd",
            "docstring": "\"\"\"\nDispatches an unknown command for testing purposes.\n\nArguments:\n- cli (object): An object representing the command line interface.\n\nThis function is used to test the behavior of dispatching an unknown command in a command line interface.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "7060c07781237007e64519f05c244306e6f21995",
            "docstring": "\"\"\"\nDispatches an unknown command for testing purposes.\n\nArguments:\n- cli (object): An object representing the command line interface.\n\nThis file includes a function to test the behavior of dispatching an unknown command in a command line interface. It uses pytest to check if the expected DispatcherError is raised when an unknown command is dispatched.\n\"\"\"",
            "last_accessed": 1745608674
        },
        {
            "sha1": "721059a5decb05eae12b760f6f01fb78792cdc43",
            "docstring": "\"\"\"\nDispatches an unknown command for testing purposes.\n\nArguments:\n- cli (object): An object representing the command line interface.\n\nThis file includes a function to test the behavior of dispatching an unknown command in a command line interface. It\nuses pytest to check if the expected DispatcherError is raised when an unknown command is dispatched.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_view_user_cli.py": [
        {
            "sha1": "ec489cc67e9a8e652e195c84d87330a8a96ca427",
            "docstring": "\"\"\"\nThis file contains unit tests for the view_user function in the CLI module.\nIt includes tests for printing user fields and handling GetUserError exceptions.\nMock objects are used to simulate interactions with the Jira API.\nThe test_cli_view_user_prints_user_fields test verifies that user fields are correctly printed.\nThe test_cli_view_user_raises_and_prints_error test checks if GetUserError exceptions are raised and handled\nappropriately.\npytest and unittest.mock libraries are imported for testing purposes.\n\nFunctions:\n- test_cli_view_user_prints_user_fields(cli, capsys): Prints user fields for a specific user using the CLI.\n- test_cli_view_user_raises_and_prints_error(cli, capsys): Tests the CLI view user functionality by simulating a\nscenario where an error is raised when attempting to get user information from Jira.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- GetUserError: Raised when the simulated scenario encounters an error message \"User not found\".\n\"\"\"",
            "last_accessed": 1745566458
        },
        {
            "sha1": "cc64c609c1788b3b3e40f64c696f9c4fe9355d61",
            "docstring": "\"\"\"\nPrints user fields for a specific user using the CLI.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nSide Effects:\n- Prints the user fields for a specific user to the standard output.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "8be5ebc4e8ca5b8e611255cfe3fe7ba49f1ba4cb",
            "docstring": "\"\"\"\nSummary:\nThis function tests the CLI view user functionality by simulating a scenario where an error is raised when attempting to get user information from Jira.\n\nArguments:\n- cli: An instance of the CLI class that provides Jira functionality.\n- capsys: A pytest fixture to capture stdout and stderr output.\n\nExceptions:\n- GetUserError: Raised when the simulated scenario encounters an error message \"User not found\".\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "9b9bb195564c52312a422376bfe5fc6a5ebfaa26",
            "docstring": "\"\"\"\nThis file contains unit tests for the view_user function in the CLI module.\nIt includes tests for printing user fields and handling GetUserError exceptions.\nMock objects are used to simulate interactions with the Jira API.\nThe test_cli_view_user_prints_user_fields test verifies that user fields are correctly printed.\nThe test_cli_view_user_raises_and_prints_error test checks if GetUserError exceptions are raised and handled\nappropriately.\npytest and unittest.mock libraries are imported for testing purposes.\n\nFunctions:\n- test_cli_view_user_prints_user_fields(cli, capsys): Prints user fields for a specific user using the CLI.\n- test_cli_view_user_raises_and_prints_error(cli, capsys): Tests the CLI view user functionality by simulating a\nscenario where an error is raised when attempting to get user information from Jira.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- GetUserError: Raised when the simulated scenario encounters an error message \"User not found\".\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_run_cli.py": [
        {
            "sha1": "ba019ac89cc7719b4f617643ab3e18a156312d4b",
            "docstring": "\"\"\"\nThis script defines a test function to test the run method of a CLI class using unittest.mock for mocking objects.\nThe test function sets up a mock for the _dispatch_command method of the provided cli object and asserts its call\nduring run.\nIt also includes a fake_register function to add a 'fake' sub-command for testing purposes.\n\"\"\"",
            "last_accessed": 1745566462
        },
        {
            "sha1": "81cafe676943c4fea5bbb8e4dec213d9124ee227",
            "docstring": "\"\"\"\nSet up a mock for the _dispatch_command method of the provided cli object for testing purposes.\nArguments:\n- cli (object): The cli object for which the _dispatch_command method will be mocked.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "372ac173173bfbc79b91aa7b99658f2a3f310601",
            "docstring": "\"\"\"\nAdds a sub-command 'fake' to the provided subparsers object.\n\nArguments:\n- subparsers (argparse.ArgumentParser): An ArgumentParser object to which the 'fake' sub-command will be added.\n\nSide Effects:\nModifies the subparsers object by adding a new sub-command 'fake'.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "0b5281ca9160c51a687ccdf7783a654601b58449",
            "docstring": "\"\"\"\nThis script defines a test function to test the run method of a CLI class using unittest.mock for mocking objects.\nThe test function sets up a mock for the _dispatch_command method of the provided cli object and asserts its call\nduring run.\nIt also includes a fake_register function to add a 'fake' sub-command for testing purposes.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_lint_all_cli.py": [
        {
            "sha1": "980eb5d03efa9f6206422511fb03565c4beea621",
            "docstring": "\"\"\"\nUnit tests for the linting functionality of a CLI application that interacts with JIRA issues.\n\nThis module includes various test cases to validate the behavior of the `lint_all` command and the output formatting of\nthe `print_status_table` function. It utilizes the `pytest` framework and employs mocking to simulate JIRA interactions\nand responses.\n\nKey features tested include:\n- Correct output formatting for issues with varying progress statuses.\n- Handling of scenarios with no issues assigned, ensuring appropriate messages are displayed.\n- Validation of lint checks, including cases where issues pass and fail linting criteria.\n- Exception handling for simulated errors during JIRA issue retrieval.\n\nClasses:\n- Args: A simple class to simulate command-line arguments for linting.\n- ArgsReporter: A variant of Args with a specified reporter.\n- ArgsAssignee: A variant of Args with a specified assignee.\n\nFunctions:\n- test_print_status_table_with_wrapping: Tests the output of the print_status_table function with wrapped text.\n- test_lint_all_all_pass: Tests the behavior when all issues pass the lint checks.\n- test_lint_all_no_issues: Tests the output when no issues are found.\n- test_lint_all_exception: Tests the behavior when an exception occurs during linting.\n- test_lint_all_with_failures: Tests the output when some issues fail lint checks.\n\"\"\"",
            "last_accessed": 1745566472
        },
        {
            "sha1": "8cc047912a0202fac75a85b95e74e5b841fe3ec9",
            "docstring": "\"\"\"\nThis class represents a set of arguments used for a specific project.\n\nAttributes:\nproject (str): The name of the project. Default value is \"TestProject\".\ncomponent (str): The component related to the project, default value is \"analytics-hcc-service\".\nreporter: The user responsible for reporting on the project, default value is None.\nassignee: The user assigned to work on the project, default value is None.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "af9e496be3347e254fdaac50f3c5dd31a692504a",
            "docstring": "\"\"\"\nThis class represents an ArgsReporter used for reporting project-related information.\n\nAttributes:\nproject (str): The name of the project being reported on (e.g., \"TestProject\").\ncomponent (str): The specific component within the project (e.g., \"analytics-hcc-service\").\nreporter (str): The name of the person reporting on the project (e.g., \"test\").\nassignee (NoneType): The person assigned to work on the project, can be None if not assigned yet.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "3bb4a162f32a474769f59eee7108ae146c525724",
            "docstring": "\"\"\"\nThis class represents an assignee for a specific project.\n\nAttributes:\n    project (str): The name of the project the assignee is associated with.\n    component (str): The specific component within the project.\n    reporter: The person responsible for reporting on the project.\n    assignee (str): The name of the assignee for the project.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "4955cd1a7fd6384fc4e39b5d7c4ab455957c0bb6",
            "docstring": "\"\"\"\nPrints a status table with wrapping functionality for the given data.\n\nArguments:\n- capsys: A pytest fixture for capturing stdout and stderr output.\n\nSide Effects:\n- Prints a formatted status table with wrapping functionality for the provided data.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "8677ec52c915397b02c02606beab3bcec3dcc0d7",
            "docstring": "\"\"\"\nSet up a mock cache, CLI, and capture system stdout/stderr for testing purposes.\nAssign a MagicMock object to the 'jira' attribute of the CLI object.\nParameters:\n- mock_save_cache: Mock object for saving cache.\n- cli: CLI object for testing.\n- capsys: Capturing system standard output and error streams.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "38e1dba56e8ae7e6b3d6a8e232d20fad71d67206",
            "docstring": "\"\"\"\nSimulate a mock request and return a dictionary with predefined fields.\n\nArguments:\n- method (str): The HTTP method used in the request.\n- path (str): The path or endpoint of the request.\n- **kwargs: Additional keyword arguments that are not used in this function.\n\nReturn:\n- dict: A dictionary containing predefined fields such as summary, description, priority, status, assignee, etc.\n\nSide Effects:\n- This function does not have any side effects as it only returns a predefined dictionary.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "f677c9e01cd00dd5efe43255e3404da80e0149b6",
            "docstring": "\"\"\"\nSimulate linting all files with no issues.\n\nArguments:\n- mock_save_cache: A MagicMock object for saving cache.\n- cli: An object representing the CLI.\n- capsys: A fixture to capture stdout and stderr outputs.\n\nSide Effects:\n- Sets up a mock Jira object and its AI provider in the CLI object.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "c95c867d522fba73ffa311b962a02a702a472c7e",
            "docstring": "\"\"\"\nLint all exceptions that occur during the test.\n\nArguments:\n- mock_save_cache: Mock object for saving cache.\n- cli: Command-line interface object.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nSide Effects:\n- Modifies the 'jira' attribute of the 'cli' object by assigning a MagicMock object to it.\n- Modifies the 'ai_provider' attribute of the 'cli.jira' object by assigning a MagicMock object to it.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "6ca48994a13c361abcbb89ab13f74b1922365899",
            "docstring": "\"\"\"\nRun linting on all files and handle failures gracefully.\n\nArguments:\n- mock_save_cache: MagicMock object for saving cache.\n- cli: Command Line Interface object.\n- capsys: pytest fixture for capturing stdout and stderr.\n\nSide Effects:\n- Sets the 'jira' attribute of the 'cli' object to a MagicMock object.\n- Sets the 'ai_provider' attribute of the 'cli' object to a MagicMock object with a mocked 'improve_text' method.\n- Modifies the return value of 'cli.jira.list_issues' to a list of dictionaries representing mocked issues.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "a9fcb84e77d76e8a8ea699545f42bd07f7e23859",
            "docstring": "\"\"\"\nSimulates a mock HTTP request with the specified method, path, and additional keyword arguments, and returns a\ndictionary containing simulated response fields.\n\nArguments:\n- method (str): The HTTP method used in the request (e.g., GET, POST).\n- path (str): The path or endpoint of the request.\n- **kwargs: Additional keyword arguments that can be used to customize the mock request.\n\nReturn:\ndict: A dictionary containing simulated response fields such as summary, description, priority, status,\nassignee, reporter, and custom fields fetched using EnvFetcher.\n\nSide Effects:\n- This function does not have any side effects as it only generates a mock response dictionary.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "61ed53d68f704b1fea149c7ee431300233af65fc",
            "docstring": "\"\"\"\nUnit tests for the linting functionality of a CLI application that interacts with JIRA issues.\n\nThis module includes various test cases to validate the behavior of the `lint_all` command and the output formatting of\nthe `print_status_table` function. It utilizes the `pytest` framework and employs mocking to simulate JIRA interactions\nand responses.\n\nKey features tested include:\n- Correct output formatting for issues with varying progress statuses.\n- Handling of scenarios with no issues assigned, ensuring appropriate messages are displayed.\n- Validation of lint checks, including cases where issues pass and fail linting criteria.\n- Exception handling for simulated errors during JIRA issue retrieval.\n\nClasses:\n- Args: A simple class to simulate command-line arguments for linting.\n- ArgsReporter: A variant of Args with a specified reporter.\n- ArgsAssignee: A variant of Args with a specified assignee.\n\nFunctions:\n- test_print_status_table_with_wrapping: Tests the output of the print_status_table function with wrapped text.\n- test_lint_all_all_pass: Tests the behavior when all issues pass the lint checks.\n- test_lint_all_no_issues: Tests the output when no issues are found.\n- test_lint_all_exception: Tests the behavior when an exception occurs during linting.\n- test_lint_all_with_failures: Tests the output when some issues fail lint checks.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_change_type_with_exception_cli.py": [
        {
            "sha1": "9a2773db49b0531bd80d1ae57d04923871b9ad31",
            "docstring": "\"\"\"\nThis file contains a test case function to test the failure scenario of changing the issue type. It mocks the\nchange_issue_type method to raise a ChangeTypeError exception and asserts that the proper error message is displayed.\nThe test case utilizes the pytest framework for testing and the MagicMock class for mocking the method.\n\ntest_change_type_failure(cli, capsys):\nMock the change_issue_type method to raise an exception for testing purposes.\n\nArguments:\n- cli: An object representing the CLI interface.\n- capsys: An object capturing stdout and stderr outputs during testing.\n\nExceptions:\n- ChangeTypeError: Raised when the change_issue_type method encounters an error.\n\"\"\"",
            "last_accessed": 1745566491
        },
        {
            "sha1": "db2511c5f14af6a26fb1e1b8cb9b66680c71d90a",
            "docstring": "\"\"\"\nMock the change_issue_type method to raise an exception for testing purposes.\n\nArguments:\n- cli: An object representing the CLI interface.\n- capsys: An object capturing stdout and stderr outputs during testing.\n\nExceptions:\n- ChangeTypeError: Raised when the change_issue_type method encounters an error.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "50facde36ad0c2c7fe77bd2d44367c8817f11b95",
            "docstring": "\"\"\"\nThis file contains a test case function to test the failure scenario of changing the issue type. It mocks the\nchange_issue_type method to raise a ChangeTypeError exception and asserts that the proper error message is displayed.\nThe test case utilizes the pytest framework for testing and the MagicMock class for mocking the method.\n\ntest_change_type_failure(cli, capsys):\nMock the change_issue_type method to raise an exception for testing purposes.\n\nArguments:\n- cli: An object representing the CLI interface.\n- capsys: An object capturing stdout and stderr outputs during testing.\n\nExceptions:\n- ChangeTypeError: Raised when the change_issue_type method encounters an error.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_search_users_cli.py": [
        {
            "sha1": "60e1e78404ba2376253538e9f60b0b35d3dac9a4",
            "docstring": "\"\"\"\nThis module contains unit tests for the `search_users` function in the CLI interface.\nIt includes tests for successful user searches, handling of empty search results, and error scenarios.\n\nTest Functions:\n- `test_cli_search_users_prints_results`: Verifies that user search results are printed correctly.\n- `test_cli_search_users_prints_warning_on_empty`: Checks that a warning message is displayed when no users are found.\n- `test_cli_search_users_raises_on_error`: Ensures that an exception is raised when an error occurs during the search.\n\nArguments:\n- `cli`: An object representing the CLI interface.\n- `capsys`: A pytest fixture for capturing output.\n\nSide Effects:\n- Modifies the `MagicMock` object `cli.jira.search_users` to simulate different scenarios.\n\nExceptions:\n- `SearchUsersError`: Raised when an error occurs during the execution of the `search_users` function.\n\"\"\"",
            "last_accessed": 1745566496
        },
        {
            "sha1": "776b36cca5c2964ebdbcd9a952a402dd8cab3c6d",
            "docstring": "\"\"\"\nPrints the results of searching for users using the CLI.\n\nArguments:\n- cli: An object representing the CLI interface.\n- capsys: A pytest fixture for capturing stdout and stderr output.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "cb77a8ca6e535c666ee7e9f383c709e1a22f201f",
            "docstring": "\"\"\"\nSearch for users using the CLI and print a warning if no users are found.\n\nArguments:\n- cli: An object representing the CLI interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nSide Effects:\n- Modifies the MagicMock object `cli.jira.search_users` to return an empty list.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "89443692291d32d17283f98460cf87b4ff8e7a20",
            "docstring": "\"\"\"\nThis function tests that the CLI search_users function raises an exception when an error occurs during the search.\n\nArguments:\n- cli: An object representing the CLI application.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs.\n\nExceptions:\n- SearchUsersError: Raised when an error occurs during the search_users function execution.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "7ba03008c83cb389517e929db90da9264b7da902",
            "docstring": "\"\"\"\nThis module contains unit tests for the `search_users` function in the CLI interface.\nIt includes tests for successful user searches, handling of empty search results, and error scenarios.\n\nTest Functions:\n- `test_cli_search_users_prints_results`: Verifies that user search results are printed correctly.\n- `test_cli_search_users_prints_warning_on_empty`: Checks that a warning message is displayed when no users are found.\n- `test_cli_search_users_raises_on_error`: Ensures that an exception is raised when an error occurs during the search.\n\nArguments:\n- `cli`: An object representing the CLI interface.\n- `capsys`: A pytest fixture for capturing output.\n\nSide Effects:\n- Modifies the `MagicMock` object `cli.jira.search_users` to simulate different scenarios.\n\nExceptions:\n- `SearchUsersError`: Raised when an error occurs during the execution of the `search_users` function.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_add_comment_exception_cli.py": [
        {
            "sha1": "693b807c58fdaf185bea1407794d1c13960d646c",
            "docstring": "\"\"\"\nThis file contains a test case for the add_comment method of a CLI application. It mocks the add_comment method to\nraise an AddCommentError exception and verifies the expected output when the exception is raised. The test case uses\npytest for testing and unittest.mock for mocking objects.\n\nFunctions:\n- test_add_comment_exception: Mocks the add_comment method of a Jira CLI object to raise an AddCommentError exception\nfor testing purposes.\n\nArguments:\n- cli: Jira CLI object to be tested.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nExceptions:\n- AddCommentError: Raised when the add_comment method encounters an error.\n\"\"\"",
            "last_accessed": 1745566503
        },
        {
            "sha1": "c7ef9b911e06125652f014fcc65e5205dade8f76",
            "docstring": "\"\"\"\nMocks the add_comment method of a Jira CLI object to raise an AddCommentError exception for testing purposes.\n\nArguments:\n- cli: Jira CLI object to be tested.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nExceptions:\n- AddCommentError: Raised when the add_comment method encounters an error.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "9673662f835a4715e90b57c33274e3868b71c998",
            "docstring": "\"\"\"\nThis file contains a test case for the add_comment method of a CLI application. It mocks the add_comment method to\nraise an AddCommentError exception and verifies the expected output when the exception is raised. The test case uses\npytest for testing and unittest.mock for mocking objects.\n\nFunctions:\n- test_add_comment_exception: Mocks the add_comment method of a Jira CLI object to raise an AddCommentError exception\nfor testing purposes.\n\nArguments:\n- cli: Jira CLI object to be tested.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nExceptions:\n- AddCommentError: Raised when the add_comment method encounters an error.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_set_story_points_cli.py": [
        {
            "sha1": "6b0023890b10bbe9f95cf487489212cfb7aac68d",
            "docstring": "\"\"\"\nUnit tests for the 'set_story_points' function in the 'cli' module.\n\nThis module includes tests to verify the functionality of setting story points for Jira issues through the command line\ninterface (CLI). It covers various scenarios including successful setting of story points, handling of exceptions, and\nvalidation of input values.\n\nKey Features:\n- Tests for successful story point assignment.\n- Tests for failure cases using mocked methods.\n- Validation of input types to ensure correct data types are used.\n- Utilizes pytest for testing framework and assertions.\n- Implements MagicMock for mocking dependencies.\n\nExceptions tested:\n- SetStoryPointsError: Raised during failure scenarios when setting story points fails.\n- ValueError: Raised when an invalid non-integer value is provided for story points.\n\"\"\"",
            "last_accessed": 1745566510
        },
        {
            "sha1": "d34e109019e4269f83dbba574bf7db4a92f7c80c",
            "docstring": "\"\"\"\nSet story points for a Jira issue using the CLI.\n\nArguments:\n- cli: An object representing the CLI interface.\n\nSide Effects:\n- Modifies the 'jira' attribute of the 'cli' object by setting the 'set_story_points' attribute to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "4fb0168e075233f3a0b3f8c9135c8a5c07753c93",
            "docstring": "\"\"\"\nSet the story points for a test case and handle failure scenarios.\n\nArguments:\n- cli (CommandLineInterface): An instance of the CommandLineInterface class used for interacting with the command\nline.\n- capsys (CaptureFixture): Pytest fixture for capturing stdout and stderr output.\n\nExceptions:\n- No explicit exceptions are raised within this function.\n\nSide Effects:\n- This function interacts with the command line interface (cli) to set story points for a test case.\n- It may output information to stdout or stderr using the capsys fixture.\n\nNote: This function likely handles the scenario where setting story points for a test case fails.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "c7f8f816c8057288b0c26c1975daf03cb1b9e7ed",
            "docstring": "\"\"\"\nSet the story points for a specific issue identified by the provided issue key.\n\nArguments:\n- issue_key (str): A string representing the unique key of the issue.\n- points (int): An integer indicating the story points to be set for the issue.\n\nExceptions:\n- SetStoryPointsError: Raised when there is a failure in setting the story points for the issue.\n\nSide Effects:\nRaises a SetStoryPointsError exception with a message indicating a fake failure.\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "f2031c317e1b42db55d3af07c855cdac18c8e150",
            "docstring": "\"\"\"\nSet story points for an issue identified by the given key.\n\nArguments:\n- cli: An instance of the command-line interface.\n- capsys: An object capturing stdout and stderr outputs.\n\nExceptions:\n- ValueError: Raised when the points parameter is not a valid integer.\n\nSide Effects:\nNone\n\"\"\"",
            "last_accessed": 1745613455
        },
        {
            "sha1": "08179ddae0c9b5e9c03137ce23ce1e747adce31c",
            "docstring": "\"\"\"\nUnit tests for the 'set_story_points' function in the 'cli' module.\n\nThis module includes tests to verify the functionality of setting story points for Jira issues through the command line\ninterface (CLI). It covers various scenarios including successful setting of story points, handling of exceptions, and\nvalidation of input values.\n\nKey Features:\n- Tests for successful story point assignment.\n- Tests for failure cases using mocked methods.\n- Validation of input types to ensure correct data types are used.\n- Utilizes pytest for testing framework and assertions.\n- Implements MagicMock for mocking dependencies.\n\nExceptions tested:\n- SetStoryPointsError: Raised during failure scenarios when setting story points fails.\n- ValueError: Raised when an invalid non-integer value is provided for story points.\n\"\"\"",
            "last_accessed": 1745613455
        }
    ],
    "jira_creator/tests/commands/test_create_file_not_found_cli.py": [
        {
            "sha1": "10fdd3ac1f73fd2b03c258bd5ab11be4d5f82ad4",
            "docstring": "\"\"\"\nThis module contains test cases for the command-line interface (CLI) command responsible for creating issues in a project management system, such as JIRA, using the pytest framework.\n\nThe tests validate the functionality of the `create_issue` function across various scenarios, including:\n- Handling `FileNotFoundError` when template files are missing.\n- Managing exceptions raised by the AI service during text improvement.\n- Successful creation of an issue with proper output verification.\n\nEach test case utilizes mocking to isolate the functionality being tested, ensuring that tests are reliable and not dependent on external systems or files. The module includes functions to simulate different error conditions and validate the output of the CLI commands.\n\"\"\"",
            "last_accessed": 1745566519
        },
        {
            "sha1": "2c08e33040e735e8ac19b32e8de9e127ecd3c4f6",
            "docstring": "\"\"\"\nMock the TemplateLoader to raise FileNotFoundError when trying to load a template file.\nThis function is used for testing purposes and takes a 'cli' parameter representing the command-line interface.\n\nArguments:\n- cli (object): The command-line interface object to be tested.\n\nExceptions:\n- FileNotFoundError: Raised when the TemplateLoader fails to load a template file.\n\nSide Effects:\n- Modifies the TemplateLoader to raise FileNotFoundError when attempting to load a template file.\n- Captures the exit and asserts that the correct exception is raised during the test.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "48c929c23886496fccb5f8350734c4a4c83f70d0",
            "docstring": "\"\"\"\nSet the template directory path for the CLI to a non-existent directory.\n\nArguments:\n- cli (object): An instance of the CLI class.\n- capsys (object): Pytest fixture for capturing stdout and stderr outputs.\n\nSide Effects:\n- Modifies the template directory path of the CLI instance.\n\nExceptions:\n- FileNotFoundError: Raised when the template file is not found.\n\nThe function sets the template directory path of the CLI instance to a non-existent directory and then mocks the\nTemplateLoader to raise a FileNotFoundError. It creates a mock Args object, calls the cli.create_issue() method\nwith Args, and asserts that the expected error message is printed.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "ca852cc63ebc4b59e68e551a84ddc592591621b7",
            "docstring": "\"\"\"\nHandles exception raised when calling the AI service to improve text.\n\nArguments:\n- cli: An object representing the CLI application.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- AiError: Raised when the AI service fails to improve the text.\n\nSide Effects:\n- Modifies the behavior of the AI provider by setting the side effect of raising an AiError when improve_text is called.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "a4e7691f5e272ca6cb864f9c836c720980807743",
            "docstring": "\"\"\"\nThis function is a test function for the 'cli_create_issue' command. It mocks the behavior of the TemplateLoader\nclass by using MagicMock and Patch to simulate the loading of a template with specific fields and a rendered\ndescription. It is used to test the functionality of creating an issue via the CLI.\n\nArguments:\n- cli: An object representing the CLI interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs during testing.\n\nSide Effects:\n- Modifies the behavior of the TemplateLoader class using MagicMock and Patch to simulate specific template loading\nand rendering.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "788ccf5d25c17be0ccf74a7c86ff1e7567f14693",
            "docstring": "\"\"\"\nThis module contains test cases for the command-line interface (CLI) command responsible for creating issues in a\nproject management system, such as JIRA, using the pytest framework.\n\nThe tests validate the functionality of the `create_issue` function across various scenarios, including:\n- Handling `FileNotFoundError` when template files are missing.\n- Managing exceptions raised by the AI service during text improvement.\n- Successful creation of an issue with proper output verification.\n\nEach test case utilizes mocking to isolate the functionality being tested, ensuring that tests are reliable and not\ndependent on external systems or files. The module includes functions to simulate different error conditions and\nvalidate the output of the CLI commands.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_set_priority_input_cli_check_love.py": [
        {
            "sha1": "a1b2ec2647b46c9b3664fcd1b3abefaa7c7ba4b7",
            "docstring": "\"\"\"\nThis script defines a test function 'test_set_priority_love_input' that tests the 'set_priority' method of a CLI class.\nThe test creates a MagicMock object and a custom Args class with issue key and priority attributes. It then captures\nthe output of the method using StringIO and sys.stdout redirection. Finally, it asserts that the output contains a\nspecific message confirming the priority setting.\n\nFunction:\n- test_set_priority_love_input(cli): Set the Jira priority for the 'love' input in the CLI.\n\nArguments:\n- cli: An instance of the CLI object.\n\nSide Effects:\n- Modifies the 'jira' attribute of the CLI object by assigning a MagicMock object to it.\n\"\"\"",
            "last_accessed": 1745566534
        },
        {
            "sha1": "7215b4512e76a0f12366125d10f52ded727908f4",
            "docstring": "\"\"\"\nSet the Jira priority for the 'love' input in the CLI.\n\nArguments:\n- cli: An instance of the CLI object.\n\nSide Effects:\n- Modifies the 'jira' attribute of the CLI object by assigning a MagicMock object to it.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "3f1d2f6fa7291969b948fbd5299baefd1cd1bf4a",
            "docstring": "\"\"\"\nThis script defines a test function 'test_set_priority_love_input' that tests the 'set_priority' method of a CLI class.\nThe test creates a MagicMock object and a custom Args class with issue key and priority attributes. It then captures\nthe output of the method using StringIO and sys.stdout redirection. Finally, it asserts that the output contains a\nspecific message confirming the priority setting.\n\nFunction:\n- test_set_priority_love_input(cli): Set the Jira priority for the 'love' input in the CLI.\n\nArguments:\n- cli: An instance of the CLI object.\n\nSide Effects:\n- Modifies the 'jira' attribute of the CLI object by assigning a MagicMock object to it.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_remove_sprint_exception_cli.py": [
        {
            "sha1": "3808c70caea2113db6e302cb5b310cbeee56d6b5",
            "docstring": "\"\"\"\nThis file contains a unit test for the remove_sprint method. It mocks the remove_from_sprint method to raise a\nRemoveFromSprintError exception and tests the behavior of the remove_sprint method when this exception is raised. The\ntest asserts that the error message \"\u274c Failed to remove sprint\" is displayed when the exception occurs.\n\nFunctions:\n- test_remove_sprint_error: Mocks the remove_from_sprint method to raise an exception during testing. It takes two\narguments:\n- cli (object): The CLI object used for testing.\n- capsys (object): The pytest built-in fixture capsys for capturing stdout and stderr.\n\nExceptions:\n- RemoveFromSprintError: An exception raised when attempting to remove an issue from a sprint.\n\"\"\"",
            "last_accessed": 1745566538
        },
        {
            "sha1": "76127fa4e23c467daced5e7195c790881f2eff79",
            "docstring": "\"\"\"\nMock the remove_from_sprint method to raise an exception during testing.\n\nArguments:\n- cli (object): The CLI object used for testing.\n- capsys (object): The pytest built-in fixture capsys for capturing stdout and stderr.\n\nExceptions:\n- RemoveFromSprintError: An exception raised when attempting to remove an issue from a sprint.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "06049f0e1df79a301b03d441a1de69c765156fc1",
            "docstring": "\"\"\"\nThis file contains a unit test for the remove_sprint method. It mocks the remove_from_sprint method to raise a\nRemoveFromSprintError exception and tests the behavior of the remove_sprint method when this exception is raised. The\ntest asserts that the error message \"\u274c Failed to remove sprint\" is displayed when the exception occurs.\n\nFunctions:\n- test_remove_sprint_error: Mocks the remove_from_sprint method to raise an exception during testing. It takes two\narguments:\n    - cli (object): The CLI object used for testing.\n    - capsys (object): The pytest built-in fixture capsys for capturing stdout and stderr.\n\nExceptions:\n- RemoveFromSprintError: An exception raised when attempting to remove an issue from a sprint.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_script_dry_run_cli.py": [
        {
            "sha1": "4a6f5f96ac6e362a4d5b6fde8f92707f1827d5ce",
            "docstring": "\"\"\"\nThis script contains a test function to perform a dry run of a JIRA creation script. It sets up the environment\nvariables, creates a temporary template file, and mocks the subprocess.run function to avoid actual execution of the\nscript. The script is then called with specific arguments to simulate a dry run, and the call is checked using a mock\nassertion.\n\nFunctions:\n- test_script_dry_run: Run a test script in dry-run mode with predefined environment variables.\n\"\"\"",
            "last_accessed": 1745566542
        },
        {
            "sha1": "f543b3e28e77207872a29ef35e18ce758badf005",
            "docstring": "\"\"\"\nRun a test script in dry-run mode with predefined environment variables.\n\nArguments:\nNo arguments.\n\nSide Effects:\n- Sets up a test environment with predefined environment variables for a dry-run test script.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "85eee2cfa0abce6aa7650edcdd7f0eb3d5d0f973",
            "docstring": "\"\"\"\nThis script contains a test function to perform a dry run of a JIRA creation script. It sets up the environment\nvariables, creates a temporary template file, and mocks the subprocess.run function to avoid actual execution of the\nscript. The script is then called with specific arguments to simulate a dry run, and the call is checked using a mock\nassertion.\n\nFunctions:\n- test_script_dry_run: Run a test script in dry-run mode with predefined environment variables.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_set_status_print_cli.py": [
        {
            "sha1": "0ce4c4a1193f68856125328c127fdb2bb56f817f",
            "docstring": "\"\"\"\nThis script contains a test case for the set_status method in a CLI application.\nIt mocks the set_status method using MagicMock and then calls the set_status method with specific arguments.\nFinally, it asserts that the set_status method was called with the correct arguments.\n\nFunctions:\n- test_set_status_print(cli): Mocks the set_status method for a given CLI object and asserts the correct arguments\npassed to set_status.\n\nSide Effects:\n- Modifies the set_status method of the jira attribute in the provided CLI object.\n\"\"\"",
            "last_accessed": 1745566544
        },
        {
            "sha1": "088dcb3eaa7cc17cc3ec3a1aa0053e3688998104",
            "docstring": "\"\"\"\nMock the set_status method for a given CLI object.\n\nArguments:\n- cli (object): The CLI object for which the set_status method is being mocked.\n\nSide Effects:\n- Modifies the set_status method of the jira attribute in the provided CLI object.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "92e3b1bd63ede35e0752fc80f0d46f68be01f20f",
            "docstring": "\"\"\"\nThis script contains a test case for the set_status method in a CLI application.\nIt mocks the set_status method using MagicMock and then calls the set_status method with specific arguments.\nFinally, it asserts that the set_status method was called with the correct arguments.\n\nFunctions:\n- test_set_status_print(cli): Mocks the set_status method for a given CLI object and asserts the correct arguments\npassed to set_status.\n\nSide Effects:\n- Modifies the set_status method of the jira attribute in the provided CLI object.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_add_and_remove_sprint_cli.py": [
        {
            "sha1": "d9ced2f75d1904f25a4f6470c7ffee947ffd3c97",
            "docstring": "\"\"\"\nThis script defines unit tests for the 'add_sprint' and 'remove_sprint' functions in the 'cli' module.\nThe tests use MagicMock to mock certain functionalities.\nEach test creates an 'Args' class instance with specific attributes and then calls the corresponding function in the\n'cli' module.\nThe tests verify that the expected functions from the 'cli.jira' object are called once.\n\nFunctions:\n- test_add_to_sprint(cli): Adds a sprint to a Jira board using the provided CLI.\n- test_remove_sprint(cli): Remove a JIRA issue from the current sprint.\n\"\"\"",
            "last_accessed": 1745566548
        },
        {
            "sha1": "eb7aafee8cb5efb11fdc8495efb6503d28923cbc",
            "docstring": "\"\"\"\nAdds a sprint to a Jira board using the provided CLI.\n\nArguments:\n- cli (object): An instance of the CLI object used to interact with Jira.\n\nSide Effects:\n- Modifies the 'add_to_sprint' attribute of the 'cli.jira' object by replacing it with a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "8d5105b11eacc86d606089dd68377ceaa06cde9d",
            "docstring": "\"\"\"\nRemove a JIRA issue from the current sprint.\n\nArguments:\n- cli: An object representing the command-line interface.\n\nSide Effects:\n- Modifies the 'remove_from_sprint' attribute of the 'jira' object in the 'cli' object.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "6590668b394255beb99db2aad3e987114047117b",
            "docstring": "\"\"\"\nThis script defines unit tests for the 'add_sprint' and 'remove_sprint' functions in the 'cli' module.\nThe tests use MagicMock to mock certain functionalities.\nEach test creates an 'Args' class instance with specific attributes and then calls the corresponding function in the\n'cli' module.\nThe tests verify that the expected functions from the 'cli.jira' object are called once.\n\nFunctions:\n- test_add_to_sprint(cli): Adds a sprint to a Jira board using the provided CLI.\n- test_remove_sprint(cli): Remove a JIRA issue from the current sprint.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_blocked_cli.py": [
        {
            "sha1": "8b8b6daa6243e74349ed04ca8a0fc397e2b1a715",
            "docstring": "\"\"\"\nThis module contains unit tests for the 'blocked' function within the CLI class, focusing on various scenarios related\nto blocked issues in a project management context.\n\nThe test cases include:\n- `test_blocked_issues_found`: Verifies behavior when blocked issues are present.\n- `test_blocked_no_issues`: Checks the response when no issues are found.\n- `test_blocked_none_blocked`: Validates the output when issues are listed but none are blocked.\n- `test_blocked_exception`: Tests the handling of exceptions raised during the listing of blocked issues.\n\nAdditionally, the module defines an `Args` class to encapsulate project-related arguments such as project name,\ncomponent, and user.\n\"\"\"",
            "last_accessed": 1745566554
        },
        {
            "sha1": "122cc7161e1cfefdac5b54434a4565ae0e693806",
            "docstring": "\"\"\"\nA class to store information about project arguments.\n\nAttributes:\n    project (str): The name of the project.\n    component (str): The component related to the project.\n    user (str): The user associated with the project.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "ab5cd33337e9d17d77f80e17d611c4ef29aab9f7",
            "docstring": "\"\"\"\nSet up a mock Jira instance for testing purposes.\n\nArguments:\n- cli: Command Line Interface object.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nSide Effects:\n- Initializes a MagicMock Jira instance on the cli object for testing.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "67c949c3915bd71289ed74e152d090f25ee2495e",
            "docstring": "\"\"\"\nSummary:\nSimulates a test scenario where no issues are blocked, using a provided CLI object and capsys for capturing system output.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface) with a 'jira' attribute.\n- capsys: A pytest fixture for capturing stdout and stderr output during the test.\n\nSide Effects:\n- Modifies the 'jira' attribute of the provided 'cli' object by setting it to a MagicMock.\n- Configures the 'list_issues' method of the 'jira' attribute to return an empty list ([]).\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "c1fefda8b264fdee5dc99e41ccc19adecbe2a0b8",
            "docstring": "\"\"\"\nCheck if there are any blocked issues in JIRA.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture for capturing stdout and stderr output.\n\nReturn: N/A\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "e123f00b29d633927955b9b39fc8b41d7a3c7281",
            "docstring": "\"\"\"\nSimulate a test scenario where a ListBlockedError exception is raised when calling the list_issues method on a Jira\nclient object.\n\nArguments:\n- cli: An object representing a Jira client.\n- capsys: A fixture for capturing stdout and stderr output during testing.\n\nExceptions:\n- ListBlockedError: Raised when an issue is blocked, with an error message indicating the blockage.\n\nSide Effects:\n- Modifies the behavior of the list_issues method of the Jira client object to raise a ListBlockedError.\n\nNote: This function is typically used in testing to handle and test scenarios where specific exceptions are raised.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "6351b0157f87201142b82374451089dffa42dbc5",
            "docstring": "\"\"\"\nThis module contains unit tests for the 'blocked' function within the CLI class, focusing on various scenarios related\nto blocked issues in a project management context.\n\nThe test cases include:\n- `test_blocked_issues_found`: Verifies behavior when blocked issues are present.\n- `test_blocked_no_issues`: Checks the response when no issues are found.\n- `test_blocked_none_blocked`: Validates the output when issues are listed but none are blocked.\n- `test_blocked_exception`: Tests the handling of exceptions raised during the listing of blocked issues.\n\nAdditionally, the module defines an `Args` class to encapsulate project-related arguments such as project name,\ncomponent, and user.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_try_cleanup_exception_cli.py": [
        {
            "sha1": "fe2ca29b86e350d549a0c4d2f5ac09fd6248dde7",
            "docstring": "\"\"\"\nSimulates an error scenario by mocking the AI provider's improve_text method.\n\nArguments:\n- cli: An instance of the CLI class.\n\nExceptions:\n- AiError: Raised when the improve_text method of the AI provider encounters an error.\n\"\"\"",
            "last_accessed": 1745566568
        },
        {
            "sha1": "402013ed32cd3f3327f7eab9c9b5cdb407f5c450",
            "docstring": "\"\"\"\nSimulates an error scenario by mocking the AI provider's improve_text method.\n\nArguments:\n- cli: An instance of the CLI class.\n\nExceptions:\n- AiError: Raised when the improve_text method of the AI provider encounters an error.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "b5d416e6f9efc819436921514226bf2c88903f58",
            "docstring": "\"\"\"\nSimulates an error scenario by mocking the AI provider's improve_text method.\n\nArguments:\n- cli: An instance of the CLI class.\n\nExceptions:\n- AiError: Raised when the improve_text method of the AI provider encounters an error.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_migrate_success_print_cli.py": [
        {
            "sha1": "252d1cae59a40b4e69a507337884dd51a4f11d9c",
            "docstring": "\"\"\"\nThis script contains a unit test for the 'migrate' method in a CLI application. It mocks the 'migrate_issue' method and\n'jira_url' attribute of a 'cli' object using MagicMock. It also creates a mock 'Args' class with 'issue_key' and\n'new_type' attributes. The 'migrate' method is then called with an instance of the 'Args' class for testing purposes.\n\nFunctions:\n- test_migrate_success_print(cli): Mocks the migrate_issue method and sets the jira_url for the CLI.\n\nArguments:\n- cli: An instance of the CLI class.\n\nSide Effects:\n- Sets the return value of the migrate_issue method to \"AAP-test_migrate_success_print-0\".\n- Sets the jira_url attribute of the cli.jira instance to \"http://fake\".\n\"\"\"",
            "last_accessed": 1745566572
        },
        {
            "sha1": "87945cf2e6d27d6bd8c6b49afaa4cd4b1a04612b",
            "docstring": "\"\"\"\nMock the migrate_issue method and set the Jira URL for the CLI.\n\nArguments:\n- cli: An instance of the CLI class.\n\nSide Effects:\n- Sets the return value of the migrate_issue method to \"AAP-test_migrate_success_print-0\".\n- Sets the jira_url attribute of the cli.jira instance to \"http://fake\".\n\"\"\"",
            "last_accessed": 1745566574
        },
        {
            "sha1": "b009132e93664a37dd7fdeb2d0a7752874cfdb42",
            "docstring": "\"\"\"\nThis script contains a unit test for the 'migrate' method in a CLI application. It mocks the 'migrate_issue' method and\n'jira_url' attribute of a 'cli' object using MagicMock. It also creates a mock 'Args' class with 'issue_key' and\n'new_type' attributes. The 'migrate' method is then called with an instance of the 'Args' class for testing purposes.\n\nFunctions:\n- test_migrate_success_print(cli): Mocks the migrate_issue method and sets the jira_url for the CLI.\n\nArguments:\n- cli: An instance of the CLI class.\n\nSide Effects:\n- Sets the return value of the migrate_issue method to \"AAP-test_migrate_success_print-0\".\n- Sets the jira_url attribute of the cli.jira instance to \"http://fake\".\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "da2e572416408e0d5a0e03f3b3c1164f3b164d1a",
            "docstring": "\"\"\"\nMock the migrate_issue method and set the Jira URL for the CLI.\n\nArguments:\n- cli: An instance of the CLI class.\n\nSide Effects:\n- Sets the return value of the migrate_issue method to \"AAP-test_migrate_success_print-0\".\n- Sets the jira_url attribute of the cli.jira instance to \"http://fake\".\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_unassign_cli.py": [
        {
            "sha1": "369bd4d80967d3d28b8deb286e5c95103b7fab97",
            "docstring": "\"\"\"\nThis script defines two test functions: test_unassign_success and test_unassign_failure.\nEach test function mocks the behavior of unassigning an issue in a Jira system using a lambda function.\nThe test_unassign_success function simulates a successful unassignment by returning True, while test_unassign_failure\nsimulates a failed unassignment by returning False.\nBoth functions then assert the presence of specific output messages in the captured stdout using capsys.\nThese tests are designed to validate the behavior of the unassign method in the provided CLI implementation.\n\ntest_unassign_success:\nUnassign an issue in Jira successfully.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nSide Effects:\n- Modifies the unassign_issue method of the Jira object in the cli.\n\ntest_unassign_failure:\nSimulates a failure scenario when trying to unassign an issue in Jira.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs.\n\nNo return value.\n\nSide Effects:\n- Modifies the unassign_issue method of the Jira object to always return False.\n\"\"\"",
            "last_accessed": 1745566577
        },
        {
            "sha1": "1ec3ce1c6d8f17b8891f1051fa2245484b06ea51",
            "docstring": "\"\"\"\nUnassign an issue in Jira successfully.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nSide Effects:\n- Modifies the unassign_issue method of the Jira object in the cli.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "c47cc7cf9cd056a0aa60b633890f67f0b9317fab",
            "docstring": "\"\"\"\nSimulates a failure scenario when trying to unassign an issue in Jira.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs.\n\nNo return value.\n\nSide Effects:\n- Modifies the unassign_issue method of the Jira object to always return False.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "c35289242252a3f6e533d25fedd32d4b595de14a",
            "docstring": "\"\"\"\nThis script defines two test functions: test_unassign_success and test_unassign_failure.\nEach test function mocks the behavior of unassigning an issue in a Jira system using a lambda function.\nThe test_unassign_success function simulates a successful unassignment by returning True, while test_unassign_failure\nsimulates a failed unassignment by returning False.\nBoth functions then assert the presence of specific output messages in the captured stdout using capsys.\nThese tests are designed to validate the behavior of the unassign method in the provided CLI implementation.\n\ntest_unassign_success:\nUnassign an issue in Jira successfully.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nSide Effects:\n- Modifies the unassign_issue method of the Jira object in the cli.\n\ntest_unassign_failure:\nSimulates a failure scenario when trying to unassign an issue in Jira.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs.\n\nNo return value.\n\nSide Effects:\n- Modifies the unassign_issue method of the Jira object to always return False.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_quarterly_connection.py": [
        {
            "sha1": "bd3b7c2c371501d9cddc570ff3e9a19075fbd14e",
            "docstring": "\"\"\"\nThis module contains unit tests for the quarterly connection report functionality in the command-line interface (CLI).\n\nThe tests included in this module cover various scenarios for generating quarterly connection reports:\n- `test_quarterly_connection_report_success`: Verifies successful execution of the quarterly connection report.\n- `test_quarterly_connection_report_no_issues`: Checks the behavior when no issues are found for the quarterly\nconnection report.\n- `test_quarterly_connection_report_error`: Tests the handling of `QuarterlyConnectionError` during the report\ngeneration process.\n\nThe tests utilize mocking techniques, specifically `MagicMock` and `patch`, to isolate and control the behavior of\nmethods and classes involved in the report generation.\n\"\"\"",
            "last_accessed": 1745566583
        },
        {
            "sha1": "907c2b004c75f5538b8120bdca2ba1915e674e0c",
            "docstring": "\"\"\"\nGenerate a quarterly connection report successfully.\n\nArguments:\n- cli: An instance of a command-line interface (CLI) used to interact with the system.\n\nThis function mocks the _register_subcommands and _dispatch_command methods to generate a quarterly connection\nreport successfully.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "289c6e5220e677ca738ec82ff7f10e04556284a7",
            "docstring": "\"\"\"\nGenerates a quarterly connection report without any issues.\n\nArguments:\n- cli: An object representing the command-line interface.\n\nSide Effects:\n- Mocks the _register_subcommands and _dispatch_command methods.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "c69c1639204ff1cb2a4308b75a64317731617a84",
            "docstring": "\"\"\"\nGenerates a quarterly connection report error for a given CLI.\n\nArguments:\n- cli (object): An object representing the CLI for which the report error will be generated.\n\nSide Effects:\n- Mocks the _register_subcommands and _dispatch_command methods internally.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "5a3e449e82549e214d45559181f81e2a12ec6b3a",
            "docstring": "\"\"\"\nThis module contains unit tests for the quarterly connection report functionality in the command-line interface (CLI).\n\nThe tests included in this module cover various scenarios for generating quarterly connection reports:\n- `test_quarterly_connection_report_success`: Verifies successful execution of the quarterly connection report.\n- `test_quarterly_connection_report_no_issues`: Checks the behavior when no issues are found for the quarterly\nconnection report.\n- `test_quarterly_connection_report_error`: Tests the handling of `QuarterlyConnectionError` during the report\ngeneration process.\n\nThe tests utilize mocking techniques, specifically `MagicMock` and `patch`, to isolate and control the behavior of\nmethods and classes involved in the report generation.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_vote_story_points_exception_cli.py": [
        {
            "sha1": "6c4e733087d296085960e452ab63459548a88e41",
            "docstring": "\"\"\"\nTest script to validate the behavior of the vote_story_points method in the cli module.\n\nThe test simulates an error scenario by mocking the vote_story_points method and raising a VoteStoryPointsError.\nIt asserts that the error message is present in the output when the method is called with specific arguments.\n\nThis script uses pytest for testing and unittest.mock for mocking the method behavior.\n\nFunctions:\n- test_vote_story_points_error: Simulate an error when voting for story points in Jira. It takes 'cli' (an instance of\nthe CLI class) and 'capsys' (a fixture provided by pytest to capture stdout and stderr) as arguments. It raises a\nVoteStoryPointsError when simulating an error while voting for story points in Jira.\n\"\"\"",
            "last_accessed": 1745566590
        },
        {
            "sha1": "263ad8fc6a72a6f06b1edf5fa117feb9e9fe5a66",
            "docstring": "\"\"\"\nSimulate an error when voting for story points in Jira.\n\nArguments:\n- cli: An instance of the CLI class.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- VoteStoryPointsError: Raised when simulating an error while voting for story points in Jira.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "a49cbf92389409db2ab2bfeb81b67f63d404e38a",
            "docstring": "\"\"\"\nTest script to validate the behavior of the vote_story_points method in the cli module.\n\nThe test simulates an error scenario by mocking the vote_story_points method and raising a VoteStoryPointsError.\nIt asserts that the error message is present in the output when the method is called with specific arguments.\n\nThis script uses pytest for testing and unittest.mock for mocking the method behavior.\n\nFunctions:\n- test_vote_story_points_error: Simulate an error when voting for story points in Jira. It takes 'cli' (an instance of\nthe CLI class) and 'capsys' (a fixture provided by pytest to capture stdout and stderr) as arguments. It raises a\nVoteStoryPointsError when simulating an error while voting for story points in Jira.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_add_sprint_exception_cli.py": [
        {
            "sha1": "b03949dfefaea9d8e28653056a947ddb3e917ba7",
            "docstring": "\"\"\"\nThis script contains a unit test function test_add_sprint_exception to test the handling of an exception in the\nadd_sprint method of a CLI application. The test mocks the add_to_sprint_by_name method using MagicMock to raise an\nAddSprintError exception. It then calls the add_sprint method with specific arguments and asserts that the exception is\nraised. The output is captured, and the presence of an expected failure message is checked. The test is designed to\nverify the behavior of handling exceptions in the add_sprint method.\n\ntest_add_sprint_exception:\nMock the add_to_sprint_by_name method to raise an exception.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- AddSprintError: Raised when the add_to_sprint_by_name method encounters an error.\n\"\"\"",
            "last_accessed": 1745566595
        },
        {
            "sha1": "30ffefa870217538786d3df0b3d561af5282d793",
            "docstring": "\"\"\"\nMock the add_to_sprint_by_name method to raise an exception.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- AddSprintError: Raised when the add_to_sprint_by_name method encounters an error.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "9207c148bb2ece1b97af146d12c75438b5614c59",
            "docstring": "\"\"\"\nThis script contains a unit test function test_add_sprint_exception to test the handling of an exception in the\nadd_sprint method of a CLI application. The test mocks the add_to_sprint_by_name method using MagicMock to raise an\nAddSprintError exception. It then calls the add_sprint method with specific arguments and asserts that the exception is\nraised. The output is captured, and the presence of an expected failure message is checked. The test is designed to\nverify the behavior of handling exceptions in the add_sprint method.\n\ntest_add_sprint_exception:\nMock the add_to_sprint_by_name method to raise an exception.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- AddSprintError: Raised when the add_to_sprint_by_name method encounters an error.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_ai_helper_cli.py": [
        {
            "sha1": "fde8a500b51484dde5db9c9f0e6b8b64cdc64b89",
            "docstring": "\"\"\"\nThis module contains unit tests for the AI helper command line interface (CLI) functionality.\nThe tests cover various aspects of the CLI AI helper, including command dispatching, error handling, and output\nprocessing.\n\nKey functions tested:\n- `call_function`: Verifies correct command dispatching.\n- `ask_ai_question`: Tests various scenarios including error handling, valid responses, and invalid JSON.\n- `clean_ai_output`: Ensures proper parsing of AI output.\n- `get_cli_command_metadata`: Validates the correct parsing of command metadata for CLI commands.\n\nThe tests utilize the `pytest` framework and include mocking of dependencies to isolate functionality and control test\nscenarios.\n\"\"\"",
            "last_accessed": 1745566599
        },
        {
            "sha1": "c70712825773203664335f6602b54f506279c50f",
            "docstring": "\"\"\"\nSimulates a test scenario for calling a function.\n\nArguments:\nNo arguments.\n\nReturns:\nNo return value.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "9661a0d380c4367d6b13c33464a586c3c89780ab",
            "docstring": "\"\"\"\nExecute a test for an AI helper function using the provided command line interface (CLI).\n\nArguments:\n- cli (object): The command line interface object used for testing.\n\nExceptions:\n- Raises an Exception using pytest if an error occurs during the test execution.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "6b6a04255ec1361b8fc5a574f4e26721de2225fc",
            "docstring": "\"\"\"\nParses CLI command metadata for a specific CLI.\n\nArguments:\n- cli (object): The Command Line Interface (CLI) object to parse metadata for.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "7398a5d0104dc4d73be3fc10e0ad190a9a2535d7",
            "docstring": "\"\"\"\nTest to ensure that the 'continue' statement correctly skips actions with 'help' or 'command' in their 'dest'.\n\nArguments:\nNo arguments.\n\nReturns:\nNo return value.\n\nExceptions:\nNo exceptions raised.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "977819e8c390fb22e6ccb53c457a36644619dd3b",
            "docstring": "\"\"\"\nTest the last return statement in the ask_ai_question function,\nensuring that the function returns True when ai_generated_steps is a non-empty list.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "4afd328310cf13fdb96a464b4eb2160f0467fd6e",
            "docstring": "\"\"\"\nClean the output of an AI tool by parsing and converting it into a list of dictionaries.\n\nArguments:\n- raw_valid (str): A string containing JSON-formatted data outputted by an AI tool.\n\nReturn:\n- list: A list of dictionaries representing the parsed data extracted from the input string.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "3b14fd6cafb117737ae25dd3ca949520f35b7daa",
            "docstring": "\"\"\"\nSimulate an exception scenario in the CLI AI helper.\n\nArguments:\n- cli: An instance of the CLI to be tested.\n\nExceptions:\n- AIHelperError: Raised when there is an error fetching metadata.\n\nSide Effects:\n- Modifies the behavior of 'get_cli_command_metadata' to raise an exception.\n\nThe function tests the CLI AI helper by mocking the 'get_cli_command_metadata' function to raise an 'AIHelperError'\nexception. It then asserts that the exception is raised when the function is called with the provided mocks.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "ff9e2677782ad7c7732c805fbf6c5869650c7011",
            "docstring": "\"\"\"\nSimulate asking an AI question and handle error response.\n\nArguments:\n- mock_os_system: A MagicMock object mocking the os.system function.\n- mock_gtts: A MagicMock object mocking the Google Text-to-Speech function.\n\nExceptions:\nNone\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "ca775fc79ac8dc91f4a511bef118cd94d18731cd",
            "docstring": "\"\"\"\nSimulates asking an AI system a question without errors.\n\nArguments:\n- mock_os_system: MagicMock object for mocking the OS system.\n- mock_gtts: MagicMock object for mocking the Google Text-to-Speech service.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "ce055653cd2ab7f3b4bcf2e0ebf5dbe2c81b01c6",
            "docstring": "\"\"\"\nSimulates the steps for asking an AI question in a test environment.\n\nArguments:\n- mock_call_function: A MagicMock object representing a function call.\n- mock_os_system: A MagicMock object representing an OS system call.\n- mock_gtts: A MagicMock object representing Google Text-to-Speech.\n\nNo return value.\n\nSide Effects:\n- Initializes mock_client as a MagicMock object.\n- Initializes mock_ai_provider as a MagicMock object with the improve_text method returning a specific JSON string.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "dd89c5c1d4828d2b89a60503b728020ac0de6fd3",
            "docstring": "\"\"\"\nSimulate asking an AI question with empty steps.\n\nArguments:\n- mock_os_system: A MagicMock object representing the mocked os.system function.\n- mock_gtts: A MagicMock object representing the mocked gtts library.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "02a34429e1fcaa93706c88d8bdf6c7c2cdd29f2a",
            "docstring": "\"\"\"\nSimulates asking an AI question with invalid JSON input.\n\nArguments:\n- mock_os_system: MagicMock object for mocking the os.system function.\n- mock_gtts: MagicMock object for mocking the Google Text-to-Speech function.\n\nSide Effects:\n- Creates a MagicMock object for client simulation.\n- Creates a MagicMock object for AI provider simulation with a method to improve text.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "7e79dc7811507ae2e15f043670de10a6d34b3388",
            "docstring": "\"\"\"\nSimulate a successful test scenario for a CLI AI helper function.\n\nArguments:\n- mock_ask_ai_question: A mock object for asking AI questions.\n- mock_get_cli_command_metadata: A mock object for retrieving CLI command metadata.\n- cli: The CLI object used for testing.\n\nSide Effects:\n- Sets up mock return values for the dependencies to simulate a successful test scenario.\n\"\"\"",
            "last_accessed": 1745566623
        },
        {
            "sha1": "4b30a33f2d49c8434470c73e53f1a63d75d2a609",
            "docstring": "\"\"\"\nThis module contains unit tests for the AI helper command line interface (CLI) functionality.\nThe tests cover various aspects of the CLI AI helper, including command dispatching, error handling, and output\nprocessing.\n\nKey functions tested:\n- `call_function`: Verifies correct command dispatching.\n- `ask_ai_question`: Tests various scenarios including error handling, valid responses, and invalid JSON.\n- `clean_ai_output`: Ensures proper parsing of AI output.\n- `get_cli_command_metadata`: Validates the correct parsing of command metadata for CLI commands.\n\nThe tests utilize the `pytest` framework and include mocking of dependencies to isolate functionality and control test\nscenarios.\n\"\"\"",
            "last_accessed": 1745608743
        },
        {
            "sha1": "a0109caa1bc60de76b007a4fd439c15619a6b036",
            "docstring": "\"\"\"\nSimulate a successful test scenario for a CLI AI helper function.\n\nArguments:\n- mock_ask_ai_question: A mock object for asking AI questions.\n- mock_get_cli_command_metadata: A mock object for retrieving CLI command metadata.\n- cli: The CLI object used for testing.\n\nSide Effects:\n- Sets up mock return values for the dependencies to simulate a successful test scenario.\n\"\"\"",
            "last_accessed": 1745608745
        },
        {
            "sha1": "8dac58361f7112287abd38b16a54deda1de41fed",
            "docstring": "\"\"\"\nThis module contains unit tests for the AI helper command line interface (CLI) functionality.\nThe tests cover various aspects of the CLI AI helper, including command dispatching, error handling, and output\nprocessing.\n\nKey functions tested:\n- `call_function`: Verifies correct command dispatching.\n- `ask_ai_question`: Tests various scenarios including error handling, valid responses, and invalid JSON.\n- `clean_ai_output`: Ensures proper parsing of AI output.\n- `get_cli_command_metadata`: Validates the correct parsing of command metadata for CLI commands.\n\nThe tests utilize the `pytest` framework and include mocking of dependencies to isolate functionality and control test\nscenarios.\n\"\"\"",
            "last_accessed": 1745609883
        },
        {
            "sha1": "38c3f398d37675847792e7fef6454bf085aca642",
            "docstring": "\"\"\"\nSimulate a successful test scenario for a CLI AI helper function.\n\nArguments:\n- mock_ask_ai_question: A mock object for asking AI questions.\n- mock_get_cli_command_metadata: A mock object for retrieving CLI command metadata.\n- cli: The CLI object used for testing.\n\nSide Effects:\n- Sets up mock return values for the dependencies to simulate a successful test scenario.\n\"\"\"",
            "last_accessed": 1745609885
        },
        {
            "sha1": "74fe1f3ab82bac77f95626d9b8b5c8f8f84adff1",
            "docstring": "\"\"\"\nThis module contains unit tests for the AI helper command line interface (CLI) functionality.\nThe tests cover various aspects of the CLI AI helper, including command dispatching, error handling, and output\nprocessing.\n\nKey functions tested:\n- `call_function`: Verifies correct command dispatching.\n- `ask_ai_question`: Tests various scenarios including error handling, valid responses, and invalid JSON.\n- `clean_ai_output`: Ensures proper parsing of AI output.\n- `get_cli_command_metadata`: Validates the correct parsing of command metadata for CLI commands.\n\nThe tests utilize the `pytest` framework and include mocking of dependencies to isolate functionality and control test\nscenarios.\n\"\"\"",
            "last_accessed": 1745610020
        },
        {
            "sha1": "23cf6bb1ba1f15695b359d70a15b186f5babb9f8",
            "docstring": "\"\"\"\nSimulate a successful test scenario for a CLI AI helper function.\n\nArguments:\n- mock_ask_ai_question: A mock object for asking AI questions.\n- mock_get_cli_command_metadata: A mock object for retrieving CLI command metadata.\n- cli: The CLI object used for testing.\n\nSide Effects:\n- Sets up mock return values for the dependencies to simulate a successful test scenario.\n\"\"\"",
            "last_accessed": 1745610022
        },
        {
            "sha1": "25778a8b974c7e4d9bb272109698a1d4ac72eede",
            "docstring": "\"\"\"\nThis module contains unit tests for the AI helper command line interface (CLI) functionality.\nThe tests cover various aspects of the CLI AI helper, including command dispatching, error handling, and output\nprocessing.\n\nKey functions tested:\n- `call_function`: Verifies correct command dispatching.\n- `ask_ai_question`: Tests various scenarios including error handling, valid responses, and invalid JSON.\n- `clean_ai_output`: Ensures proper parsing of AI output.\n- `get_cli_command_metadata`: Validates the correct parsing of command metadata for CLI commands.\n\nThe tests utilize the `pytest` framework and include mocking of dependencies to isolate functionality and control test\nscenarios.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "037c9d3765b973581056ce57dfecc005ead34213",
            "docstring": "\"\"\"\nSimulate a successful test scenario for a CLI AI helper function.\n\nArguments:\n- mock_ask_ai_question: A mock object for asking AI questions.\n- mock_get_cli_command_metadata: A mock object for retrieving CLI command metadata.\n- cli: The CLI object used for testing.\n\nSide Effects:\n- Sets up mock return values for the dependencies to simulate a successful test scenario.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_add_comment_with_text_cli.py": [
        {
            "sha1": "1bbeb202af37783c68b4ea0ddc11a2f5f8bbf4ba",
            "docstring": "\"\"\"\nThis script contains a unit test function test_add_comment_with_text that tests the add_comment method of a CLI class.\nIt mocks dependencies using MagicMock from unittest.mock. The test verifies that the add_comment method correctly\ncleans and adds a comment to a Jira issue, and outputs a success message.\n\ntest_add_comment_with_text(cli, capsys) function:\nAdds a comment with text using the provided CLI object.\n\nArguments:\n- cli (object): The CLI object containing the necessary methods and attributes.\n- capsys (object): The capsys object for capturing stdout and stderr outputs.\n\"\"\"",
            "last_accessed": 1745566626
        },
        {
            "sha1": "ffd3a27830655eb919f00bbcae85151568ad9081",
            "docstring": "\"\"\"\nAdds a comment with text using the provided CLI object.\n\nArguments:\n- cli (object): The CLI object containing the necessary methods and attributes.\n- capsys (object): The capsys object for capturing stdout and stderr outputs.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "c8139d0b69871a8b0e40d3c1c86b6d6017b15690",
            "docstring": "\"\"\"\nThis script contains a unit test function test_add_comment_with_text that tests the add_comment method of a CLI class.\nIt mocks dependencies using MagicMock from unittest.mock. The test verifies that the add_comment method correctly\ncleans and adds a comment to a Jira issue, and outputs a success message.\n\ntest_add_comment_with_text(cli, capsys) function:\nAdds a comment with text using the provided CLI object.\n\nArguments:\n- cli (object): The CLI object containing the necessary methods and attributes.\n- capsys (object): The capsys object for capturing stdout and stderr outputs.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_clone_issue_cli.py": [
        {
            "sha1": "da31a8dcb9623535cc0850a133cb1e8ec64671a3",
            "docstring": "\"\"\"\nMocks the 'clone_issue' method in the 'cli.jira' object for testing purposes.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface).\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs during testing.\n\"\"\"",
            "last_accessed": 1745566628
        },
        {
            "sha1": "a8de673618dbed0109b57b6e2b2872225bf86b71",
            "docstring": "\"\"\"\nMocks the 'clone_issue' method in the 'cli.jira' object for testing purposes.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface).\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs during testing.\n\"\"\"",
            "last_accessed": 1745613456
        },
        {
            "sha1": "00964f6651c6bdd1f12984e18dc3e91d0e9ed031",
            "docstring": "\"\"\"\nMocks the 'clone_issue' method in the 'cli.jira' object for testing purposes.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface).\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs during testing.\n\"\"\"",
            "last_accessed": 1745613456
        }
    ],
    "jira_creator/tests/commands/test_set_summary_cli.py": [
        {
            "sha1": "9d41b9e4f50885b75302327e3e0756646e5e5514",
            "docstring": "\"\"\"\nSet a summary for a Jira issue using a mocked CLI.\n\nArguments:\n- cli: A mocked CLI object.\n- capsys: A fixture for capturing stdout and stderr outputs.\n\"\"\"",
            "last_accessed": 1745566631
        },
        {
            "sha1": "4cc7a807535857eb8b1c9ca0b95a46e0869517b9",
            "docstring": "\"\"\"\nSet a summary for a Jira issue using a mocked CLI.\n\nArguments:\n- cli: A mocked CLI object.\n- capsys: A fixture for capturing stdout and stderr outputs.\n\"\"\"",
            "last_accessed": 1745613457
        },
        {
            "sha1": "ee22c8f0db923a5ec5f1b8a87fe5eefe8d3c0071",
            "docstring": "\"\"\"\nSet a summary for a Jira issue using a mocked CLI.\n\nArguments:\n- cli: A mocked CLI object.\n- capsys: A fixture for capturing stdout and stderr outputs.\n\"\"\"",
            "last_accessed": 1745613457
        }
    ],
    "jira_creator/tests/commands/test_register_subcommands_cli.py": [
        {
            "sha1": "911fd6ae5d2884e13e6f79612de4946bb0364ec3",
            "docstring": "\"\"\"\nThis script defines a function test_register_subcommands_does_not_crash(cli) that tests the _register_subcommands\nmethod of a CLI class. It creates a dummy parser object using lambda functions to simulate the behavior of the\nadd_parser and add_argument methods. The test function is designed to ensure that the _register_subcommands method does\nnot crash when called with the dummy parser object.\n\nFunction test_register_subcommands_does_not_crash(cli):\n- Register subcommands for the CLI without crashing.\n- Arguments:\n- cli: An instance of the CLI class.\n- Side Effects:\n- Modifies the subcommands of the CLI instance by registering them using the provided parser.\n\"\"\"",
            "last_accessed": 1745566634
        },
        {
            "sha1": "98d0923cc52dbeff9d3c2ca73e056844ae7c1c85",
            "docstring": "\"\"\"\nRegister subcommands for the CLI without crashing.\n\nArguments:\n- cli: An instance of the CLI class.\n\nSide Effects:\n- Modifies the subcommands of the CLI instance by registering them using the provided parser.\n\"\"\"",
            "last_accessed": 1745613457
        },
        {
            "sha1": "62705296ff41c4872941cf6a4895248ebbe28be4",
            "docstring": "\"\"\"\nThis script defines a function test_register_subcommands_does_not_crash(cli) that tests the _register_subcommands\nmethod of a CLI class. It creates a dummy parser object using lambda functions to simulate the behavior of the\nadd_parser and add_argument methods. The test function is designed to ensure that the _register_subcommands method does\nnot crash when called with the dummy parser object.\n\nFunction test_register_subcommands_does_not_crash(cli):\n- Register subcommands for the CLI without crashing.\n- Arguments:\n- cli: An instance of the CLI class.\n- Side Effects:\n- Modifies the subcommands of the CLI instance by registering them using the provided parser.\n\"\"\"",
            "last_accessed": 1745613457
        }
    ],
    "jira_creator/tests/commands/test_view_issue_cli.py": [
        {
            "sha1": "f51818e00c3e73c57e75607ae37f081e159655ff",
            "docstring": "\"\"\"\nThis module contains unit tests for the `view_issue` function within the `cli` module. It utilizes `pytest` for testing\nand `MagicMock` to simulate interactions with the Jira API. The tests cover both successful and exceptional scenarios\nof viewing an issue, ensuring that correct outputs are produced and appropriate methods are invoked with expected\narguments.\n\nFunctions:\n- `test_view_issue(cli, capsys)`: Tests the successful retrieval of an issue.\n- `test_view_issue_exception(cli, capsys)`: Tests the handling of exceptions when attempting to view an issue.\n\nArguments:\n- `cli`: An instance of the command line interface used for testing.\n- `capsys`: A pytest fixture that captures standard output and error streams.\n\nExceptions:\n- `ViewIssueError`: Raised during the failure of the issue viewing process.\n\"\"\"",
            "last_accessed": 1745566638
        },
        {
            "sha1": "38cf54b8068289a6a9e120e507baf35e6277b354",
            "docstring": "\"\"\"\nSimulate a test scenario for viewing an issue.\n\nArguments:\n- cli: An object representing the command line interface for testing.\n- capsys: An object to capture stdout and stderr during testing.\n\nSide Effects:\n- Initializes a dictionary 'blob' with key-value pairs representing issue details.\n\"\"\"",
            "last_accessed": 1745613457
        },
        {
            "sha1": "3e2f4b8c2bd8e3b41a0d876b18d8d177ced7e880",
            "docstring": "\"\"\"\nSimulate an exception when viewing an issue in Jira for testing purposes.\n\nArguments:\n- cli: The Jira command line interface object.\n- capsys: The pytest fixture for capturing stdout and stderr.\n\nExceptions:\n- ViewIssueError: Raised when there is a failure while viewing an issue in Jira.\n\"\"\"",
            "last_accessed": 1745613457
        },
        {
            "sha1": "34a28d8d3c382f28c6f3472e93f1a3a4ee82295f",
            "docstring": "\"\"\"\nThis module contains unit tests for the `view_issue` function within the `cli` module. It utilizes `pytest` for testing\nand `MagicMock` to simulate interactions with the Jira API. The tests cover both successful and exceptional scenarios\nof viewing an issue, ensuring that correct outputs are produced and appropriate methods are invoked with expected\narguments.\n\nFunctions:\n- `test_view_issue(cli, capsys)`: Tests the successful retrieval of an issue.\n- `test_view_issue_exception(cli, capsys)`: Tests the handling of exceptions when attempting to view an issue.\n\nArguments:\n- `cli`: An instance of the command line interface used for testing.\n- `capsys`: A pytest fixture that captures standard output and error streams.\n\nExceptions:\n- `ViewIssueError`: Raised during the failure of the issue viewing process.\n\"\"\"",
            "last_accessed": 1745613457
        }
    ],
    "jira_creator/tests/commands/test_create_editor_flow_cli.py": [
        {
            "sha1": "d73896e6fe3178cf95d48a3486f5f6202ce5673b",
            "docstring": "\"\"\"\nThis script defines a test case for the 'test_create_editor' function. It mocks the 'create_issue' and 'improve_text'\nmethods using MagicMock. It creates a temporary file, writes a description into it, sets arguments for the CLI command,\nand calls the 'create_issue' method with the provided arguments. After the test, it cleans up the temporary file.\n\"\"\"",
            "last_accessed": 1745566643
        },
        {
            "sha1": "62f18b216d3f95070fcc6b63a2f326f096552802",
            "docstring": "\"\"\"\nMock methods related to creating an editor in a testing environment.\n\nArguments:\n- cli: A testing CLI object that allows mocking methods for creating an editor.\n\nSide Effects:\n- Mocks the 'create_issue' method of the Jira client to return a test value.\n- Mocks the 'improve_text' method of the AI provider to return a test value.\n\"\"\"",
            "last_accessed": 1745613460
        },
        {
            "sha1": "d62cb0ece0eb2b2427dba795c50a89ab504731d2",
            "docstring": "\"\"\"\nThis script defines a test case for the 'test_create_editor' function. It mocks the 'create_issue' and 'improve_text'\nmethods using MagicMock. It creates a temporary file, writes a description into it, sets arguments for the CLI command,\nand calls the 'create_issue' method with the provided arguments. After the test, it cleans up the temporary file.\n\"\"\"",
            "last_accessed": 1745613460
        }
    ],
    "jira_creator/tests/commands/test_add_comment_editor_cli.py": [
        {
            "sha1": "f47aa28666772b3fb0482a9bdc718db80d3673f0",
            "docstring": "\"\"\"\nThis module contains unit tests for the comment addition functionality in a command-line interface (CLI) application.\nIt specifically tests the integration of user input through an editor and the handling of AI-related exceptions.\n\nThe tests include:\n- `test_add_comment_editor`: Verifies the addition of a comment using an editor, ensuring that the correct methods are\ncalled with expected arguments.\n- `test_add_comment_with_editor_and_ai_exception_handling`: Tests the addition of a comment while simulating an AI\nservice failure, checking for proper exception handling and output capturing.\n\nMocking is utilized extensively to isolate the functionality under test, including the use of temporary files and the\nsimulation of external service interactions.\n\"\"\"",
            "last_accessed": 1745566651
        },
        {
            "sha1": "e3487e950e46da99e0af185bfe07e2f142f588f2",
            "docstring": "\"\"\"\nMock the 'add_comment' method and the 'improve_text' method for testing purposes.\n\nArguments:\n- cli: An object representing the command-line interface.\n\nSide Effects:\n- Modifies the 'add_comment' method of the 'cli.jira' object.\n- Modifies the 'improve_text' method of the 'cli.ai_provider' object.\n\"\"\"",
            "last_accessed": 1745613460
        },
        {
            "sha1": "8df1b254fd37b1dbfea1468dc9d374758f14f1b6",
            "docstring": "\"\"\"\nAdd a comment to the CLI using both an editor and AI, with exception handling.\n\nArguments:\n- cli: An instance of the CLI class.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- AiError: Raised when the AI service fails.\n\nSide Effects:\n- Modifies the behavior of the AI provider's improve_text method.\n\"\"\"",
            "last_accessed": 1745613460
        },
        {
            "sha1": "a85c7db2c824e50db46fa74d20edb1411579421e",
            "docstring": "\"\"\"\nThis module contains unit tests for the comment addition functionality in a command-line interface (CLI) application.\nIt specifically tests the integration of user input through an editor and the handling of AI-related exceptions.\n\nThe tests include:\n- `test_add_comment_editor`: Verifies the addition of a comment using an editor, ensuring that the correct methods are\ncalled with expected arguments.\n- `test_add_comment_with_editor_and_ai_exception_handling`: Tests the addition of a comment while simulating an AI\nservice failure, checking for proper exception handling and output capturing.\n\nMocking is utilized extensively to isolate the functionality under test, including the use of temporary files and the\nsimulation of external service interactions.\n\"\"\"",
            "last_accessed": 1745613460
        }
    ],
    "jira_creator/tests/commands/test_set_priority_exception_cli.py": [
        {
            "sha1": "3580a8e89f09076d82752b8b4189a38df4f067cd",
            "docstring": "\"\"\"\nThis script contains a unit test function named test_set_priority_error, which tests the set_priority method of a CLI\nclass by mocking the set_priority method to raise a SetPriorityError exception. The test verifies that the exception is\nraised correctly and that the expected error message is printed. The test uses pytest and unittest.mock modules for\ntesting and mocking functionalities.\n\ntest_set_priority_error(cli, capsys):\nSimulate an exception when setting priority in Jira for testing purposes.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface) for Jira.\n- capsys: A fixture provided by pytest for capturing stdout and stderr outputs during testing.\n\nExceptions:\n- SetPriorityError: Raised when simulating a failure while setting priority in Jira.\n\nSide Effects:\n- Modifies the set_priority method of the Jira client to raise a SetPriorityError.\n\"\"\"",
            "last_accessed": 1745566657
        },
        {
            "sha1": "8236ff780a48bdd693245797e1c11104fa9f023b",
            "docstring": "\"\"\"\nSimulate an exception when setting priority in Jira for testing purposes.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface) for Jira.\n- capsys: A fixture provided by pytest for capturing stdout and stderr outputs during testing.\n\nExceptions:\n- SetPriorityError: Raised when simulating a failure while setting priority in Jira.\n\nSide Effects:\n- Modifies the set_priority method of the Jira client to raise a SetPriorityError.\n\"\"\"",
            "last_accessed": 1745613460
        },
        {
            "sha1": "7c0b37d67380b4878da94215b8fd673650d37e7a",
            "docstring": "\"\"\"\nThis script contains a unit test function named test_set_priority_error, which tests the set_priority method of a CLI\nclass by mocking the set_priority method to raise a SetPriorityError exception. The test verifies that the exception is\nraised correctly and that the expected error message is printed. The test uses pytest and unittest.mock modules for\ntesting and mocking functionalities.\n\"\"\"",
            "last_accessed": 1745610683
        },
        {
            "sha1": "b9bbcf6d168719a640b9ac19adb047eb6a441401",
            "docstring": "\"\"\"\nThis script contains a unit test function named test_set_priority_error, which tests the set_priority method of a CLI\nclass by mocking the set_priority method to raise a SetPriorityError exception. The test verifies that the exception is\nraised correctly and that the expected error message is printed. The test uses pytest and unittest.mock modules for\ntesting and mocking functionalities.\n\ntest_set_priority_error(cli, capsys):\n    Simulate an exception when setting priority in Jira for testing purposes.\n\n    Arguments:\n    - cli: An object representing the CLI (Command Line Interface) for Jira.\n    - capsys: A fixture provided by pytest for capturing stdout and stderr outputs during testing.\n\n    Exceptions:\n    - SetPriorityError: Raised when simulating a failure while setting priority in Jira.\n\n    Side Effects:\n    - Modifies the set_priority method of the Jira client to raise a SetPriorityError.\n\"\"\"",
            "last_accessed": 1745613460
        }
    ],
    "jira_creator/tests/commands/test_remove_flag_cli.py": [
        {
            "sha1": "0479d9f60d303316702801a35012b456a5f573e3",
            "docstring": "\"\"\"\nThis file contains test cases for the 'remove_flag' method in the 'cli' module.\nIt includes tests to check the successful removal of a flag and also to handle exceptions.\nThe tests utilize the 'MagicMock' class from the 'unittest.mock' module and 'pytest' for assertions.\nThe 'test_remove_flag' function mocks the 'remove_flag' method and asserts the output and response.\nThe 'test_remove_flag_exception' function mocks the 'remove_flag' method to raise an exception and verifies the\nexception handling.\n\"\"\"",
            "last_accessed": 1745566662
        },
        {
            "sha1": "7d09f041b654785cba11ad3d922af7bb61011082",
            "docstring": "\"\"\"\nSimulate the removal of a flag from a Jira instance using a mock method.\n\nArguments:\n- cli: An object representing the Jira client.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs.\n\nSide Effects:\n- Sets up a mock method for the remove_flag function in the Jira client object.\n\"\"\"",
            "last_accessed": 1745613460
        },
        {
            "sha1": "c72e8acdf46ad1c074bd298d68816abc70d665ad",
            "docstring": "\"\"\"\nMocks the 'remove_flag' method of a Jira client and sets it to raise an exception when called.\n\nArguments:\n- cli: Jira client object.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nExceptions:\n- Exception: Raised with message \"Failed\" when the 'remove_flag' method is called.\n\"\"\"",
            "last_accessed": 1745613460
        },
        {
            "sha1": "c22d9f28c5cae37b680567ab24e5383e948e7973",
            "docstring": "\"\"\"\nThis file contains test cases for the 'remove_flag' method in the 'cli' module.\nIt includes tests to check the successful removal of a flag and also to handle exceptions.\nThe tests utilize the 'MagicMock' class from the 'unittest.mock' module and 'pytest' for assertions.\nThe 'test_remove_flag' function mocks the 'remove_flag' method and asserts the output and response.\nThe 'test_remove_flag_exception' function mocks the 'remove_flag' method to raise an exception and verifies the\nexception handling.\n\"\"\"",
            "last_accessed": 1745613460
        }
    ],
    "jira_creator/tests/commands/test_set_story_epic_cli.py": [
        {
            "sha1": "e3eb56ef3d4301e32b46856d64c679746c09118a",
            "docstring": "\"\"\"\nThis file contains unit tests for the set_story_epic function in the CLI module.\n\nThe test_handle_success function tests the successful execution of set_story_epic by mocking the JIRA set_story_epic\nmethod and asserting the correct message output and function call arguments.\n\nThe test_set_story_epic_exception function tests the handling of SetStoryEpicError exception by mocking the JIRA\nset_story_epic method with a side effect and ensuring the exception is raised.\n\nBoth test functions utilize the pytest framework and mock objects for testing the CLI module functionality.\n\"\"\"",
            "last_accessed": 1745566666
        },
        {
            "sha1": "160de4bfc72278325a1879b5643228c15c7b48b7",
            "docstring": "\"\"\"\nHandles the success case for a test scenario.\n\nArguments:\n- cli: An object representing the command line interface.\n- capsys: A fixture for capturing stdout and stderr outputs during the test.\n\nSide Effects:\n- Modifies the 'set_story_epic' attribute of the 'jira' object in the 'cli' object using MagicMock.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "37ca3e04419678238a10ae6bce51b02d11acd1d1",
            "docstring": "\"\"\"\nSet a side effect for the mock 'set_story_epic' method of the 'cli.jira' object to raise a 'SetStoryEpicError'\nexception with message \"fail\".\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "aa41bfd85e69bc6889ba1f9d0e27ffabec378eaf",
            "docstring": "\"\"\"\nThis file contains unit tests for the set_story_epic function in the CLI module.\n\nThe test_handle_success function tests the successful execution of set_story_epic by mocking the JIRA set_story_epic\nmethod and asserting the correct message output and function call arguments.\n\nThe test_set_story_epic_exception function tests the handling of SetStoryEpicError exception by mocking the JIRA\nset_story_epic method with a side effect and ensuring the exception is raised.\n\nBoth test functions utilize the pytest framework and mock objects for testing the CLI module functionality.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/commands/test_list_prints_cli.py": [
        {
            "sha1": "839ce08262b96934019b75c514f717013b30bc93",
            "docstring": "\"\"\"\nThis module contains unit tests for a command-line interface (CLI) that interacts with JIRA issues.\nIt utilizes the `unittest` framework along with `MagicMock` for simulating JIRA responses.\n\nKey Features:\n- Shared base issue templates (`base_issue` and `base_issue_2`) for use in tests.\n- A helper function `setup_cli_and_args` that configures the CLI context and issue data based on specified parameters.\n- Several test functions (`test_list_print`, `test_list_reporter_print`, `test_list_with_filters`,\n`test_list_with_blocked_filter`, and `test_list_with_unblocked_filter`) that verify the CLI's behavior\nwhen listing issues with various filters and conditions.\n\nEach test function captures the output of the CLI and asserts expected results based on the mocked JIRA issue data.\n\"\"\"",
            "last_accessed": 1745566674
        },
        {
            "sha1": "acff02f049169e932bf72a2d708f2e3af8b5dc42",
            "docstring": "\"\"\"\nSetup the Jira mock for the CLI.\n\nArguments:\n- cli (object): The CLI object to which the Jira mock will be assigned.\n- blocked (list): List of blocked items (default is None).\n- unblocked (list): List of unblocked items (default is None).\n- reporter (str): Name of the reporter (default is None).\n- status (str): Status of the items (default is None).\n- summary (str): Summary of the items (default is None).\n- func (function): Function to be executed (default is None).\n\nSide Effects:\n- Modifies the 'jira' attribute of the 'cli' object by assigning it a MagicMock object.\n\"\"\"",
            "last_accessed": 1745566677
        },
        {
            "sha1": "8d59f36faaf081bfec8587bc56adbe201573e738",
            "docstring": "\"\"\"\nPrint a list of reported issues.\n\nArguments:\n- cli: An object representing the command line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs.\n\nSide Effects:\n- Modifies the summary for a test case.\n- Sets up command line arguments.\n- Retrieves a list of reported issues using the provided CLI object.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "283ad97551bfcb257072665cab0b4723828fa749",
            "docstring": "\"\"\"\nExecute a test for listing Jira issues with filters.\n\nArguments:\n- cli: An instance of the CLI (Command Line Interface) used for interacting with Jira.\n- capsys: Pytest fixture for capturing stdout and stderr output during testing.\n\nSide Effects:\n- Modifies the CLI configuration with specified status and function.\n- Sets up the return value of listing Jira issues to the provided issues.\n- Calls the list_issues method of the CLI instance.\n\nNote: This function is primarily designed for testing purposes and does not have a return value.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "06142510c8b4687c02b814b79c845b3480c56ac4",
            "docstring": "\"\"\"\nFilter and list issues based on a blocked filter.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nSide Effects:\n- Modifies the behavior of the command-line interface by setting up arguments with a blocked filter.\n- Calls the setup_cli_and_args function to configure the CLI arguments.\n- Sets the return value of cli.jira.list_issues to the provided issues.\n- Invokes the list_issues method of the CLI.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "6e46e406815a9b760ba5eaae60224fcb4116e2a0",
            "docstring": "\"\"\"\nFilter and list Jira issues based on the unblocked status.\n\nArguments:\n- cli: An object representing the command-line interface for interacting with Jira.\n- capsys: A pytest fixture for capturing stdout and stderr output.\n\nSide Effects:\n- Modifies the behavior of the Jira CLI by setting up the appropriate arguments and filters.\n- Calls the 'list_issues' method of the Jira CLI to retrieve and display a list of filtered issues.\n\nNote: This function assumes the existence of 'setup_cli_and_args' and 'list_issues' methods within the 'cli' object.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "9b2a1365a900d86f338a234fd84a9a4263e03d62",
            "docstring": "\"\"\"\nThis module contains unit tests for a command-line interface (CLI) that interacts with JIRA issues.\nIt utilizes the `unittest` framework along with `MagicMock` for simulating JIRA responses.\n\nKey Features:\n- Shared base issue templates (`base_issue` and `base_issue_2`) for use in tests.\n- A helper function `setup_cli_and_args` that configures the CLI context and issue data based on specified parameters.\n- Several test functions (`test_list_print`, `test_list_reporter_print`, `test_list_with_filters`,\n`test_list_with_blocked_filter`, and `test_list_with_unblocked_filter`) that verify the CLI's behavior\nwhen listing issues with various filters and conditions.\n\nEach test function captures the output of the CLI and asserts expected results based on the mocked JIRA issue data.\n\"\"\"",
            "last_accessed": 1745610503
        },
        {
            "sha1": "0a21c239b0c23de2ddc1d1668486b43cdb321d49",
            "docstring": "\"\"\"\nSetup the Jira mock for the CLI.\n\nArguments:\n- cli (object): The CLI object to which the Jira mock will be assigned.\n- blocked (list): List of blocked items (default is None).\n- unblocked (list): List of unblocked items (default is None).\n- reporter (str): Name of the reporter (default is None).\n- status (str): Status of the items (default is None).\n- summary (str): Summary of the items (default is None).\n- func (function): Function to be executed (default is None).\n\nSide Effects:\n- Modifies the 'jira' attribute of the 'cli' object by assigning it a MagicMock object.\n\"\"\"",
            "last_accessed": 1745610022
        },
        {
            "sha1": "a174ffbc9bd7550f07ae8f382ddbbc084f7e1864",
            "docstring": "\"\"\"\nSetup the Jira mock for the CLI.\n\nArguments:\n- cli (object): The CLI object to which the Jira mock will be assigned.\n- blocked (list): List of blocked items (default is None).\n- unblocked (list): List of unblocked items (default is None).\n- reporter (str): Name of the reporter (default is None).\n- status (str): Status of the items (default is None).\n- summary (str): Summary of the items (default is None).\n- func (function): Function to be executed (default is None).\n\nSide Effects:\n- Modifies the 'jira' attribute of the 'cli' object by assigning it a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "e580bc73358f07437210937331980937a806ac16",
            "docstring": "\"\"\"\nSetup the Jira mock for the CLI.\n\nArguments:\n- cli (object): The CLI object to which the Jira mock will be assigned.\n- capsys (object): Pytest fixture for capturing stdout and stderr.\n- blocked (list): List of blocked items (default is None).\n- unblocked (list): List of unblocked items (default is None).\n- reporter (str): Name of the reporter (default is None).\n- status (str): Status of the items (default is None).\n- summary (str): Summary of the items (default is None).\n- func (function): Function to be executed (default is None).\n\nSide Effects:\n- Modifies the 'jira' attribute of the 'cli' object by assigning it a MagicMock object.\n\"\"\"",
            "last_accessed": 1745610507
        },
        {
            "sha1": "5e3d184c98b6137bae01703b10ade220edd056cf",
            "docstring": "\"\"\"\nThis module contains unit tests for a command-line interface (CLI) that interacts with JIRA issues.\nIt utilizes the `unittest` framework along with `MagicMock` for simulating JIRA responses.\n\nKey Features:\n- Shared base issue templates (`base_issue` and `base_issue_2`) for use in tests.\n- A helper function `setup_cli_and_args` that configures the CLI context and issue data based on specified parameters.\n- Several test functions (`test_list_print`, `test_list_reporter_print`, `test_list_with_filters`,\n`test_list_with_blocked_filter`, and `test_list_with_unblocked_filter`) that verify the CLI's behavior\nwhen listing issues with various filters and conditions.\n\nEach test function captures the output of the CLI and asserts expected results based on the mocked JIRA issue data.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "071f202f352d839fbb57a35547883eb800f6044f",
            "docstring": "\"\"\"\nSetup the Jira mock for the CLI.\n\nArguments:\n- cli (object): The CLI object to which the Jira mock will be assigned.\n- capsys (object): Pytest fixture for capturing stdout and stderr.\n- blocked (list): List of blocked items (default is None).\n- unblocked (list): List of unblocked items (default is None).\n- reporter (str): Name of the reporter (default is None).\n- status (str): Status of the items (default is None).\n- summary (str): Summary of the items (default is None).\n- func (function): Function to be executed (default is None).\n\nSide Effects:\n- Modifies the 'jira' attribute of the 'cli' object by assigning it a MagicMock object.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/commands/test_set_status_exception_cli.py": [
        {
            "sha1": "dcc73f75ffc51fec21a28b2c06f2f6025e030e71",
            "docstring": "\"\"\"\nThis file contains a unit test function to test an exception scenario for the set_status method. The test mocks the\nset_status method to raise a SetStatusError and verifies that the appropriate error message is printed. The test\nfunction uses pytest for assertions and captures the output using capsys.\n\ntest_set_status_exception(cli, capsys):\nSet an exception for the set_status method to be raised when called.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture for capturing stdout and stderr outputs.\n\nExceptions:\n- SetStatusError: Raised when the set_status method encounters an error with the message \"bad status\".\n\"\"\"",
            "last_accessed": 1745566688
        },
        {
            "sha1": "5234881e7b6440d24051e3248dd12ee86a1ad34b",
            "docstring": "\"\"\"\nSet an exception for the set_status method to be raised when called.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture for capturing stdout and stderr outputs.\n\nExceptions:\n- SetStatusError: Raised when the set_status method encounters an error with the message \"bad status\".\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "cfd9d8415af3b30833b8c139fc0159430995a084",
            "docstring": "\"\"\"\nThis file contains a unit test function to test an exception scenario for the set_status method. The test mocks the\nset_status method to raise a SetStatusError and verifies that the appropriate error message is printed. The test\nfunction uses pytest for assertions and captures the output using capsys.\n\ntest_set_status_exception(cli, capsys):\nSet an exception for the set_status method to be raised when called.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture for capturing stdout and stderr outputs.\n\nExceptions:\n- SetStatusError: Raised when the set_status method encounters an error with the message \"bad status\".\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/commands/test_edit_issue_fetch_fail_cli.py": [
        {
            "sha1": "8bcc3ec3421f297688fdbb54f03221d44bea2ecf",
            "docstring": "\"\"\"\nThis script contains a test function to simulate a failure scenario when fetching an issue description from Jira.\n\nThe test function takes a CLI object as an argument used to interact with Jira. It mocks the get_description method to\nraise a FetchDescriptionError exception when fetching the issue description.\n\nTest Function:\n- test_edit_issue_fetch_fail(cli): Simulates a failure scenario when fetching an issue description.\nArguments:\n- cli: A CLI object used to interact with Jira.\nExceptions:\n- FetchDescriptionError: Raised when there is a failure in fetching the issue description.\n\"\"\"",
            "last_accessed": 1745566691
        },
        {
            "sha1": "cc3be950a52ecc6263c6b87785fc5b512c50b43a",
            "docstring": "\"\"\"\nSimulates a failure scenario when fetching an issue description.\n\nArguments:\n- cli: A CLI object used to interact with Jira.\n\nExceptions:\n- FetchDescriptionError: Raised when there is a failure in fetching the issue description.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "dd93b15878b221c3b0b23f30bd8f9ae4c5b48ae0",
            "docstring": "\"\"\"\nThis script contains a test function to simulate a failure scenario when fetching an issue description from Jira.\n\nThe test function takes a CLI object as an argument used to interact with Jira. It mocks the get_description method to\nraise a FetchDescriptionError exception when fetching the issue description.\n\nTest Function:\n- test_edit_issue_fetch_fail(cli): Simulates a failure scenario when fetching an issue description.\nArguments:\n- cli: A CLI object used to interact with Jira.\nExceptions:\n- FetchDescriptionError: Raised when there is a failure in fetching the issue description.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/commands/test_list_sprints_cli.py": [
        {
            "sha1": "782a2f5801262114aaf1f2910dc6749028be1fe8",
            "docstring": "\"\"\"\nThis file contains unit tests for the list_sprints method in a CLI application.\nThe tests use the pytest framework along with unittest.mock to mock the behavior of the list_sprints method.\nThe test_list_sprints function tests the successful execution of list_sprints, while the test_list_sprints_exception\nfunction tests the exception handling when list_sprints raises an exception.\nBoth tests mock the list_sprints method and capture the output using capsys to perform assertions on the expected\noutput.\n\ntest_list_sprints:\n- Mocks the list_sprints method of the Jira CLI object to return a list of sprints [\"Sprint 1\", \"Sprint 2\"] for testing.\n- Arguments:\n- cli: The CLI object used to interact with Jira.\n- capsys: The built-in pytest fixture for capturing stdout and stderr.\n\ntest_list_sprints_exception:\n- Mocks the list_sprints method to raise an exception when called.\n- Args:\n- cli: An object representing the CLI.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n- Exceptions:\n- Exception: Raised when the list_sprints method is called to simulate a failure.\n\"\"\"",
            "last_accessed": 1745566695
        },
        {
            "sha1": "243ebcb9f1fd9bc29201d45834cbcbd615b9f0e3",
            "docstring": "\"\"\"\nMock the list_sprints method for testing purposes.\n\nArguments:\n- cli: The CLI object used to interact with Jira.\n- capsys: The built-in pytest fixture for capturing stdout and stderr.\n\nSide Effects:\n- Mocks the list_sprints method of the Jira CLI object to return a list of sprints [\"Sprint 1\", \"Sprint 2\"] for\ntesting.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "254459c98d803d31df1c645782b664dda7181efa",
            "docstring": "\"\"\"\nMock the list_sprints method to raise an exception when called.\n\nArgs:\n    cli: An object representing the CLI.\n    capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n    Exception: Raised when the list_sprints method is called to simulate a failure.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "a1298a29086cfce9879f0145e2ed4078dd36302a",
            "docstring": "\"\"\"\nThis file contains unit tests for the list_sprints method in a CLI application.\nThe tests use the pytest framework along with unittest.mock to mock the behavior of the list_sprints method.\nThe test_list_sprints function tests the successful execution of list_sprints, while the test_list_sprints_exception\nfunction tests the exception handling when list_sprints raises an exception.\nBoth tests mock the list_sprints method and capture the output using capsys to perform assertions on the expected\noutput.\n\ntest_list_sprints:\n- Mocks the list_sprints method of the Jira CLI object to return a list of sprints [\"Sprint 1\", \"Sprint 2\"] for testing.\n- Arguments:\n- cli: The CLI object used to interact with Jira.\n- capsys: The built-in pytest fixture for capturing stdout and stderr.\n\ntest_list_sprints_exception:\n- Mocks the list_sprints method to raise an exception when called.\n- Args:\n- cli: An object representing the CLI.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n- Exceptions:\n- Exception: Raised when the list_sprints method is called to simulate a failure.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/commands/test_validate_issue_cli.py": [
        {
            "sha1": "8443f7d50609ea6ab31c356b84d64691c31405d4",
            "docstring": "\"\"\"\nThis module contains unit tests for the CLI validation of Jira issues, focusing on the acceptance criteria and \ndescription validation. It includes helper functions to generate common fields and cached data for testing purposes. \nThe main functionality is tested through various test cases that ensure correct behavior when validating issue fields \nagainst expected standards.\n\nKey functions and classes:\n- `generate_fields`: Generates a dictionary of common fields for a Jira issue.\n- `generate_cached_data`: Creates a dictionary simulating cached validation data.\n- `test_load_cache_file_not_found`: Tests the behavior of loading a cache file that does not exist.\n- `test_acceptance_criteria_no_change_but_invalid`: Tests the validation of acceptance criteria when no changes are \n  made but the criteria is invalid.\n- `test_acceptance_criteria_validation`: Validates acceptance criteria when the criteria is considered acceptable.\n- `test_description_no_change_but_invalid`: Tests the validation of descriptions when no changes are made but the \n  description is invalid.\n- `test_cli_validate_issue`: Tests the CLI interface for validating Jira issues.\n\nThis module uses the `unittest.mock` library to mock dependencies and the behavior of external functions.\n\"\"\"",
            "last_accessed": 1745566705
        },
        {
            "sha1": "a63dbe3ee2aca2903971bb23ffc921504d847c60",
            "docstring": "\"\"\"\nGenerate a dictionary with fields for a JIRA issue.\n\nArguments:\n- issue_key (str): The key of the JIRA issue.\n- summary (str): The summary of the JIRA issue (default is \"Test Summary\").\n- description (str): The description of the JIRA issue (default is \"Test Description\").\n- acceptance_criteria (str): The acceptance criteria of the JIRA issue (default is \"Test Acceptance Criteria\").\n\nReturn:\n- dict: A dictionary containing the JIRA fields for the issue.\n\nSide Effects:\n- Uses the EnvFetcher class to retrieve certain field values from the environment.\n\"\"\"",
            "last_accessed": 1745566708
        },
        {
            "sha1": "e1222627ff175204975cb8ca10076b4c96ea612d",
            "docstring": "\"\"\"\nSimulate a test scenario where the acceptance criteria are not changed, but the provided data is invalid.\n\nArguments:\n- mock_load_cache: A mock object for loading cache data.\n- mock_save_cache: A mock object for saving cache data.\n\nSide Effects:\n- Calls the 'improve_text' method of a MagicMock object representing an AI provider with a return value of \"Needs Improvement\".\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "8991200b278330ef7ebbb73d94bfc5ef65bd6848",
            "docstring": "\"\"\"\nValidate the acceptance criteria for a test case.\n\nArguments:\n- mock_save_cache: MagicMock object for saving cache data.\n- cli: Command Line Interface (CLI) object for interacting with the command line.\n- capsys: Pytest fixture for capturing stdout and stderr outputs.\n\nSide Effects:\n- Sets up a MagicMock object 'ai_provider' for AI text improvement with a return value of \"OK\".\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "b80834c34f80083d1a6fa9c7d0119382c4affb09",
            "docstring": "\"\"\"\nSimulate a test scenario where a mock AI provider is used to improve text, returning \"Needs Improvement\".\n\nArguments:\n- mock_save_cache: A mock object for saving cache data.\n- cli: Command Line Interface object.\n- capsys: Pytest fixture capturing stdout and stderr output.\n\nSide Effects:\n- Calls the `improve_text` method on a mock AI provider object.\n\nReturn: N/A\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "9b557ca1992f25553fa2086d70b3164430a2782c",
            "docstring": "\"\"\"\nValidate the CLI input for testing purposes.\n\nArguments:\n- cli: An instance of the CLI object.\n\nSide Effects:\n- Modifies the Args class attributes for issue_key, no_ai, and lint.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "ff2cdb4a5b7612d8fde160e751270a8889bb764c",
            "docstring": "\"\"\"\nThis module contains unit tests for the CLI validation of Jira issues, focusing on the acceptance criteria and\ndescription validation. It includes helper functions to generate common fields and cached data for testing purposes.\nThe main functionality is tested through various test cases that ensure correct behavior when validating issue fields\nagainst expected standards.\n\nKey functions and classes:\n- `generate_fields`: Generates a dictionary of common fields for a Jira issue.\n- `generate_cached_data`: Creates a dictionary simulating cached validation data.\n- `test_load_cache_file_not_found`: Tests the behavior of loading a cache file that does not exist.\n- `test_acceptance_criteria_no_change_but_invalid`: Tests the validation of acceptance criteria when no changes are\nmade but the criteria is invalid.\n- `test_acceptance_criteria_validation`: Validates acceptance criteria when the criteria is considered acceptable.\n- `test_description_no_change_but_invalid`: Tests the validation of descriptions when no changes are made but the\ndescription is invalid.\n- `test_cli_validate_issue`: Tests the CLI interface for validating Jira issues.\n\nThis module uses the `unittest.mock` library to mock dependencies and the behavior of external functions.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "7ec106fc026674ebb0f45b20a2342fa747e3a0f1",
            "docstring": "\"\"\"\nGenerate a dictionary with fields for a JIRA issue.\n\nArguments:\n- issue_key (str): The key of the JIRA issue.\n- summary (str): The summary of the JIRA issue (default is \"Test Summary\").\n- description (str): The description of the JIRA issue (default is \"Test Description\").\n- acceptance_criteria (str): The acceptance criteria of the JIRA issue (default is \"Test Acceptance Criteria\").\n\nReturn:\n- dict: A dictionary containing the JIRA fields for the issue.\n\nSide Effects:\n- Uses the EnvFetcher class to retrieve certain field values from the environment.\n\"\"\"",
            "last_accessed": 1745610023
        },
        {
            "sha1": "6c46fafdba2ec35397d741216a0b78821409750f",
            "docstring": "\"\"\"\nGenerate a dictionary with fields for a JIRA issue.\n\nArguments:\n- issue_key (str): The key of the JIRA issue.\n- summary (str): The summary of the JIRA issue (default is \"Test Summary\").\n- description (str): The description of the JIRA issue (default is \"Test Description\").\n- acceptance_criteria (str): The acceptance criteria of the JIRA issue (default is \"Test Acceptance Criteria\").\n\nReturn:\n- dict: A dictionary containing the JIRA fields for the issue.\n\nSide Effects:\n- Uses the EnvFetcher class to retrieve certain field values from the environment.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "bdbb4455cb5970a2a388fdcbb9842ad75f181d7e",
            "docstring": "\"\"\"\nGenerates cached data hashes based on input fields.\n\nArguments:\n- fields (dict): A dictionary containing various field values.\n- description_hash (str, optional): The hash value of the description field. Defaults to None.\n- summary_hash (str, optional): The hash value of the summary field. Defaults to None.\n- acceptance_criteria_hash (str, optional): The hash value of the acceptance criteria field. Defaults to None.\n- acceptance_criteria_value (str, optional): The value of the acceptance criteria field. Defaults to None.\n- description_value (str, optional): The value of the description field. Defaults to None.\n\nSide Effects:\n- Modifies the input hash values if they are None by calculating the hash of corresponding field values.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "35fab046b13ab0e235b1e5ebc1dbdf27a24ebf63",
            "docstring": "\"\"\"\nGenerate a dictionary with fields for a JIRA issue.\n\nArguments:\n- issue_key (str): The key of the JIRA issue.\n- summary (str): The summary of the JIRA issue (default is \"Test Summary\").\n- description (str): The description of the JIRA issue (default is \"Test Description\").\n- acceptance_criteria (str): The acceptance criteria of the JIRA issue (default is \"Test Acceptance Criteria\").\n\nReturn:\n- dict: A dictionary containing the JIRA fields for the issue.\n\nSide Effects:\n- Uses the EnvFetcher class to retrieve certain field values from the environment.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/commands/test_unblock_cli.py": [
        {
            "sha1": "26081a2b5021e6894efd81985213beca4bc1cd6c",
            "docstring": "\"\"\"\nThis file contains unit tests for the 'unblock' command of a CLI tool.\nIt includes two test functions:\n- test_unblock_command_success: tests the successful execution of the 'unblock' command.\n- test_unblock_command_failure: tests the failure scenario of the 'unblock' command when an UnBlockError is raised.\n\nThe tests use MagicMock and pytest to mock and assert the behavior of the CLI tool when unblocking an issue.\n\"\"\"",
            "last_accessed": 1745566716
        },
        {
            "sha1": "8ce8d6d337f382b533a34f6b94b557c7cb12fe1d",
            "docstring": "\"\"\"\nSimulate a successful unblock command test.\n\nArguments:\n- cli: The command-line interface object for testing.\n- capsys: Pytest fixture to capture stdout and stderr.\n\nSide Effects:\n- Initializes a dictionary called 'called' to keep track of function calls.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "1537033fc2345a57a2f7b68be16d9064df6be1d8",
            "docstring": "\"\"\"\nSummary:\nUpdates a dictionary called `called` with the provided `issue_key`.\n\nArguments:\n- issue_key (str): The key of the issue to be updated in the `called` dictionary.\n\nSide Effects:\nModifies the `called` dictionary by adding or updating the key specified by `issue_key`.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "4ca17214d299f6592f5b92c558e7e4bddf7a88ab",
            "docstring": "\"\"\"\nExecute a test to validate the failure scenario of an unblock command.\n\nArguments:\n- cli (object): An instance of the command line interface (CLI) to interact with the application.\n- capsys (object): A fixture to capture stdout and stderr outputs during the test.\n\nSide Effects:\n- Executes the unblock command in the CLI to trigger a failure scenario for testing purposes.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "1f823e32b1eb99d5c2dbc09e92c88972f303d019",
            "docstring": "\"\"\"\nSimulate an unblock failure by raising a custom UnBlockError exception.\n\nArguments:\n- issue_key (str): A key representing the issue causing the unblock failure.\n\nExceptions:\n- UnBlockError: Raised to simulate an unblock failure.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "00bc795d2f272411365e9f9d1a2050667506e360",
            "docstring": "\"\"\"\nThis file contains unit tests for the 'unblock' command of a CLI tool.\nIt includes two test functions:\n- test_unblock_command_success: tests the successful execution of the 'unblock' command.\n- test_unblock_command_failure: tests the failure scenario of the 'unblock' command when an UnBlockError is raised.\n\nThe tests use MagicMock and pytest to mock and assert the behavior of the CLI tool when unblocking an issue.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/commands/test_edit_issue_exception_cli.py": [
        {
            "sha1": "5fd9f39a78e239722c4e2eff483eff98083b84aa",
            "docstring": "\"\"\"\nUnit tests for the CLI issue editing functionality in a Jira integration.\n\nThis module contains test cases for editing issue descriptions and handling prompts\nin a Jira CLI application. It uses the pytest framework and mocks various components\nto simulate interactions with Jira and file handling.\n\nKey Features:\n- Tests for updating issue descriptions and handling exceptions.\n- Validation of fallback mechanisms when fetching prompts fails.\n- Mocking of Jira API calls and temporary file operations to isolate tests.\n- Assertions to ensure proper error messages are displayed in the CLI.\n\nTest Cases:\n- `test_edit_issue_update_exception`: Tests the behavior when updating an issue description fails.\n- `test_edit_description_raises_edit_description_error_inline`: Tests the editing of a description and the handling of\nexceptions.\n- `test_get_prompt_raises_and_falls_back`: Tests the fallback mechanism for getting prompts when there is an error.\n- `test_cli_edit_issue_raises_edit_issue_error`: Tests the behavior when editing an issue raises an error.\n\"\"\"",
            "last_accessed": 1745566727
        },
        {
            "sha1": "3bb565bc6ab3bc7532cd0571edd610f7dd47caf9",
            "docstring": "\"\"\"\nUpdates the description of an issue in Jira, mocking Jira internals for testing purposes.\n\nArguments:\n- mock_tmpfile: Mock object for temporary file handling.\n- mock_subprocess: Mock object for subprocess operations.\n- capsys: Pytest fixture for capturing stdout and stderr.\n- cli: Mock object representing the Jira command-line interface.\n\nExceptions:\n- UpdateDescriptionError: Raised when updating the description of the Jira issue fails.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "ce91f85ff6a76414417f1173655fe7b834dbb4f4",
            "docstring": "\"\"\"\nSummary:\nThis function tests that the 'EditDescriptionError' exception is raised inline when editing a description.\n\nArguments:\n- capsys: A pytest fixture that allows capturing stdout and stderr during the test execution.\n\nExceptions:\n- EditDescriptionError: Raised when an error occurs while editing the description.\n\nSide Effects:\n- Modifies the behavior of the 'tempfile.NamedTemporaryFile' and 'subprocess.call' functions to simulate an error scenario during description editing.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "87cf316ac72fee3d980fff0f7b1fbf7ee982bb95",
            "docstring": "\"\"\"\nThis function is a test case for a scenario where the 'get_issue_type' method of a fake Jira object raises a\n'GetPromptError' exception with the message \"could not fetch type\". The test is using the 'capsys' fixture to\ncapture stdout and stderr outputs.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "a25bd3d2a592e4e1ab5570fa09dce510c27ae874",
            "docstring": "\"\"\"\nRaises an EditIssueError when editing an issue via CLI.\n\nArguments:\n- cli: An instance of the CLI class.\n\nExceptions:\n- EditIssueError: Raised when an error occurs while editing an issue.\n\nSide Effects:\n- Modifies the state of the issue in the CLI.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "06465dccc5b3ab39f8a0ffcdbe1e56706fe850e2",
            "docstring": "\"\"\"\nUnit tests for the CLI issue editing functionality in a Jira integration.\n\nThis module contains test cases for editing issue descriptions and handling prompts\nin a Jira CLI application. It uses the pytest framework and mocks various components\nto simulate interactions with Jira and file handling.\n\nKey Features:\n- Tests for updating issue descriptions and handling exceptions.\n- Validation of fallback mechanisms when fetching prompts fails.\n- Mocking of Jira API calls and temporary file operations to isolate tests.\n- Assertions to ensure proper error messages are displayed in the CLI.\n\nTest Cases:\n- `test_edit_issue_update_exception`: Tests the behavior when updating an issue description fails.\n- `test_edit_description_raises_edit_description_error_inline`: Tests the editing of a description and the handling of\nexceptions.\n- `test_get_prompt_raises_and_falls_back`: Tests the fallback mechanism for getting prompts when there is an error.\n- `test_cli_edit_issue_raises_edit_issue_error`: Tests the behavior when editing an issue raises an error.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/providers/test_bart_provider.py": [
        {
            "sha1": "ee3ba58fc325072182c97f986275efcfb9add7c9",
            "docstring": "\"\"\"\nThis file contains unit tests for the BARTProvider class in the bart_provider module.\nIt includes tests for the initialization of the BARTProvider, successful and failed text improvement scenarios.\nThe tests use mock objects and patches to simulate HTTP requests and responses.\n\nFunctions:\n- test_bart_provider_init(): Initialize a BARTProvider object with a default URL and headers for BART API requests.\n- test_improve_text_success(mock_post): Improves the text by sending a mock POST request.\n- test_improve_text_failure(mock_post): Improves the text of a failed post request response.\n\"\"\"",
            "last_accessed": 1745566738
        },
        {
            "sha1": "2f1c8f618ec40ca303fb647f49d580748a97038a",
            "docstring": "\"\"\"\nInitialize a BARTProvider object with a default URL and headers for BART API requests.\n\nArguments:\nNo arguments.\n\nReturns:\nNo return value.\n\nExceptions:\nNo exceptions raised.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "428282b0cfbc97c10056181c40b30a6e8f7e63ba",
            "docstring": "\"\"\"\nImproves the text by sending a mock POST request.\n\nArguments:\n- mock_post (MagicMock): A mock object representing a POST request function.\n\nSide Effects:\n- Modifies the mock_post function to return a mock response with status code 200 and JSON data {\"output\": \"Improved text\"}.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "18074abfd4614bbe4cfb9db9a3de32c61068329b",
            "docstring": "\"\"\"\nImproves the text of a failed post request response.\n\nArguments:\n- mock_post (MagicMock): A MagicMock object representing the post request function.\n\nSide Effects:\n- Modifies the text of the response to \"Internal Server Error\" and sets the status code to 500.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "ef5df221ada56d93ad2a50f4d348aa5b11ba50b0",
            "docstring": "\"\"\"\nThis file contains unit tests for the BARTProvider class in the bart_provider module.\nIt includes tests for the initialization of the BARTProvider, successful and failed text improvement scenarios.\nThe tests use mock objects and patches to simulate HTTP requests and responses.\n\nFunctions:\n- test_bart_provider_init(): Initialize a BARTProvider object with a default URL and headers for BART API requests.\n- test_improve_text_success(mock_post): Improves the text by sending a mock POST request.\n- test_improve_text_failure(mock_post): Improves the text of a failed post request response.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/providers/test_openai_provider.py": [
        {
            "sha1": "4d7649d0d52f31720b568ad5e721694a0e6dce23",
            "docstring": "\"\"\"\nThis file contains unit tests for the OpenAIProvider class in the providers.openai_provider module. It includes tests\nfor the improve_text method, which interacts with the OpenAI API to improve text inputs. The tests cover scenarios\nwhere the API call is successful and when it fails, asserting the expected behavior in each case.\n\nFunctions:\n- test_openai_provider_improve_text: Tests the OpenAI provider's text improvement functionality by mocking a response\nobject.\n- test_improve_text_raises_on_api_failure: Tests the OpenAIProvider API for text improvement, specifically the GPT-3.5\nTurbo model.\n\nExceptions:\n- AiError: Raised if there is a failure when calling the OpenAIProvider API.\n\nSide Effects:\n- Modifies the OpenAIProvider instance by setting the API key, model, and endpoint.\n\"\"\"",
            "last_accessed": 1745566750
        },
        {
            "sha1": "af6ed810e28b5d4267ecf673de226b39f1b31746",
            "docstring": "\"\"\"\nThis function tests the OpenAI provider's text improvement functionality by mocking a response object with a status\ncode of 200 and a JSON payload containing cleaned up text in the \"choices\" field.\n\nArguments:\n- No arguments taken explicitly.\n\nReturn:\n- No explicit return value. The function tests the text improvement functionality by mocking a response object.\n\nExceptions:\n- No exceptions raised explicitly in this function.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "24ac4bc4df84f14f89e7c8501a61a60b9828b56f",
            "docstring": "\"\"\"\nImprove the text using the OpenAIProvider API, specifically the GPT-3.5 Turbo model.\n\nArguments:\n- No arguments.\n\nExceptions:\n- Raises an exception if there is a failure when calling the OpenAIProvider API.\n\nSide Effects:\n- Modifies the OpenAIProvider instance by setting the API key, model, and endpoint.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "80b74b2d3cbd5f4ddd769b3c35dedb0d734541cd",
            "docstring": "\"\"\"\nThis file contains unit tests for the OpenAIProvider class in the providers.openai_provider module. It includes tests\nfor the improve_text method, which interacts with the OpenAI API to improve text inputs. The tests cover scenarios\nwhere the API call is successful and when it fails, asserting the expected behavior in each case.\n\nFunctions:\n- test_openai_provider_improve_text: Tests the OpenAI provider's text improvement functionality by mocking a response\nobject.\n- test_improve_text_raises_on_api_failure: Tests the OpenAIProvider API for text improvement, specifically the GPT-3.5\nTurbo model.\n\nExceptions:\n- AiError: Raised if there is a failure when calling the OpenAIProvider API.\n\nSide Effects:\n- Modifies the OpenAIProvider instance by setting the API key, model, and endpoint.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/providers/test_deepseek_provider.py": [
        {
            "sha1": "8381b2f357fdca5c5799210b066d8a2888aa98bb",
            "docstring": "\"\"\"\nUnit tests for the DeepSeekProvider class, focusing on the improve_text method. This module includes test cases that validate the functionality of text improvement, error handling for server issues, and scenarios involving JSON decoding errors. It utilizes unittest.mock's MagicMock and patch to simulate various responses from the improve_text method, ensuring that expected behaviors, method calls, and exception handling are correctly verified. The tests are structured using the pytest framework for assertions and error checking.\n\"\"\"",
            "last_accessed": 1745566755
        },
        {
            "sha1": "982861d550bf5f172afa65c8cd624cee334f7c18",
            "docstring": "\"\"\"\nImproves text by sending a POST request and receiving a successful response.\n\nArguments:\n- mock_post (MagicMock): A MagicMock object representing a POST request.\n\nReturns:\n- None\n\nSide Effects:\n- Modifies the behavior of the mock_post object to return a successful response with an improved text message.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "232f565eae6537ed2733a82d1c856527d70bfb73",
            "docstring": "\"\"\"\nImproves text in case of failure.\n\nArguments:\n- mock_post (Mock): A mock object representing a POST request.\n\nSide Effects:\n- Modifies the text of the mock response to \"Internal Server Error\" when the status code is 500.\n- Raises AiError with a specific message if the DeepSeek request fails.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "d856ee5d49d602c6140172b73c7400e28743bdce",
            "docstring": "\"\"\"\nSimulate a JSON decoding error when processing a response from a mocked POST request.\n\nArguments:\n- mock_post: A MagicMock object representing a mocked POST request.\n\nExceptions:\n- JSONDecodeError: Raised when there is an issue decoding the JSON response.\n\nSide Effects:\n- Modifies the behavior of the mock POST request response to simulate an invalid JSON response.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "46ddc080c1acfeb8af809970f45fb4dc89545e17",
            "docstring": "\"\"\"\nUnit tests for the DeepSeekProvider class, specifically targeting the improve_text method. This module contains test cases that validate the functionality of text improvement, error handling for server issues, and scenarios involving JSON decoding errors. It employs unittest.mock's MagicMock and patch to simulate various responses from the improve_text method, ensuring that expected behaviors, method calls, and exception handling are correctly verified. The tests utilize the pytest framework for assertions and error checking, providing a structured approach to testing the provider's capabilities and robustness.\n\"\"\"",
            "last_accessed": 1745608801
        },
        {
            "sha1": "1a4129af0814db51e9d2134e1964f56b9f631093",
            "docstring": "\"\"\"\nUnit tests for the DeepSeekProvider class, specifically targeting the improve_text method. This module contains test\ncases that validate the functionality of text improvement, error handling for server issues, and scenarios involving\nJSON decoding errors. It employs unittest.mock's MagicMock and patch to simulate various responses from the\nimprove_text method, ensuring that expected behaviors, method calls, and exception handling are correctly verified. The\ntests utilize the pytest framework for assertions and error checking, providing a structured approach to testing the\nprovider's capabilities and robustness.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/providers/test_providers_all_paths.py": [
        {
            "sha1": "23982c97cd1f05659860791caf5e22eb4dcc276f",
            "docstring": "\"\"\"\nThis file contains unit tests for the get_ai_provider function, which retrieves AI providers based on the provider name\nprovided. The tests cover scenarios such as successful provider retrieval, failure cases, and handling of import errors\nusing patching with unittest.mock.patch and pytest.raises. The tested AI providers include OpenAIProvider,\nGPT4AllProvider, InstructLabProvider, BARTProvider, and DeepSeekProvider. The tests verify that the appropriate\nexceptions are raised or handled gracefully. The file imports modules and classes from exceptions.exceptions and\nproviders modules.\n\nTest functions like test_get_ai_provider_openai, test_get_ai_provider_bart, test_get_ai_provider_deepseek, and\ntest_unknown_provider verify the behavior of get_ai_provider for different provider names. Each function asserts that\nthe returned provider matches the expected provider class. The test_unknown_provider function checks for an\nAiProviderError when an unknown provider name is provided.\n\"\"\"",
            "last_accessed": 1745566762
        },
        {
            "sha1": "c31b380b2842eb8f04d2d6cb83fffcb0a79a0222",
            "docstring": "\"\"\"\nThis function tests the `get_ai_provider` function with the input parameter \"openai\". It asserts that the returned\nprovider is an instance of the class `OpenAIProvider`.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "1eaae873d2ba0070fdbee0668c1748ea27676c9b",
            "docstring": "\"\"\"\nThis function tests the get_ai_provider function by verifying if the provider returned for \"bart\" is an instance of\nthe BARTProvider class.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "4a8bed74e60d76394fdbbd0f177bc56d609d5f4d",
            "docstring": "\"\"\"\nRetrieve the AI provider for DeepSeek and validate its type.\n\nArguments:\n- No arguments.\n\nExceptions:\n- AssertionError is raised if the provider type is not DeepSeekProvider.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "83f762c016e333fc99e4d57dd068f122656b1900",
            "docstring": "\"\"\"\nThis function is used to test for unknown provider by attempting to retrieve an AI provider with an unknown name.\nIt uses pytest to check if an AiProviderError is raised when attempting to get the AI provider with the name \"unknown\".\n\nArguments:\n    No arguments are passed to this function.\n\nExceptions:\n    Raises an AiProviderError if attempting to get an AI provider with the name \"unknown\" results in an error.\n\nSide Effects:\n    This function interacts with pytest to perform the test for an unknown provider.\n\n\"\"\"",
            "last_accessed": 1745566768
        },
        {
            "sha1": "ef8313acef0b19c17d64a28b7e1c45e863bc215f",
            "docstring": "\"\"\"\nThis file contains unit tests for the get_ai_provider function, which retrieves AI providers based on the provider name\nprovided. The tests cover scenarios such as successful provider retrieval, failure cases, and handling of import errors\nusing patching with unittest.mock.patch and pytest.raises. The tested AI providers include OpenAIProvider,\nGPT4AllProvider, InstructLabProvider, BARTProvider, and DeepSeekProvider. The tests verify that the appropriate\nexceptions are raised or handled gracefully. The file imports modules and classes from exceptions.exceptions and\nproviders modules.\n\nTest functions like test_get_ai_provider_openai, test_get_ai_provider_bart, test_get_ai_provider_deepseek, and\ntest_unknown_provider verify the behavior of get_ai_provider for different provider names. Each function asserts that\nthe returned provider matches the expected provider class. The test_unknown_provider function checks for an\nAiProviderError when an unknown provider name is provided.\n\"\"\"",
            "last_accessed": 1745608804
        },
        {
            "sha1": "adda77a6378747e3b39e2f3242b728e141262d24",
            "docstring": "\"\"\"\nThis function is used to test for an unknown provider by attempting to retrieve an AI provider with an unknown name.\nIt uses pytest to check if an AiProviderError is raised when attempting to get the AI provider with the name \"unknown\".\n\nArguments:\nNo arguments are passed to this function.\n\nExceptions:\nRaises an AiProviderError if attempting to get an AI provider with the name \"unknown\" results in an error.\n\nSide Effects:\nThis function interacts with pytest to perform the test for an unknown provider.\n\"\"\"",
            "last_accessed": 1745608806
        },
        {
            "sha1": "d32ad347c98125a23a1dd57394b99198b0f99c36",
            "docstring": "\"\"\"\nThis file contains unit tests for the get_ai_provider function, which retrieves AI providers based on the provider name\nprovided. The tests cover scenarios such as successful provider retrieval, failure cases, and handling of import errors\nusing patching with unittest.mock.patch and pytest.raises. The tested AI providers include OpenAIProvider,\nGPT4AllProvider, InstructLabProvider, BARTProvider, and DeepSeekProvider. The tests verify that the appropriate\nexceptions are raised or handled gracefully. The file imports modules and classes from exceptions.exceptions and\nproviders modules.\n\nTest functions like test_get_ai_provider_openai, test_get_ai_provider_bart, test_get_ai_provider_deepseek, and\ntest_unknown_provider verify the behavior of get_ai_provider for different provider names. Each function asserts that\nthe returned provider matches the expected provider class. The test_unknown_provider function checks for an\nAiProviderError when an unknown provider name is provided.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "7b21dd8e97d0b7b418068f4f652c68b8263792a3",
            "docstring": "\"\"\"\nThis function is used to test for an unknown provider by attempting to retrieve an AI provider with an unknown name.\nIt uses pytest to check if an AiProviderError is raised when attempting to get the AI provider with the name\n\"unknown\".\n\nArguments:\nNo arguments are passed to this function.\n\nExceptions:\nRaises an AiProviderError if attempting to get an AI provider with the name \"unknown\" results in an error.\n\nSide Effects:\nThis function interacts with pytest to perform the test for an unknown provider.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/providers/test_instructlab_provider.py": [
        {
            "sha1": "b4685e41d7d2a8c669fc0e73a880725411524de9",
            "docstring": "\"\"\"\nThis file contains unit tests for the InstructLabProvider class from the instructlab_provider module.\nIt includes tests for initializing the provider with default values, improving text successfully, and handling failure\nscenarios.\nThe tests use MagicMock and patch from the unittest.mock module, as well as pytest for assertions.\nThe improve_text method of the provider is tested for successful and failed responses from the server.\n\nThe InstructLabProvider class is tested for initializing with default values, improving text successfully, and handling failure scenarios.\nThe improve_text_success function tests the successful improvement of text using the improve_text method.\nThe improve_text_failure function tests the error handling of the improve_text method when the server responds with an error.\n\"\"\"",
            "last_accessed": 1745566770
        },
        {
            "sha1": "5cbdc93ed83ed23bd91d9b54f469b8b8215af326",
            "docstring": "\"\"\"\nInitialize an InstructLabProvider object with default values for url and model attributes.\n\nArguments:\nNo arguments.\n\nReturn:\nNo return value.\n\nSide Effects:\nInitializes an InstructLabProvider object with url set to \"http://some/url\" and model set to \"hhhhhhhhhhhhh\".\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "fca1e03fbf993a0ab2f904754420b17a30315a93",
            "docstring": "\"\"\"\nInitialize an InstructLabProvider object for testing purposes.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "6fb2eef843cb1049c425d45d11397872566ca800",
            "docstring": "\"\"\"\nThis function tests the error handling of the improve_text method in the InstructLabProvider class. It initializes\nan instance of the InstructLabProvider class and simulates a server error response during the text improvement\nprocess. The function raises an AiError exception with a specific error message if the server responds with an HTTP\nstatus code of 500.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "a78111d7c0cf53fe93b2728529578146f4777bb0",
            "docstring": "\"\"\"\nThis file contains unit tests for the InstructLabProvider class from the instructlab_provider module.\nIt includes tests for initializing the provider with default values, improving text successfully, and handling failure\nscenarios.\nThe tests use MagicMock and patch from the unittest.mock module, as well as pytest for assertions.\nThe improve_text method of the provider is tested for successful and failed responses from the server.\n\nThe InstructLabProvider class is tested for initializing with default values, improving text successfully, and handling\nfailure scenarios.\nThe improve_text_success function tests the successful improvement of text using the improve_text method.\nThe improve_text_failure function tests the error handling of the improve_text method when the server responds with an\nerror.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/providers/test_gpt4all_provider.py": [
        {
            "sha1": "1bd67b8725ddca97e1c32831a5db6273fe882795",
            "docstring": "\"\"\"\nThis module contains unit tests for the GPT4AllProvider class in the providers.gpt4all_provider module.\n\nThe tests include:\n- test_init_success: Tests the successful initialization of the GPT4AllProvider class.\n- test_init_failure: Tests the failure scenario during the initialization of the GPT4AllProvider class.\n- test_improve_text: Tests the improve_text method of the GPT4AllProvider class.\n\nThese tests use patching and mocking to simulate interactions with the GPT4All model and handle exceptions.\n\nAuthor: Unknown\n\"\"\"",
            "last_accessed": 1745566776
        },
        {
            "sha1": "1ec81a735b062d8b8ce07c7b6fab540150272f86",
            "docstring": "\"\"\"\nInitialize a GPT4AllProvider instance with a specified model name and assert its correctness.\n\nArguments:\n- No arguments.\n\nReturn:\n- No return value.\n\nExceptions:\n- No exceptions are raised.\n\nSide Effects:\n- None.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "26766cd6104976ca8180a3ebb67c8ef587f25c54",
            "docstring": "\"\"\"\nInitialize GPT4AllProvider with a broken model and test initialization failure.\n\nArguments:\n- No arguments.\n\nExceptions:\n- GTP4AllError: Raised when the GPT4All provider encounters an error during initialization.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "e15096eec061d085df71c70ec4210d40c57a4178",
            "docstring": "\"\"\"\nSummary:\nFunction to test the improvement of text generated by a mock model.\n\nArguments:\n- No arguments.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "1170f7a596d3ef19dca930c1c469d10fbd89202a",
            "docstring": "\"\"\"\nThis module contains unit tests for the GPT4AllProvider class in the providers.gpt4all_provider module.\n\nThe tests include:\n- test_init_success: Tests the successful initialization of the GPT4AllProvider class.\n- test_init_failure: Tests the failure scenario during the initialization of the GPT4AllProvider class.\n- test_improve_text: Tests the improve_text method of the GPT4AllProvider class.\n\nThese tests use patching and mocking to simulate interactions with the GPT4All model and handle exceptions.\n\nAuthor: Unknown\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/providers/test_openai_provider_fallback_handling.py": [
        {
            "sha1": "6cebefb9f98acae268d59ed04a9c1a664fa255f3",
            "docstring": "\"\"\"\nThis script defines a test function to validate the response handling of the OpenAIProvider class. It mocks a response\nobject with a status code of 200 and a JSON payload containing a message with content \"\u2713\". The function then replaces\nthe requests.post method with a lambda function that returns the mock response. It creates an instance of the\nOpenAIProvider class, calls the improve_text method with dummy arguments, and asserts that the result is equal to \"\u2713\".\n\nThe test_openai_response_handling function handles the response from OpenAI API after requesting text improvement. It\nmodifies the behavior of the requests.post function to return a mock response. The function takes no arguments and\nreturns the improved text as a string. No exceptions are raised during the execution of this function.\n\"\"\"",
            "last_accessed": 1745566782
        },
        {
            "sha1": "b8c0bce546e0416349be772e91207b23e8d32ba5",
            "docstring": "\"\"\"\nHandles the response from OpenAI API after requesting text improvement.\n\nArguments:\n- No arguments.\n\nReturn:\n- The improved text as a string.\n\nExceptions:\n- No exceptions raised.\n\nSide Effects:\n- Modifies the behavior of the requests.post function to return a mock response.\n\"\"\"",
            "last_accessed": 1745613461
        },
        {
            "sha1": "f8967fe55dd2e5974f69c194cad5aeb7cce3d6af",
            "docstring": "\"\"\"\nThis script defines a test function to validate the response handling of the OpenAIProvider class. It mocks a response\nobject with a status code of 200 and a JSON payload containing a message with content \"\u2713\". The function then replaces\nthe requests.post method with a lambda function that returns the mock response. It creates an instance of the\nOpenAIProvider class, calls the improve_text method with dummy arguments, and asserts that the result is equal to \"\u2713\".\n\nThe test_openai_response_handling function handles the response from OpenAI API after requesting text improvement. It\nmodifies the behavior of the requests.post function to return a mock response. The function takes no arguments and\nreturns the improved text as a string. No exceptions are raised during the execution of this function.\n\"\"\"",
            "last_accessed": 1745613461
        }
    ],
    "jira_creator/tests/templates/test_template_loader.py": [
        {
            "sha1": "ab05c0fa3c19a3fe44e6109c6adec7c70377ca6d",
            "docstring": "\"\"\"\nThis module contains unit tests for the `TemplateLoader` class, which is responsible for loading and processing\ntemplate files with specific fields and templates. The tests cover functionalities such as parsing fields, \nrendering templates with provided data, handling missing template files, and returning joined strings from \ntemplate files. Each test function utilizes the `pytest` framework and operates within a temporary directory \nto ensure isolation and cleanliness during testing.\n\"\"\"",
            "last_accessed": 1745566784
        },
        {
            "sha1": "4992f81a06e76e3f4ac160e8476954af1c69d79d",
            "docstring": "\"\"\"\nParses fields from a template file.\n\nArguments:\n- tmp_path (path): Path to a temporary directory where the template file will be created.\n\nSide Effects:\n- Creates a template file with predefined fields in the specified temporary directory.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "ff8b0981a57c6ac911de1226ed4abbf715228275",
            "docstring": "\"\"\"\nRenders a template with a description field.\n\nArguments:\n- tmp_path (path): Path to a temporary directory where the template file will be created.\n\nSide Effects:\n- Creates a template file in the specified temporary directory with predefined content.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "01ea4871a5c9971b243c29436729cd5e81d5c8b2",
            "docstring": "\"\"\"\nLoad a test template from a temporary directory and raise a FileNotFoundError if the template file is not found.\n\nArguments:\n- tmp_path (path): Path to a temporary directory where the template should be located.\n\nExceptions:\n- FileNotFoundError: Raised if the template file is not found in the specified directory.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "93e90ef2ff9b6b05bd1992ccf4af4ed735dde176",
            "docstring": "\"\"\"\nReturns a joined string from a template file.\n\nArguments:\n- tmp_path (path): Path to a temporary directory where the template file will be created.\n\nSide Effects:\n- Creates a template file with specified content in the temporary directory provided.\n\"\"\"",
            "last_accessed": 1745613462
        },
        {
            "sha1": "3bad17f1fc1f4af3707d998e46a4475613ed1d48",
            "docstring": "\"\"\"\nThis module contains unit tests for the `TemplateLoader` class, which is responsible for loading and processing\ntemplate files with specific fields and templates. The tests cover functionalities such as parsing fields,\nrendering templates with provided data, handling missing template files, and returning joined strings from\ntemplate files. Each test function utilizes the `pytest` framework and operates within a temporary directory\nto ensure isolation and cleanliness during testing.\n\"\"\"",
            "last_accessed": 1745613462
        }
    ],
    "jira_creator/tests/rest/ops/test_get_sprint.py": [
        {
            "sha1": "c4454750a5767c1653b0b8f75d3651a12d2bc963",
            "docstring": "\"\"\"\nThis script contains a unit test function 'test_get_sprint' to test the 'get_sprint' method of a client class. \nThe test function uses the 'unittest.mock' module to create a MagicMock object for the 'request' method of the client. \nIt then sets the return value for the MagicMock object and calls the 'get_sprint' method of the client. \nThe test asserts that the 'request' method was called once with specific arguments and that the response matches the expected value.\n\"\"\"",
            "last_accessed": 1745608434
        },
        {
            "sha1": "e40b7e1f09895d75782b7b13133885d75501cfbd",
            "docstring": "\"\"\"\nRetrieves information about the active sprint using the provided client.\n\nArguments:\n- client: An object that allows making requests to a specific API.\n\nReturns:\n- A dictionary containing information about the active sprint, including its ID and name.\n\"\"\"",
            "last_accessed": 1745610674
        },
        {
            "sha1": "df95851ca1c4f4efa4a88f153acaf06eb9bbefbb",
            "docstring": "\"\"\"\nThis script contains a unit test function 'test_get_sprint' to test the 'get_sprint' method of a client class.\nThe test function uses the 'unittest.mock' module to create a MagicMock object for the 'request' method of the client.\nIt then sets the return value for the MagicMock object and calls the 'get_sprint' method of the client.\nThe test asserts that the 'request' method was called once with specific arguments and that the response matches the\nexpected value.\n\"\"\"",
            "last_accessed": 1745610674
        },
        {
            "sha1": "fb1ca544bcd1fc90411aa7bdf63531b5fe5975f0",
            "docstring": "\"\"\"\nThis script contains a unit test function 'test_get_sprint' to test the 'get_sprint' method of a client class.\nThe test function uses the 'unittest.mock' module to create a MagicMock object for the 'request' method of the client.\nIt then sets the return value for the MagicMock object and calls the 'get_sprint' method of the client.\nThe test asserts that the 'request' method was called once with specific arguments and that the response matches the expected value.\n\"\"\"",
            "last_accessed": 1745613450
        },
        {
            "sha1": "acede2e0b2e7e78356d41450c6b7c6cc9759d74a",
            "docstring": "\"\"\"\nRetrieve the active sprint information from JIRA using the provided client.\n\nArguments:\n- client: An object representing the client to interact with JIRA.\n\nReturn: \n- A dictionary containing details of the active sprint fetched from JIRA.\n\nSide Effects:\n- Modifies the client's request attribute to return a predefined sprint data.\n- Verifies that the client's get_sprint method fetches the sprint data correctly.\n\n\"\"\"",
            "last_accessed": 1745613451
        }
    ],
    "jira_creator/tests/commands/test_get_sprint_cli.py": [
        {
            "sha1": "225cdec0d38850b04f25c2c9d21eced5e55af878",
            "docstring": "\"\"\"\nThis file contains a unit test for the 'get_sprint' function in the CLI module. It mocks the 'get_sprint' method of the Jira class to return a success status. The test captures the output and asserts that the word 'success' is present in the output. It also checks if the 'get_sprint' method was called once with no arguments.\n\"\"\"",
            "last_accessed": 1745608757
        },
        {
            "sha1": "77a1bb89e9ce7cbc8d3efc4214713668ff7f5785",
            "docstring": "\"\"\"\nSimulate a successful retrieval of a sprint from Jira using the CLI.\n\nArguments:\n- cli: An instance of the CLI object.\n- capsys: Pytest fixture for capturing stdout and stderr outputs.\n\nSide Effects:\n- Modifies the behavior of the 'get_sprint' method in the Jira object within the CLI instance.\n- Captures the output to assert the success status of the sprint retrieval.\n\nExceptions: None\n\"\"\"",
            "last_accessed": 1745610683
        },
        {
            "sha1": "4679647966874f0932c540861c5c3a89b7c78c6c",
            "docstring": "\"\"\"\nThis file contains a unit test for the 'get_sprint' function in the CLI module. It mocks the 'get_sprint' method of the\nJira class to return a success status. The test captures the output and asserts that the word 'success' is present in\nthe output. It also checks if the 'get_sprint' method was called once with no arguments.\n\"\"\"",
            "last_accessed": 1745610683
        },
        {
            "sha1": "001d2c9c070f0594774b381ab7ff9593deef0ef5",
            "docstring": "\"\"\"\nThis file contains a unit test for the 'get_sprint' function in the CLI module. It mocks the 'get_sprint' method of the\nJira class to return a success status. The test captures the output and asserts that the word 'success' is present in\nthe output. It also checks if the 'get_sprint' method was called once with no arguments.\n\"\"\"",
            "last_accessed": 1745613458
        },
        {
            "sha1": "343f4defcb37b7b4266dd27b2f58746d75958d68",
            "docstring": "\"\"\"\nRetrieve and test the successful retrieval of a sprint using the command-line interface.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture to capture stdout and stderr outputs.\n\nSide Effects:\n- Modifies the behavior of the 'get_sprint' method of the Jira object within the cli.\n- Prints the details of the retrieved sprint to the standard output.\n\nExceptions: None\n\"\"\"",
            "last_accessed": 1745613460
        }
    ],
    "jira_creator/rest/ops/build_payload.py": [
        {
            "sha1": "07388f50863576d6ebf55be102a7006d6a613646",
            "docstring": "\"\"\"\nThis module provides functionality to construct a payload for creating issues in a Jira system.\n\nThe main function, `build_payload`, accepts parameters including summary, description, issue type, project key,\naffects version, component name, priority, and epic field. It assembles these parameters into a structured\ndictionary that can be used to create an issue in Jira.\n\nKey Features:\n- Supports various issue types including epics, with special handling for epic fields.\n- Returns a well-defined dictionary that conforms to Jira's API requirements.\n\nExample Usage:\nTo create a payload for a bug issue:\npayload = build_payload(\"Bug in Login Page\", \"Fix the issue with the login functionality\", \"Bug\", \"PROJ123\", \"v1.0\",\n\"Authentication\", \"High\", \"Epic Name\")\n\"\"\"",
            "last_accessed": 1745613271
        },
        {
            "sha1": "8072b8dccbc9e807f0448f7482aa64a4c34c391a",
            "docstring": "\"\"\"\nBuilds a payload dictionary for creating an issue in a project.\n\nArguments:\n- summary (str): A brief summary or title of the issue.\n- description (str): Detailed description of the issue.\n- issue_type (str): Type of the issue (e.g., Bug, Task, Story).\n- project_key (str): Key of the project where the issue will be created.\n- affects_version (str): Version affected by the issue.\n- component_name (str): Name of the component related to the issue.\n- priority (str): Priority of the issue (e.g., High, Medium, Low).\n- epic_field (str): Field related to the epic the issue belongs to.\n\nReturns:\n- dict: A dictionary representing the payload for creating an issue with the specified details.\n\"\"\"",
            "last_accessed": 1745613399
        },
        {
            "sha1": "0174fd77b24bdf07b37575c71191bf05c5e5c7e3",
            "docstring": "\"\"\"\nThis module provides functionality to construct a payload for creating issues in a Jira system.\n\nThe main function, `build_payload`, accepts parameters including summary, description, issue type, project key,\naffects version, component name, priority, and epic field. It assembles these parameters into a structured\ndictionary that can be used to create an issue in Jira.\n\nKey Features:\n- Supports various issue types including epics, with special handling for epic fields.\n- Returns a well-defined dictionary that conforms to Jira's API requirements.\n\nExample Usage:\nTo create a payload for a bug issue:\npayload = build_payload(\"Bug in Login Page\", \"Fix the issue with the login functionality\", \"Bug\", \"PROJ123\", \"v1.0\",\n\"Authentication\", \"High\", \"Epic Name\")\n\"\"\"",
            "last_accessed": 1745613399
        }
    ],
    "jira_creator/rest/ops/list_issues.py": [
        {
            "sha1": "6f8e0e7bb97539a93fddd26ab42605017a9cb933",
            "docstring": "\"\"\"\nThis module provides a function to list JIRA issues based on specified criteria.\n\nThe `list_issues` function allows users to filter JIRA issues using various parameters such as project, component,\nassignee, status, summary, and others. It constructs a JQL (JIRA Query Language) query based on the provided parameters\nand retrieves the relevant issues through the JIRA API.\n\nAdditionally, the function processes the retrieved issues to extract sprint information, adding it to each issue before\nreturning the list of filtered issues.\n\nNote: The function includes JSCPD ignore comments to exclude code blocks from duplication detection.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "5f1dabfe2a076477b3ebe97c7b1469da5d020a13",
            "docstring": "\"\"\"\nRetrieve a list of issues based on specified filters.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n- get_current_user_fn (function): A function used to retrieve the current user.\n- project (str, optional): Filter issues by project name.\n- component (str, optional): Filter issues by component name.\n- assignee (str, optional): Filter issues by assignee.\n- status (str, optional): Filter issues by status.\n- summary (str, optional): Filter issues by summary.\n- issues_blocked (bool, optional): Flag to filter blocked issues.\n- issues_unblocked (bool, optional): Flag to filter unblocked issues.\n- reporter (str, optional): Filter issues by reporter.\n\nReturns:\n- List: A list of dictionaries representing the filtered issues. Each dictionary contains information about the\nissue, including key, summary, status, assignee, priority, story points, sprint, and blocked status.\n\"\"\"",
            "last_accessed": 1745613431
        },
        {
            "sha1": "c56b6fedab8f6e5d22733b9f6aa2ca55b2fdfbdf",
            "docstring": "\"\"\"\nThis module provides a function to list JIRA issues based on specified criteria.\n\nThe `list_issues` function allows users to filter JIRA issues using various parameters such as project, component,\nassignee, status, summary, and others. It constructs a JQL (JIRA Query Language) query based on the provided parameters\nand retrieves the relevant issues through the JIRA API.\n\nAdditionally, the function processes the retrieved issues to extract sprint information, adding it to each issue before\nreturning the list of filtered issues.\n\nNote: The function includes JSCPD ignore comments to exclude code blocks from duplication detection.\n\"\"\"",
            "last_accessed": 1745613431
        }
    ],
    "jira_creator/commands/cli_list_issues.py": [
        {
            "sha1": "7f7ac6010cedebf11b775e6abacc7fe40cd1a051",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) function to list issues from a Jira project.\n\nThe `cli_list_issues` function retrieves and displays issues based on various filtering options such as project,\ncomponent, reporter, assignee, status, summary, and blocked status. It formats the output into a tabular structure,\nensuring that the summary column is limited to a specified width for better readability.\n\nThe function handles potential errors related to listing issues and prints appropriate messages to the console.\n\nDependencies:\n- `re`: For regular expression operations.\n- `core.env_fetcher`: To fetch environment variables related to Jira fields.\n- `exceptions.exceptions`: Custom exceptions for error handling.\n\nUsage:\n- Call `cli_list_issues(jira, args)` where `jira` is the Jira client instance and `args` contains the filtering\ncriteria.\n\"\"\"",
            "last_accessed": 1745613275
        },
        {
            "sha1": "32c6a98eb3c84b49ee925b8f9d57eac6b12c7324",
            "docstring": "\"\"\"\nRetrieve a list of issues from a Jira instance based on the provided arguments.\n\nArguments:\n- jira (Jira): An instance of the Jira client used to interact with the Jira API.\n- args (Namespace): A Namespace object containing the following attributes:\n  - project (str): The project key for filtering the issues.\n  - component (str): The component name for filtering the issues.\n  - reporter (str): The reporter's username for filtering the issues.\n  - assignee (str): The assignee's username for filtering the issues.\n  - status (str): The status to filter the issues by.\n  - summary (str): A keyword to filter the issues by their summary.\n  - blocked (bool): A flag to filter for blocked issues.\n  - unblocked (bool): A flag to filter for unblocked issues.\n\nSide Effects:\n- Calls the 'list_issues' method of the Jira client to fetch a list of issues based on the provided arguments.\n- Depending on the presence of the 'reporter' attribute in 'args', the issues are filtered by either 'reporter' or 'assignee'.\n- Prints a formatted table of the filtered issues to the console.\n\nExceptions:\n- Raises ListIssuesError if the attempt to list issues fails.\n\"\"\"",
            "last_accessed": 1745613440
        },
        {
            "sha1": "6d12f2c906b47c1fea27bf5182ef82baae025fe5",
            "docstring": "\"\"\"\nThis module provides a command-line interface (CLI) function to list issues from a Jira project.\n\nThe `cli_list_issues` function retrieves and displays issues based on various filtering options such as project,\ncomponent, reporter, assignee, status, summary, and blocked status. It formats the output into a tabular structure,\nensuring that the summary column is limited to a specified width for better readability.\n\nThe function handles potential errors related to listing issues and prints appropriate messages to the console.\n\nDependencies:\n- `re`: For regular expression operations.\n- `core.env_fetcher`: To fetch environment variables related to Jira fields.\n- `exceptions.exceptions`: Custom exceptions for error handling.\n\nUsage:\n- Call `cli_list_issues(jira, args)` where `jira` is the Jira client instance and `args` contains the filtering\ncriteria.\n\"\"\"",
            "last_accessed": 1745613440
        }
    ],
    "jira_creator/rh_jira.py": [
        {
            "sha1": "d5d7443148e96e471d0a920b26ccb36e65f647a8",
            "docstring": "\"\"\"\nA command-line interface (CLI) tool for managing JIRA issues.\n\nThis script provides a set of commands to interact with JIRA, allowing users to create, edit, and manage issues, as\nwell as perform various operations such as assigning users, adding comments, and managing sprints. It integrates with\nAI services to assist with issue creation and management.\n\nKey Features:\n- Create, edit, and delete JIRA issues.\n- Assign and unassign users to/from issues.\n- Add comments and manage issue statuses.\n- Search for issues using JIRA Query Language (JQL).\n- Integrate AI assistance for issue handling and suggestions.\n- Lint issues for quality checks and provide feedback.\n- Manage sprints and track progress.\n\nDependencies:\n- core.env_fetcher: For fetching environment variables.\n- exceptions.exceptions: Custom exceptions for error handling.\n- providers: For obtaining AI provider instances.\n- rest.client: JIRA client for making API requests.\n- rest.prompts: For handling prompt templates used in AI interactions.\n\nUsage:\nRun the script from the command line, providing appropriate subcommands and arguments based on the desired action.\n\"\"\"",
            "last_accessed": 1745611623
        },
        {
            "sha1": "7fc96cbd66abfd70de68d126fedc0fcd0bfbdd85",
            "docstring": "\"\"\"\nA command-line interface (CLI) for interacting with JIRA issues, enabling users to manage issues, perform\nAI-assisted operations, and execute various JIRA-related tasks.\n\nAttributes:\n    jira (JiraClient): An instance of the JiraClient used to interact with the JIRA API.\n    template_dir (Path): The directory path for templates fetched from the environment.\n    ai_provider: The AI provider instance configured based on environment variables.\n    default_prompt: The default prompt for AI interactions.\n    comment_prompt: The prompt used for adding comments to issues.\n    ai_helper_prompt: The prompt used for AI helper functionalities.\n\nMethods:\n    run(): Starts the CLI and handles command-line arguments.\n    _register_subcommands(subparsers): Registers subcommands for issue management and AI assistance.\n    _dispatch_command(args): Dispatches the command based on parsed arguments.\n    ai_helper(args): Executes the AI helper command.\n    open_issue(args): Opens a JIRA issue in the browser.\n    view_issue(args): Displays a JIRA issue in the console.\n    add_comment(args): Adds a comment to a specified JIRA issue.\n    create_issue(args): Creates a new JIRA issue based on provided parameters.\n    list_issues(args): Lists issues assigned to the user with optional filters.\n    change_type(args): Changes the type of a specified JIRA issue.\n    migrate(args): Migrates a specified issue to a new type.\n    edit_issue(args): Edits the description of a specified JIRA issue.\n    unassign(args): Unassigns a user from a specified JIRA issue.\n    assign(args): Assigns a user to a specified JIRA issue.\n    set_priority(args): Sets the priority of a specified JIRA issue.\n    set_story_epic(args): Sets the epic for a specified story issue.\n    remove_sprint(args): Removes a specified issue from its sprint.\n    add_sprint(args): Adds a specified issue to a sprint.\n    set_status(args): Sets the status of a specified JIRA issue.\n    set_acceptance_criteria(args): Sets the acceptance criteria for a specified issue.\n    vote_story_points(args): Votes on story points for a specified issue.\n    set_story_points(args): Sets story points directly for a specified issue.\n    block(args): Marks a specified issue as blocked.\n    unblock(args): Marks a specified issue as unblocked.\n    validate_issue(fields): Validates issue fields using an AI provider.\n    lint(args): Lints a specified issue for quality.\n    lint_all(args): Lints all issues assigned to the user.\n    blocked(args): Lists blocked issues with optional filters.\n    search(args): Searches for issues using JIRA Query Language (JQL).\n    quarterly_connection(args): Performs a quarterly connection report.\n    search_users(args): Searches for users by a specified term.\n    talk(args): Initiates a conversation with JIRA.\n    view_user(args): Displays user information based on account ID.\n    add_flag(args): Adds a flag to a specified issue.\n    remove_flag(args): Removes a flag from a specified issue.\n    list_sprints(args): Lists available sprints.\n    set_summary(args): Sets the summary for a specified issue.\n    clone_issue(args): Clones a specified issue.\n\"\"\"",
            "last_accessed": 1745611623
        },
        {
            "sha1": "f8e5879e57c28020bbd6e135f84d6ad76f270bd4",
            "docstring": "\"\"\"\nInitializes the JiraBot object with required variables and settings.\n\nArguments:\nNone\n\nSide Effects:\n- Initializes a JiraClient object and assigns it to self.jira.\n- Fetches required environment variables using EnvFetcher.\n- Sets the template directory path based on the value retrieved from the environment variables.\n- Retrieves and sets the AI provider based on the value retrieved from the environment variables.\n- Sets default prompts for different issue types using PromptLibrary.\n\nReturns:\nNone\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "b160807cc06f89f40ab9d1ec36cb24b0686f670b",
            "docstring": "\"\"\"\nInitialize the argcomplete module for command-line argument completion.\n\nArguments:\n- self: The instance of the class.\n\nExceptions:\nNone\n\"\"\"",
            "last_accessed": 1745611623
        },
        {
            "sha1": "f1e1b9516503768dd00a2f10601107c5d65d19d3",
            "docstring": "\"\"\"\nRegisters subcommands for a given argparse subparsers object.\n\nArguments:\n- subparsers (_SubParsersAction): An instance of the argparse subparsers object to which subcommands will be\nregistered.\n\nSide Effects:\nModifies the subparsers object by registering subcommands for it.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "c07c25831464b591c6b15f1c6fea2f6b63564592",
            "docstring": "\"\"\"\nCreates a new subparser for command-line argument parsing.\n\nArgs:\n    name (str): The name of the subparser.\n    help_text (str): The help text displayed when using the subparser.\n    aliases (list, optional): A list of alternative names for the subparser. Defaults to None.\n\nReturns:\n    argparse.ArgumentParser: The newly created subparser.\n\"\"\"",
            "last_accessed": 1745611623
        },
        {
            "sha1": "8a749cc89d09f68b465857e799f4d07467d2a2cf",
            "docstring": "\"\"\"\nDispatches a command based on the input arguments.\n\nArguments:\n- self: The instance of the class.\n- args (Namespace): A namespace containing the command to be executed.\n\nExceptions:\n- DispatcherError: Raised when the command execution fails.\n\nSide Effects:\n- Prints an error message if the command execution fails.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "111c03ae3697ab1c2988693a79d33f58910fe6a3",
            "docstring": "\"\"\"\nExecute the AI helper functionality with the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the arguments needed for the AI helper functionality.\n\nSide Effects:\n- Executes the CLI AI helper function with the current object instance, AI provider, AI helper prompt, and the\nprovided arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "5fad3fbce87fe3b5b7117284511fc769c35a0fc4",
            "docstring": "\"\"\"\nOpen an issue using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the arguments needed to open an issue.\n\nSide Effects:\n- Calls the cli_open_issue function with the provided arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "1f4b8b450cffd52993b0890bf968b5d1a2feef06",
            "docstring": "\"\"\"\nView an issue in Jira using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the arguments needed to view the issue in Jira.\n\nSide Effects:\n- Calls the cli_view_issue function with the Jira object and the provided arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "d7dfdd383169f2071f464ce9ff463e7ec519ce66",
            "docstring": "\"\"\"\nAdds a comment to a Jira issue using the provided arguments.\n\nArguments:\n- self: The instance of the class.\n- args (Namespace): A Namespace object containing the necessary arguments for adding a comment to a Jira issue.\n\nSide Effects:\n- Modifies the Jira issue by adding a comment.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "94174d6fb35de067bd13da75f0d8c416ce58eb24",
            "docstring": "\"\"\"\nCreates an issue using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing arguments for creating the issue.\n\nSide Effects:\n- Calls the cli_create_issue function with the necessary parameters to create an issue.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "e9d9d04bccca01ad6a7a69d96df70f10fae8cee9",
            "docstring": "\"\"\"\nCalls a CLI function to list issues based on the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing parsed arguments.\n\nReturn:\nNone\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "3212fecbadf65ac592903c662f759d1d6d93f27f",
            "docstring": "\"\"\"\nChange the type of an issue in Jira using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the arguments needed to change the type of the issue in Jira.\n\nSide Effects:\n- Modifies the type of the specified issue in Jira.\n\"\"\"",
            "last_accessed": 1745611623
        },
        {
            "sha1": "1905b2dc28d853e965691b3fda43819fdababce4",
            "docstring": "\"\"\"\nMigrates data using the provided arguments.\n\nArguments:\n- self: The object itself.\n- args (Namespace): A Namespace object containing parsed command-line arguments.\n\nSide Effects:\n- Calls the cli_migrate function with the Jira instance and the provided arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "80882325a39b657f724cd2959114d0b3e628fd0f",
            "docstring": "\"\"\"\nEdit an issue using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A namespace object containing the arguments needed for editing the issue.\n\nSide Effects:\n- Modifies the state of the issue in Jira based on the provided arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "2fb00475e681a0dea21c02a7b6010dc50cb16658",
            "docstring": "\"\"\"\nAttempts to clean up the given text using the AI provider.\n\nArgs:\n    prompt (str): The prompt to be used for cleaning up the text.\n    text (str): The text to be cleaned up.\n\nReturns:\n    str: The cleaned-up text after processing with the AI provider.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "4ca1c336a05d2d046fddd90b448a0f89769a6271",
            "docstring": "\"\"\"\nUnassigns an issue in Jira.\n\nArguments:\n- self: the object instance\n- args (Namespace): A Namespace object containing the arguments needed to unassign the issue.\n\nSide Effects:\n- Modifies the assignment of the specified Jira issue.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "7f17bdd67c1e1af58cd73b6ee940c3254fa1d63c",
            "docstring": "\"\"\"\nAssign an issue in Jira to a user.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing command-line arguments.\n\nExceptions:\n- None\n\nSide Effects:\n- Modifies the assignment of an issue in Jira.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "767cdf62f504907524a62105dbbd8fe5b4302a42",
            "docstring": "\"\"\"\nSet the priority of a Jira issue using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the arguments needed to set the priority.\n\nReturn:\n- None\n\nExceptions:\n- No exceptions are raised explicitly within this function.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "0ccc1d4ad3df01357221957d0556a575ea2858a1",
            "docstring": "\"\"\"\nSet the epic for a story in Jira.\n\nArguments:\n- self: the object instance\n- args (Namespace): A namespace containing the arguments for setting the epic of a story in Jira.\n\nExceptions:\n- None\n\nSide Effects:\n- Modifies the epic of a story in Jira.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "4e6996b6003911618176417274efeddcfc36cc9b",
            "docstring": "\"\"\"\nRemove a sprint from Jira board.\n\nArguments:\n- self: the instance of the class.\n- args (Namespace): A Namespace object containing parsed arguments from the command line.\n\nExceptions:\n- None\n\nSide Effects:\n- Modifies the Jira board by removing a sprint.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "2b7933b409adcae91a97c16dabc3eaa56135b2c1",
            "docstring": "\"\"\"\nAdds a sprint to a Jira board using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the necessary arguments for adding a sprint.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "47ece1f1c40360e5f90508b78705e3b809ac233d",
            "docstring": "\"\"\"\nSet the status of an issue in Jira using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A namespace containing the arguments needed to set the status of an issue in Jira.\n\nExceptions:\n- None\n\nSide Effects:\n- Modifies the status of an issue in Jira.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "074831f5d55a2b89713cd9fac6487c887917a83d",
            "docstring": "\"\"\"\nSet acceptance criteria for a Jira issue using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the command-line arguments.\n\nExceptions:\nNone\n\nSide Effects:\nCalls the cli_set_acceptance_criteria function with the Jira instance and the provided arguments.\n\nReturn:\nNone\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "ed981c9fdc8f3234289414e06578fade7a9df286",
            "docstring": "\"\"\"\nCast a vote for story points on a Jira issue.\n\nArguments:\n- self: The current instance of the class.\n- args (Namespace): A namespace object containing parsed command-line arguments.\n\nSide Effects:\n- Calls the 'cli_vote_story_points' function with the Jira instance and provided arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "5032504f8fd8b54b7ddd16c509a2414cc59a5feb",
            "docstring": "\"\"\"\nSet the story points for a Jira issue using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the arguments needed to set story points for a Jira issue.\n\nExceptions:\n- None\n\nSide Effects:\n- Calls the cli_set_story_points function with the Jira instance and provided arguments.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "2154452d89a4279b1b4de53cb4965db82ed73ca5",
            "docstring": "\"\"\"\nExecute a blocking operation using arguments provided in the Namespace object.\n\nArguments:\n- self: the instance of the class containing the method.\n- args (Namespace): Namespace object containing arguments for the operation.\n\nSide Effects:\n- Executes a blocking operation using the provided arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "abd75e5322007da2ab86c1e3d2378f414985e658",
            "docstring": "\"\"\"\nUnblocks an item in Jira using the provided arguments.\n\nArguments:\n- self: the instance of the class.\n- args (Namespace): Namespace object containing the arguments needed to unblock the item in Jira.\n\nSide Effects:\n- Modifies the state of the item in Jira by unblocking it.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "c37a0be404941a561fddadd25b4399e383ac85cd",
            "docstring": "\"\"\"\nValidates the provided fields for an issue using a CLI validation function.\n\nArguments:\n- fields (dict[str, str]): A dictionary containing the fields of the issue to be validated.\n- self (implicit): Instance of the class containing the method.\n\nReturns:\n- None\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "348c679ca4b15c11ccca616771f9b650175b3f56",
            "docstring": "\"\"\"\nLint the provided arguments using the CLI linter.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the parsed arguments.\n\nSide Effects:\n- Calls the cli_lint function with the provided Jira instance, AI provider, and parsed arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "5c0c459b0626f4f654d4d935157640415020315e",
            "docstring": "\"\"\"\nLint all Jira issues using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing parsed command-line arguments.\n\nSide Effects:\n- Calls cli_lint_all function with Jira instance, AI provider instance, and parsed arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "f0a5f1222ef1675092048c8d6c9e18ad89e22e3a",
            "docstring": "\"\"\"\nCalls a function to block a specific resource using Jira.\n\nArguments:\n- self: the instance of the class\n- args (Namespace): A Namespace object containing the arguments passed to the function.\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "77777f3a5b2d19f23fd9626e9420e824984f3f72",
            "docstring": "\"\"\"\nSearch for items using the Jira API based on the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A namespace object containing the search parameters.\n\nSide Effects:\n- Calls the 'cli_search' function with the Jira instance and provided arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "917d1d49c2ca7ec7e8a396cc28831f7c1d163ab5",
            "docstring": "\"\"\"\nExecute a quarterly connection using the provided arguments.\n\nArguments:\n- self: the object instance\n- _: A Namespace object containing the arguments for the connection\n\nSide Effects:\n- Calls cli_quarterly_connection function with the Jira and AI provider attributes of the object instance\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "a21736887abc7ec5c9056080e8dec049f4d494e5",
            "docstring": "\"\"\"\nSearches for users using the provided arguments.\n\nArguments:\n- self: the object instance\n- args (Namespace): A Namespace object containing the arguments for the search.\n\nSide Effects:\nCalls the 'cli_search_users' function with the 'jira' attribute and the provided arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "639378393b6e625f55a5cce6d378cfd5ee21e68f",
            "docstring": "\"\"\"\nExecutes the 'cli_talk' function with the provided arguments.\n\nArguments:\n- self: The instance of the class.\n- args (Namespace): A Namespace object containing the command-line arguments.\n\nSide Effects:\n- Calls the 'cli_talk' function with the provided arguments.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "da5eaf202f5e2c3951506948187d9391a9b22e44",
            "docstring": "\"\"\"\nView a user's information using the CLI.\n\nArguments:\n- self: the object instance\n- args (Namespace): A Namespace object containing parsed arguments from the command line.\n\nExceptions: None\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "dce41fea7300e8d8cd8f4f6e9696075f774c42af",
            "docstring": "\"\"\"\nAdds a flag to a Jira issue using the provided arguments.\n\nArguments:\n- self: the object instance\n- args (Namespace): Namespace object containing parsed command-line arguments\n\nExceptions:\n- No exceptions are raised by this function.\n\nSide Effects:\n- Modifies the Jira issue by adding a flag.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "9c62eb0eacb8cef4717835ba8db2e15451ea3573",
            "docstring": "\"\"\"\nRemove a flag from a Jira issue.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing parsed arguments.\n\nExceptions:\n- No exceptions are raised by this function.\n\nSide Effects:\n- Modifies the Jira issue by removing a flag.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "45ee5df1dfff348dbf9d344748f8a6b365ed58f3",
            "docstring": "\"\"\"\nList sprints using the provided Jira instance and command-line arguments.\n\nArguments:\n- self: The instance of the class containing the method.\n- args (Namespace): A namespace object containing command-line arguments.\n\nReturn:\nNone\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "1f4e96c4b74040a550f12b4e186da74e8d08a920",
            "docstring": "\"\"\"\nSet a summary for a Jira issue using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the arguments needed to set the summary for a Jira issue.\n\nExceptions:\nNone\n\nSide Effects:\nCalls an external function cli_set_summary() to set the summary for a Jira issue.\n\nReturn:\nNone\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "27d72e63759caf665d8d297edf0a03d21ad9ac88",
            "docstring": "\"\"\"\nClones an issue in Jira using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A namespace object containing the arguments needed for cloning the issue.\n\nSide Effects:\n- Clones the specified issue in Jira.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "b0b4442fe61ddefc04a1cd0f2abdf4cac26fb90a",
            "docstring": "\"\"\"\nGet the current sprint.\n\nArguments:\n- self: the object instance\n- args (Namespace): Namespace object containing arguments\n\nReturn:\n- None\n\n\"\"\"",
            "last_accessed": 1745611757
        },
        {
            "sha1": "bc0d2d385901747606acd001bb02ab148caa03fc",
            "docstring": "\"\"\"\nA command-line interface (CLI) tool for managing JIRA issues.\n\nThis script provides a set of commands to interact with JIRA, allowing users to create, edit, and manage issues, as\nwell as perform various operations such as assigning users, adding comments, and managing sprints. It integrates with\nAI services to assist with issue creation and management.\n\nKey Features:\n- Create, edit, and delete JIRA issues.\n- Assign and unassign users to/from issues.\n- Add comments and manage issue statuses.\n- Search for issues using JIRA Query Language (JQL).\n- Integrate AI assistance for issue handling and suggestions.\n- Lint issues for quality checks and provide feedback.\n- Manage sprints and track progress.\n\nDependencies:\n- core.env_fetcher: For fetching environment variables.\n- exceptions.exceptions: Custom exceptions for error handling.\n- providers: For obtaining AI provider instances.\n- rest.client: JIRA client for making API requests.\n- rest.prompts: For handling prompt templates used in AI interactions.\n\nUsage:\nRun the script from the command line, providing appropriate subcommands and arguments based on the desired action.\n\"\"\"",
            "last_accessed": 1745613032
        },
        {
            "sha1": "66e1b4ec8c1585550474fd1a39b7edc9c6b55dc9",
            "docstring": "\"\"\"\nA command-line interface (CLI) for interacting with JIRA issues, enabling users to manage issues, perform\nAI-assisted operations, and execute various JIRA-related tasks.\n\nAttributes:\n    jira (JiraClient): An instance of the JiraClient used to interact with the JIRA API.\n    template_dir (Path): The directory path for templates fetched from the environment.\n    ai_provider: The AI provider instance configured based on environment variables.\n    default_prompt: The default prompt for AI interactions.\n    comment_prompt: The prompt used for adding comments to issues.\n    ai_helper_prompt: The prompt used for AI helper functionalities.\n\nMethods:\n    run(): Starts the CLI and handles command-line arguments.\n    _register_subcommands(subparsers): Registers subcommands for issue management and AI assistance.\n    _dispatch_command(args): Dispatches the command based on parsed arguments.\n    ai_helper(args): Executes the AI helper command.\n    open_issue(args): Opens a JIRA issue in the browser.\n    view_issue(args): Displays a JIRA issue in the console.\n    add_comment(args): Adds a comment to a specified JIRA issue.\n    create_issue(args): Creates a new JIRA issue based on provided parameters.\n    list_issues(args): Lists issues assigned to the user with optional filters.\n    change_type(args): Changes the type of a specified JIRA issue.\n    migrate(args): Migrates a specified issue to a new type.\n    edit_issue(args): Edits the description of a specified JIRA issue.\n    unassign(args): Unassigns a user from a specified JIRA issue.\n    assign(args): Assigns a user to a specified JIRA issue.\n    set_priority(args): Sets the priority of a specified JIRA issue.\n    set_story_epic(args): Sets the epic for a specified story issue.\n    remove_sprint(args): Removes a specified issue from its sprint.\n    add_sprint(args): Adds a specified issue to a sprint.\n    set_status(args): Sets the status of a specified JIRA issue.\n    set_acceptance_criteria(args): Sets the acceptance criteria for a specified issue.\n    vote_story_points(args): Votes on story points for a specified issue.\n    set_story_points(args): Sets story points directly for a specified issue.\n    block(args): Marks a specified issue as blocked.\n    unblock(args): Marks a specified issue as unblocked.\n    validate_issue(fields): Validates issue fields using an AI provider.\n    lint(args): Lints a specified issue for quality.\n    lint_all(args): Lints all issues assigned to the user.\n    blocked(args): Lists blocked issues with optional filters.\n    search(args): Searches for issues using JIRA Query Language (JQL).\n    quarterly_connection(args): Performs a quarterly connection report.\n    search_users(args): Searches for users by a specified term.\n    talk(args): Initiates a conversation with JIRA.\n    view_user(args): Displays user information based on account ID.\n    add_flag(args): Adds a flag to a specified issue.\n    remove_flag(args): Removes a flag from a specified issue.\n    list_sprints(args): Lists available sprints.\n    set_summary(args): Sets the summary for a specified issue.\n    clone_issue(args): Clones a specified issue.\n\"\"\"",
            "last_accessed": 1745613051
        },
        {
            "sha1": "0e758a9c1736b655188b750ed06054435a52f77c",
            "docstring": "\"\"\"\nInitialize the argcomplete module for command-line argument completion.\n\nArguments:\n- self: The instance of the class.\n\nExceptions:\nNone\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "a3c0160367c0577cd64e89007ae401b04076ddce",
            "docstring": "\"\"\"\nCreates a new subparser for command-line argument parsing.\n\nArgs:\n    name (str): The name of the subparser.\n    help_text (str): The help text displayed when using the subparser.\n    aliases (list, optional): A list of alternative names for the subparser. Defaults to None.\n\nReturns:\n    argparse.ArgumentParser: The newly created subparser.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "1373a3a05a2f24a3caff08ec6d4e691965f58f97",
            "docstring": "\"\"\"\nChange the type of an issue in Jira using the provided arguments.\n\nArguments:\n- self: The object instance.\n- args (Namespace): A Namespace object containing the arguments needed to change the type of the issue in Jira.\n\nSide Effects:\n- Modifies the type of the specified issue in Jira.\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "1ad9a75f963616b381c4e8a4a6e9f8168ee901c1",
            "docstring": "\"\"\"\nGet the current sprint.\n\nArguments:\n- self: the object instance\n- args (Namespace): Namespace object containing arguments\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613093
        },
        {
            "sha1": "d8f553c39e84d008b8a2d973fb4908788975ff23",
            "docstring": "\"\"\"\nA command-line interface (CLI) tool for managing JIRA issues.\n\nThis script provides a set of commands to interact with JIRA, allowing users to create, edit, and manage issues, as\nwell as perform various operations such as assigning users, adding comments, and managing sprints. It integrates with\nAI services to assist with issue creation and management.\n\nKey Features:\n- Create, edit, and delete JIRA issues.\n- Assign and unassign users to/from issues.\n- Add comments and manage issue statuses.\n- Search for issues using JIRA Query Language (JQL).\n- Integrate AI assistance for issue handling and suggestions.\n- Lint issues for quality checks and provide feedback.\n- Manage sprints and track progress.\n\nDependencies:\n- core.env_fetcher: For fetching environment variables.\n- exceptions.exceptions: Custom exceptions for error handling.\n- providers: For obtaining AI provider instances.\n- rest.client: JIRA client for making API requests.\n- rest.prompts: For handling prompt templates used in AI interactions.\n\nUsage:\nRun the script from the command line, providing appropriate subcommands and arguments based on the desired action.\n\"\"\"",
            "last_accessed": 1745613126
        },
        {
            "sha1": "3481c224bcda45e5733a1e65752e90815992e54c",
            "docstring": "\"\"\"\nA command-line interface (CLI) for interacting with JIRA issues, enabling users to manage issues, perform\nAI-assisted operations, and execute various JIRA-related tasks.\n\nAttributes:\n    jira (JiraClient): An instance of the JiraClient used to interact with the JIRA API.\n    template_dir (Path): The directory path for templates fetched from the environment.\n    ai_provider: The AI provider instance configured based on environment variables.\n    default_prompt: The default prompt for AI interactions.\n    comment_prompt: The prompt used for adding comments to issues.\n    ai_helper_prompt: The prompt used for AI helper functionalities.\n\"\"\"",
            "last_accessed": 1745613128
        },
        {
            "sha1": "d1db48dd19b112849a221d8b62479fd68d0f0d7d",
            "docstring": "\"\"\"\nGet the current sprint.\n\nArguments:\n- self: the object instance\n- args (Namespace): Namespace object containing arguments\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613347
        },
        {
            "sha1": "ea9a6b07452d5d634bb83ed8a16b008ba0674963",
            "docstring": "\"\"\"\nA command-line interface (CLI) tool for managing JIRA issues.\n\nThis script provides a set of commands to interact with JIRA, allowing users to create, edit, and manage issues, as\nwell as perform various operations such as assigning users, adding comments, and managing sprints. It integrates with\nAI services to assist with issue creation and management.\n\nKey Features:\n- Create, edit, and delete JIRA issues.\n- Assign and unassign users to/from issues.\n- Add comments and manage issue statuses.\n- Search for issues using JIRA Query Language (JQL).\n- Integrate AI assistance for issue handling and suggestions.\n- Lint issues for quality checks and provide feedback.\n- Manage sprints and track progress.\n\nDependencies:\n- core.env_fetcher: For fetching environment variables.\n- exceptions.exceptions: Custom exceptions for error handling.\n- providers: For obtaining AI provider instances.\n- rest.client: JIRA client for making API requests.\n- rest.prompts: For handling prompt templates used in AI interactions.\n\nUsage:\nRun the script from the command line, providing appropriate subcommands and arguments based on the desired action.\n\"\"\"",
            "last_accessed": 1745613344
        },
        {
            "sha1": "ec95115e05eae9990ecabb123023e1fb943bdb38",
            "docstring": "\"\"\"\nA command-line interface (CLI) for interacting with JIRA issues, enabling users to manage issues, perform\nAI-assisted operations, and execute various JIRA-related tasks.\n\nAttributes:\njira (JiraClient): An instance of the JiraClient used to interact with the JIRA API.\ntemplate_dir (Path): The directory path for templates fetched from the environment.\nai_provider: The AI provider instance configured based on environment variables.\ndefault_prompt: The default prompt for AI interactions.\ncomment_prompt: The prompt used for adding comments to issues.\nai_helper_prompt: The prompt used for AI helper functionalities.\n\"\"\"",
            "last_accessed": 1745613347
        }
    ],
    "jira_creator/rest/client.py": [
        {
            "sha1": "cadae3933c272e0c136b2588fd2d3a905809b3f6",
            "docstring": "\"\"\"\nThis module provides a `JiraClient` class for interacting with the Jira API, enabling comprehensive management of Jira issues, sprints, and user interactions.\n\nKey Features:\n- CRUD operations on Jira issues, including creation, updates, and comments.\n- Sprint management capabilities and issue assignments.\n- Debugging utilities with cURL command generation for API requests.\n- Caching mechanisms for Jira field metadata to enhance performance.\n- Robust error handling and retry logic for API requests.\n\nDependencies:\n- `requests`: For HTTP communication with the Jira API.\n- `core.env_fetcher`: For environment variable and configuration access.\n- `exceptions.exceptions`: Custom exceptions for error handling.\n- `ops`: Utility functions for various Jira operations.\n\nUsage:\nInstantiate the `JiraClient` class and use its methods to perform operations on Jira. Ensure environment variables are set up for authentication and configuration.\n\"\"\"",
            "last_accessed": 1745613135
        },
        {
            "sha1": "061cb97fb5a553cf772427a113f0817724b44c0e",
            "docstring": "\"\"\"\nA client for interacting with the Jira API, providing methods to manage issues, projects, and various Jira functionalities.\n\nAttributes:\n- jira_url (str): The base URL for the Jira instance.\n- project_key (str): The key of the project to be managed.\n- affects_version (str): The version that the issues affect.\n- component_name (str): The name of the component related to the issues.\n- priority (str): The priority level for the issues.\n- jpat (str): The Jira Personal Access Token for authentication.\n- epic_field (str): The field used for epics in Jira.\n- board_id (str): The ID of the Jira board.\n- fields_cache_path (str): The file path for caching Jira fields.\n- is_speaking (bool): A flag indicating if the client is in speaking mode.\n\nMethods:\n- generate_curl_command(method, url, headers, json_data=None, params=None): Generates a curl command for debugging API requests.\n- cache_fields(): Caches Jira fields for efficient access, checking the cache's age.\n- get_field_name(field_id): Retrieves the name of a Jira field by its ID.\n- build_payload(summary, description, issue_type): Constructs a payload for creating or updating issues.\n- get_acceptance_criteria(issue_key): Retrieves acceptance criteria for a specified issue.\n- set_acceptance_criteria(issue_key, acceptance_criteria): Sets acceptance criteria for a specified issue.\n- get_description(issue_key): Retrieves the description of a specified issue.\n- update_description(issue_key, new_description): Updates the description of a specified issue.\n- create_issue(payload): Creates a new issue in Jira using the provided payload.\n- change_issue_type(issue_key, new_type): Changes the type of a specified issue.\n- migrate_issue(old_key, new_type): Migrates an issue to a new type.\n- add_comment(issue_key, comment): Adds a comment to a specified issue.\n- get_current_user(): Retrieves the current authenticated user.\n- get_user(str): Retrieves a user by their username or ID.\n- get_issue_type(issue_key): Retrieves the type of a specified issue.\n- unassign_issue(issue_key): Unassigns a specified issue.\n- assign_issue(issue_key, assignee): Assigns a specified issue to a user.\n- list_issues(...): Lists issues based on various optional filters.\n- set_priority(issue_key, priority): Sets the priority of a specified issue.\n- set_sprint(issue_key, sprint_id): Assigns a specified issue to a sprint.\n- remove_from_sprint(issue_key): Removes a specified issue from its sprint.\n- add_to_sprint(issue_key, sprint_name): Adds a specified issue to a sprint by its name.\n- set_status(issue_key, target_status): Sets the status of a specified issue.\n- set_story_epic(issue_key, epic_key): Assigns an epic to a specified story.\n- vote_story_points(issue_key, points): Votes on story points for a specified issue.\n- set_story_points(issue_key, points): Sets story points for a specified issue.\n- block_issue(issue_key, reason): Blocks a specified issue with a reason.\n- unblock_issue(issue_key): Unblocks a specified issue.\n- blocked(...): Lists blocked issues based on various optional filters.\n- search_issues(jql): Searches for issues using a JQL query.\n- search_users(str): Searches for users based on a string.\n- view_issue(issue_key): Retrieves details of a specified issue.\n- add_flag(issue_key): Adds a flag to a specified issue.\n- remove_flag(issue_key): Removes a flag from a specified issue.\n- list_sprints(board_id): Lists sprints for a specified board.\n- set_summary(issue_key): Sets the summary of a specified issue.\n- clone_issue(issue_key): Clones a specified issue.\n\"\"\"",
            "last_accessed": 1745613149
        },
        {
            "sha1": "4bedbc9f2b7cc577c537b920ab488ff09e7550dd",
            "docstring": "\"\"\"\nInitialize a JIRA client with environment variables.\n\nArguments:\nNone\n\nSide Effects:\n- Sets instance attributes for JIRA URL, project key, affects version, component name, priority, JPAT,\n  epic field, board ID, and fields cache path using environment variables fetched by EnvFetcher.\n- Sets 'is_speaking' attribute to False.\n\"\"\"",
            "last_accessed": 1745613366
        },
        {
            "sha1": "f0a5304190e88cde4e87488f1a3882005ea5a10d",
            "docstring": "\"\"\"\nGenerate a cURL command string based on the provided HTTP method, URL, headers, JSON data, and parameters.\n\nArguments:\n- method (str): The HTTP method to use in the cURL command (e.g., GET, POST).\n- url (str): The URL to which the cURL command will be directed.\n- headers (Dict[str, str]): A dictionary containing the headers to include in the cURL command.\n- json_data (Optional[Dict[str, Any]]): Optional JSON data to include in the cURL command body.\n- params (Optional[Dict[str, str]]): Optional parameters to include in the cURL command.\n\nSide Effects:\n- Modifies the 'parts' list to build the cURL command string.\n\nNote: This function does not return a value.\n\"\"\"",
            "last_accessed": 1745613366
        },
        {
            "sha1": "165aa960a90c2a8f441028572b07a50e3bb25cb6",
            "docstring": "\"\"\"\nCore request logic. Returns a tuple (status_code, result).\n\nArguments:\n- method (str): The HTTP method to use for the request (e.g., 'GET', 'POST').\n- url (str): The URL to send the request to.\n- headers (Dict[str, str]): A dictionary containing the request headers.\n- json_data (Optional[Dict[str, Any]]): A dictionary containing the JSON payload for the request. Defaults to None.\n- params (Optional[Dict[str, str]]): A dictionary containing the query parameters for the request. Defaults to None.\n\nReturn:\n- tuple: A tuple containing the HTTP status code and the parsed JSON result.\n\nExceptions:\n- No exceptions are explicitly raised in this function.\n\"\"\"",
            "last_accessed": 1745613366
        },
        {
            "sha1": "ff74b59e8e619d6a412e76bb27979a0916a130ca",
            "docstring": "\"\"\"\nHandles retries and delegates the request to _request.\n\nArguments:\n- method (str): The HTTP method to be used for the request (e.g., 'GET', 'POST').\n- path (str): The endpoint path to be appended to the base URL.\n- json_data (Optional[Dict[str, Any]]): A dictionary containing the JSON payload for the request (default is None).\n- params (Optional[Dict[str, str]]): A dictionary containing the query parameters for the request (default is None).\n\nReturn:\n- Optional[Dict[str, Any]]: A dictionary representing the response data from the request. Returns None if there is no response.\n\nSide Effects:\n- Constructs the full URL using the base URL and the provided path.\n- Sets the necessary headers for the request, including Authorization and Content-Type.\n\"\"\"",
            "last_accessed": 1745613366
        },
        {
            "sha1": "06a58199227baefedd96ecc23e650d6d9ce2927f",
            "docstring": "\"\"\"\nCaches field data by checking for an existing cache file and loading its contents if it is less than 24 hours old.\nIf the cache is invalid, it fetches the latest field data from the API and updates the cache file.\n\nArguments:\n- self: The instance of the class, which is expected to have the attribute 'fields_cache_path' that specifies\nthe path to the cache file.\n\nReturn:\n- The cached data loaded from the file as a Python object (e.g., dictionary, list). If the cache file does not\nexist or is older than 24 hours, the function does not return anything.\n\nSide Effects:\n- Creates the cache directory if it does not exist.\n- Writes the fetched field data to the cache file if it has to be updated.\n\"\"\"",
            "last_accessed": 1745613366
        },
        {
            "sha1": "df8774805b04041f0741683b8bea57818b4038ea",
            "docstring": "\"\"\"\nRetrieves the field name corresponding to the given field ID.\n\nArguments:\n- self: The object instance.\n- field_id (int): The ID of the field for which the name is to be retrieved.\n\nReturn:\n- str or None: The name of the field corresponding to the field ID, or None if no matching field is found.\n\nSide Effects:\n- Updates or loads the fields from cache.\n\"\"\"",
            "last_accessed": 1745613169
        },
        {
            "sha1": "1a817655f4437da1cefc6bf12c3d092dafd30bda",
            "docstring": "\"\"\"\nBuilds a payload for creating an issue in a project with the provided summary, description, and issue type.\n\nArguments:\n- summary (str): A brief summary of the issue.\n- description (str): Detailed description of the issue.\n- issue_type (str): Type of the issue.\n\nReturn:\nThe payload for creating an issue with the specified details and additional project-specific information.\n\"\"\"",
            "last_accessed": 1745613367
        },
        {
            "sha1": "c2f651ce95b1fbb8ee50cdda88164515cb6fcc0b",
            "docstring": "\"\"\"\nRetrieves the acceptance criteria for a specific issue identified by the given issue key.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key identifying the specific issue for which acceptance criteria are to be retrieved.\n\nReturn:\n- str: The acceptance criteria for the specified issue.\n\"\"\"",
            "last_accessed": 1745613367
        },
        {
            "sha1": "72929ef8fbb9a88f338da7ff90ea202ed1f0f8e6",
            "docstring": "\"\"\"\nSets the acceptance criteria for a specific issue identified by the given issue key.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The unique key identifying the issue.\n- acceptance_criteria (str): The acceptance criteria to be set for the issue.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613367
        },
        {
            "sha1": "7006d7ee941172048f3e9d3fcb43a0ba4ecc5f84",
            "docstring": "\"\"\"\nRetrieve the description of a specific issue identified by its key.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The unique key of the issue for which the description is requested.\n\nReturn:\n- str: The description of the issue identified by the provided key.\n\"\"\"",
            "last_accessed": 1745613367
        },
        {
            "sha1": "4097a8ac998095daf609bf72c49f2502640cba9a",
            "docstring": "\"\"\"\nUpdates the description of an issue identified by the given issue key.\n\nArgs:\nself: The object instance.\nissue_key (str): The unique key of the issue to update.\nnew_description (str): The new description to set for the issue.\n\nReturns:\nThe result of updating the description for the specified issue.\n\"\"\"",
            "last_accessed": 1745613367
        },
        {
            "sha1": "a3b1278e9662626d445eeb6208aee4f021e6dd29",
            "docstring": "\"\"\"\nCreates an issue using the provided payload.\n\nArguments:\n- self: The object instance.\n- payload: A dictionary containing the information needed to create the issue.\n\nReturn:\n- The result of calling the 'create_issue' function with the request and payload.\n\"\"\"",
            "last_accessed": 1745613367
        },
        {
            "sha1": "eb2eeb17a488056f3b48323655d040db4cee7e59",
            "docstring": "\"\"\"\nChange the type of an issue in Jira.\n\nArguments:\n- self: the object instance\n- issue_key (str): the key of the issue to be modified\n- new_type (str): the new type to assign to the issue\n\nReturn:\n- The result of the change_issue_type function call with the provided parameters.\n\"\"\"",
            "last_accessed": 1745613367
        },
        {
            "sha1": "6c02baeefcaafb005053980ea6c929c6d0fd42c3",
            "docstring": "\"\"\"\nMigrates an issue in Jira from one type to another.\n\nArguments:\n- self: The object instance.\n- old_key (str): The key of the issue to be migrated.\n- new_type (str): The new type to which the issue will be migrated.\n\nReturn:\n- The result of migrating the issue.\n\"\"\"",
            "last_accessed": 1745613367
        },
        {
            "sha1": "a2c855d8866c1c7485f0c60749af047ac562f5e8",
            "docstring": "\"\"\"\nAdds a comment to an issue specified by its key.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key of the issue to add the comment to.\n- comment (str): The content of the comment to be added.\n\nReturn:\n- The result of adding the comment to the specified issue.\n\"\"\"",
            "last_accessed": 1745613367
        },
        {
            "sha1": "79197d2e77bac3bd61ca8d3d63e4e5556a1d4068",
            "docstring": "\"\"\"\nRetrieve the current user based on the request provided.\n\nArguments:\n- self: The instance of the class. (self) represents the instance of the class where this method is called. It is used to access attributes and methods within the class.\n\nReturn:\nThe current user retrieved from the request. The type of the returned value is dependent on the implementation of the 'get_current_user' function.\n\"\"\"",
            "last_accessed": 1745613183
        },
        {
            "sha1": "7261e58e34fc7d9e9dd063b21413b59315cf3bc4",
            "docstring": "\"\"\"\nRetrieve user information based on a provided string.\n\nArguments:\n- self: The object instance.\n- str_user (str): A string used to retrieve user information.\n\nReturn:\n- The user information retrieved based on the provided string.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "50c27df368d82b3e994d005fd62b065d9bcf368f",
            "docstring": "\"\"\"\nRetrieve the type of an issue identified by the given issue key.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The unique key identifying the issue.\n\nReturn:\n- str: The type of the issue identified by the provided key.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "b35e64e3e9367e822cb31d403802c19b86349df6",
            "docstring": "\"\"\"\nUnassign an issue from a user.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key of the issue to be unassigned.\n\nReturn:\n- The result of unassigning the issue.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "8e62c345be4a3db35ad12d71780097e52f3964b0",
            "docstring": "\"\"\"\nAssign an issue to a specific user.\n\nArguments:\n- self: the object instance\n- issue_key (str): the key of the issue to be assigned\n- assignee (str): the username of the user to whom the issue will be assigned\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "4c569486e598ae5258e23402b4a6700248cb6245",
            "docstring": "\"\"\"\nRetrieve a list of issues based on specified filters such as project, component, assignee, status, summary, etc.\n\nArguments:\n- project (str): The project key to filter the issues. If not provided, defaults to the project key of the instance.\n- component (str): The component name to filter the issues. If not provided, defaults to the component name of the instance.\n- assignee (str): The assignee username to filter the issues.\n- status (str): The status of the issues to filter.\n- summary (str): The summary of the issues to filter.\n- issues_blocked (bool): Flag to filter blocked issues.\n- issues_unblocked (bool): Flag to filter unblocked issues.\n- reporter (str): The reporter username to filter the issues.\n\nReturn:\nNone\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "1308e3e8ab6961143b5e12abcbfc5ee03eb57fab",
            "docstring": "\"\"\"\nRetrieve a list of issues based on specified filters such as project, component, assignee, status, summary, etc.\n\nArguments:\n- issue_key (str): The key of the issue to set the priority for.\n- priority (str): The priority to set for the specified issue.\n\nReturn:\nNone\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "211716b42deda947129d77331e137e91a972de03",
            "docstring": "\"\"\"\nSet the sprint for a specific issue identified by its key.\n\nArguments:\n- self: the object instance\n- issue_key (str): the key of the issue to set the sprint for\n- sprint_id (int): the ID of the sprint to set for the issue\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "24ac2b547eb562b6484595f23be6d8aabc9abc20",
            "docstring": "\"\"\"\nRemove an issue from the current sprint.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key identifying the issue to be removed from the sprint.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "ab24ee564f45b2d1aa466619c82f5609ba0e5471",
            "docstring": "\"\"\"\nAdds an issue to a sprint on a board by name.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key of the issue to be added to the sprint.\n- sprint_name (str): The name of the sprint to which the issue will be added.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "5fe201ba540d888178e9a6253316bdf3ca43001d",
            "docstring": "\"\"\"\nSet the status of an issue identified by its key to a target status.\n\nArguments:\n- self: the object instance\n- issue_key (str): the key identifying the issue\n- target_status (str): the status to set the issue to\n\nReturn:\n- None\n\nExceptions:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "386ce69f18fc6286c4ae4ebdd71b1cd7985f4cff",
            "docstring": "\"\"\"\nSets the epic link for a given story in Jira.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key of the story issue to set the epic link for.\n- epic_key (str): The key of the epic to link the story to.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "b67ce5cff832968ffa0ca3576841a72130b7fbf6",
            "docstring": "\"\"\"\nCast a vote for story points on a specific issue.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key of the issue to vote on.\n- points (int): The number of story points to vote for the issue.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "c8903d4ce9430918966f7e03fb93f6f85ce4266c",
            "docstring": "\"\"\"\nSet the story points for a specific issue identified by the given key.\n\nArguments:\n- self: the object instance\n- issue_key (str): the key identifying the specific issue\n- points (int): the number of story points to set for the issue\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "ae6af413d14cfc2c1c0d4770b95acc1d8603622f",
            "docstring": "\"\"\"\nBlocks an issue by providing a reason for blocking.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key identifying the issue to be blocked.\n- reason (str): The reason for blocking the issue.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "f6851f88a1512f9061ca06e71e96be767a531ded",
            "docstring": "\"\"\"\nUnblocks an issue by its key.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key identifying the issue to unblock.\n\nReturn:\n- The result of unblocking the issue.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "9ca9c9248b7934703fe2a4ead4363099f388cc3b",
            "docstring": "\"\"\"\nCalls the 'blocked' function with parameters related to project, component, and assignee.\n\nArguments:\n- project (str): The project name to filter the issues.\n- component (str): The component name to filter the issues.\n- assignee (str): The assignee name to filter the issues.\n\nReturns:\n- The result of the 'blocked' function with the provided parameters.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "694e3ca2edb0506ec1d83ae8981ed6b172175044",
            "docstring": "\"\"\"\nSearch for issues in Jira based on a JQL query.\n\nArguments:\n- self: the object instance\n- jql (str): the JQL query string used to search for issues in Jira\n\nReturn:\n- The result of the search_issues function, which is not specified in the provided code.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "2973307b4734f8f591b013338de53ac8e55635df",
            "docstring": "\"\"\"\nSearch for users based on a given string.\n\nArguments:\n- self: the object instance\n- str_user (str): the string used to search for users\n\nReturn:\n- The result of the search_users method called with the request attribute and the provided string.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "0fbc86e85d1e531a59c819eace6657bd37022597",
            "docstring": "\"\"\"\nView an issue by its key.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key of the issue to view.\n\nReturn:\n- The result of viewing the issue.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "57785b6c6da2f88baf9ea4c50270d6de2fab7755",
            "docstring": "\"\"\"\nAdds a flag to an issue identified by the provided issue key.\n\nArgs:\nself: The object instance.\nissue_key (str): The key identifying the issue to which the flag will be added.\n\nReturns:\nThe result of adding a flag to the specified issue.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "ed7b97b8050a9e7fadd890d8dbd6ccf72f5e717e",
            "docstring": "\"\"\"\nRemove a flag from an issue identified by the given issue key.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The unique key identifying the issue from which the flag will be removed.\n\nReturn:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "f2dc181a898221874d3007452fe9c51edc6fc616",
            "docstring": "\"\"\"\nRetrieve a list of sprints associated with a specific board.\n\nArguments:\n- self: The object instance.\n- board_id (int): The unique identifier of the board for which to fetch the list of sprints.\n\nReturn:\nList: A list of sprints associated with the specified board.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "c20b09c6528a0b83c33aebc051996a70a1e7e886",
            "docstring": "\"\"\"\nSets the summary of an issue identified by the given issue key.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key that identifies the issue for which the summary needs to be set.\n- summary (str): The new summary.\n\nReturns:\n- None\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "c2c156d13f49f4d201231f807816816bafee66dd",
            "docstring": "\"\"\"\nClones an issue in the system identified by the given issue key.\n\nArguments:\n- self: The object instance.\n- issue_key (str): The key identifying the issue to be cloned.\n\nReturn:\n- The result of cloning the issue.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "c25e2900978bee4edbbb252f0399467401f4548c",
            "docstring": "\"\"\"\nGet the sprint based on the request.\n\nArguments:\n- self: The object instance.\n- self.request: The request object.\n\nReturn:\n- The sprint retrieved based on the request.\n\"\"\"",
            "last_accessed": 1745613369
        },
        {
            "sha1": "0e9ad3ac07be11e2af84595ccb6e982a8e6920a7",
            "docstring": "\"\"\"\nThis module provides a `JiraClient` class for interacting with the Jira API, enabling comprehensive management of Jira issues, sprints, and user interactions.\n\nKey Features:\n- CRUD operations on Jira issues, including creation, updates, and comments.\n- Sprint management capabilities and issue assignments.\n- Debugging utilities with cURL command generation for API requests.\n- Caching mechanisms for Jira field metadata to enhance performance.\n- Robust error handling and retry logic for API requests.\n\nDependencies:\n- `requests`: For HTTP communication with the Jira API.\n- `core.env_fetcher`: For environment variable and configuration access.\n- `exceptions.exceptions`: Custom exceptions for error handling.\n- `ops`: Utility functions for various Jira operations.\n\nUsage:\nInstantiate the `JiraClient` class and use its methods to perform operations on Jira. Ensure environment variables are set up for authentication and configuration.\n\"\"\"",
            "last_accessed": 1745613350
        },
        {
            "sha1": "fff71b6d44ea72aabf29806b602cd7dc1e04a825",
            "docstring": "\"\"\"\nA client for interacting with the Jira API, providing methods to manage issues, projects, and various Jira\nfunctionalities.\n\nAttributes:\n- jira_url (str): The base URL for the Jira instance.\n- project_key (str): The key of the project to be managed.\n- affects_version (str): The version that the issues affect.\n- component_name (str): The name of the component related to the issues.\n- priority (str): The priority level for the issues.\n- jpat (str): The Jira Personal Access Token for authentication.\n- epic_field (str): The field used for epics in Jira.\n- board_id (str): The ID of the Jira board.\n- fields_cache_path (str): The file path for caching Jira fields.\n- is_speaking (bool): A flag indicating if the client is in speaking mode.\n\nMethods:\n- generate_curl_command(method, url, headers, json_data=None, params=None): Generates a curl command for debugging\n  API requests.\n- cache_fields(): Caches Jira fields for efficient access, checking the cache's age.\n- get_field_name(field_id): Retrieves the name of a Jira field by its ID.\n- build_payload(summary, description, issue_type): Constructs a payload for creating or updating issues.\n- get_acceptance_criteria(issue_key): Retrieves acceptance criteria for a specified issue.\n- set_acceptance_criteria(issue_key, acceptance_criteria): Sets acceptance criteria for a specified issue.\n- get_description(issue_key): Retrieves the description of a specified issue.\n- update_description(issue_key, new_description): Updates the description of a specified issue.\n- create_issue(payload): Creates a new issue in Jira using the provided payload.\n- change_issue_type(issue_key, new_type): Changes the type of a specified issue.\n- migrate_issue(old_key, new_type): Migrates an issue to a new type.\n- add_comment(issue_key, comment): Adds a comment to a specified issue.\n- get_current_user(): Retrieves the current authenticated user.\n- get_user(str): Retrieves a user by their username or ID.\n- get_issue_type(issue_key): Retrieves the type of a specified issue.\n- unassign_issue(issue_key): Unassigns a specified issue.\n- assign_issue(issue_key, assignee): Assigns a specified issue to a user.\n- list_issues(...): Lists issues based on various optional filters.\n- set_priority(issue_key, priority): Sets the priority of a specified issue.\n- set_sprint(issue_key, sprint_id): Assigns a specified issue to a sprint.\n- remove_from_sprint(issue_key): Removes a specified issue from its sprint.\n- add_to_sprint(issue_key, sprint_name): Adds a specified issue to a sprint by its name.\n- set_status(issue_key, target_status): Sets the status of a specified issue.\n- set_story_epic(issue_key, epic_key): Assigns an epic to a specified story.\n- vote_story_points(issue_key, points): Votes on story points for a specified issue.\n- set_story_points(issue_key, points): Sets story points for a specified issue.\n- block_issue(issue_key, reason): Blocks a specified issue with a reason.\n- unblock_issue(issue_key): Unblocks a specified issue.\n- blocked(...): Lists blocked issues based on various optional filters.\n- search_issues(jql): Searches for issues using a JQL query.\n- search_users(str): Searches for users based on a string.\n- view_issue(issue_key): Retrieves details of a specified issue.\n- add_flag(issue_key): Adds a flag to a specified issue.\n- remove_flag(issue_key): Removes a flag from a specified issue.\n- list_sprints(board_id): Lists sprints for a specified board.\n- set_summary(issue_key): Sets the summary of a specified issue.\n- clone_issue(issue_key): Clones a specified issue.\n\"\"\"",
            "last_accessed": 1745613366
        },
        {
            "sha1": "9cbb11e956827f26de917c1220547986680af4e4",
            "docstring": "\"\"\"\nRetrieves the field name corresponding to the given field ID.\n\nArguments:\n- self: The object instance.\n- field_id (int): The ID of the field for which the name is to be retrieved.\n\nReturn:\n- str or None: The name of the field corresponding to the field ID, or None if no matching field is found.\n\nSide Effects:\n- Updates or loads the fields from cache.\n\"\"\"",
            "last_accessed": 1745613367
        },
        {
            "sha1": "7bfe6f7a855f8b47aebf492e0be72a0c612fd9e9",
            "docstring": "\"\"\"\nRetrieve the current user based on the request provided.\n\nArguments:\n- self: The instance of the class. (self) represents the instance of the class where this method is called. It\n  is used to access attributes and methods within the class.\n\nReturn:\nThe current user retrieved from the request. The type of the returned value is dependent on the implementation\nof the 'get_current_user' function.\n\"\"\"",
            "last_accessed": 1745613369
        }
    ],
    "jira_creator/rest/prompts.py": [
        {
            "sha1": "11a3be9b019ce61e5db97fd2947ea52bf24d3f10",
            "docstring": "\"\"\"\nThis module provides functionality for managing different issue types in a project management context. It defines an\nenumeration for various issue types such as BUG, EPIC, SPIKE, STORY, TASK, COMMENT, DEFAULT, QC, and AIHELPER. The\nmodule also includes the PromptLibrary class, which offers methods to read template files and generate prompts based\non the specified issue type.\n\nClasses:\n- IssueType: An enumeration that defines the various types of issues that can be encountered in project management.\n- PromptLibrary: A class that provides methods to read template files and generate prompts based on issue types.\n\nFunctions:\n- get_file_contents(full_name): Reads and returns the contents of a specified template file.\n- get_prompt(issue_type: IssueType) -> str: Generates a prompt message based on the provided issue type.\n\"\"\"",
            "last_accessed": 1745613226
        },
        {
            "sha1": "30ed65fc6db0aa24e840a6d548f74321d4c9a019",
            "docstring": "\"\"\"\nThis class defines different types of issues that can be used in a project management system.\n\nAttributes:\n- BUG (str): Represents a bug type issue.\n- EPIC (str): Represents an epic type issue.\n- SPIKE (str): Represents a spike type issue.\n- STORY (str): Represents a story type issue.\n- TASK (str): Represents a task type issue.\n- COMMENT (str): Represents a comment type issue.\n- DEFAULT (str): Represents a default type issue.\n- QC (str): Represents a QC type issue.\n- AIHELPER (str): Represents an AI helper type issue.\n- TEMPLATE_DIR (str): The directory path for templates used by the project management system.\n\"\"\"",
            "last_accessed": 1745613372
        },
        {
            "sha1": "7dc54632904d4c8884af5a6e2bd99e7372c61ec9",
            "docstring": "\"\"\"\nThis class provides methods to retrieve prompt contents from template files based on different issue types.\n\nAttributes:\n- No attributes are defined in the class, but the class relies on the following constants and types:\n- TEMPLATE_DIR: Constant representing the directory where template files are stored.\n- IssueType: Enum representing different types of issues.\n\nMethods:\n- get_file_contents(full_name): Static method that reads and returns the contents of a template file specified by\n'full_name'.\n- get_prompt(issue_type: IssueType) -> str: Static method that generates a prompt message based on the provided\n'issue_type'. It combines content from multiple template files depending on the issue type and returns the final\nprompt message as a string.\n\"\"\"",
            "last_accessed": 1745613372
        },
        {
            "sha1": "9f7b4760fdaf243e88a25b1201228b2d8b04c3e0",
            "docstring": "\"\"\"\nRetrieve the contents of a file specified by its full name.\n\nArguments:\n- full_name (str): The full name of the file to retrieve its contents.\n\nSide Effects:\n- Reads the contents of the file specified by 'full_name' and stores it in the 'template' variable.\n\"\"\"",
            "last_accessed": 1745613372
        },
        {
            "sha1": "5891b859d7e4b9b25bc3810a426fb9ecfe05aeca",
            "docstring": "\"\"\"\nReturn a prompt message based on the provided issue type.\n\nArguments:\n- issue_type (IssueType): An enum representing the type of the issue.\n\nReturn:\n- str: A prompt message based on the issue type.\n\"\"\"",
            "last_accessed": 1745613372
        },
        {
            "sha1": "f6e7dfa8ce89c282c8636eb2a912a0a65ebd6f1b",
            "docstring": "\"\"\"\nThis module provides functionality for managing different issue types in a project management context. It defines an\nenumeration for various issue types such as BUG, EPIC, SPIKE, STORY, TASK, COMMENT, DEFAULT, QC, and AIHELPER. The\nmodule also includes the PromptLibrary class, which offers methods to read template files and generate prompts based\non the specified issue type.\n\nClasses:\n- IssueType: An enumeration that defines the various types of issues that can be encountered in project management.\n- PromptLibrary: A class that provides methods to read template files and generate prompts based on issue types.\n\nFunctions:\n- get_file_contents(full_name): Reads and returns the contents of a specified template file.\n- get_prompt(issue_type: IssueType) -> str: Generates a prompt message based on the provided issue type.\n\"\"\"",
            "last_accessed": 1745613372
        }
    ],
    "jira_creator/rest/ops/get_sprint.py": [
        {
            "sha1": "b0fc00d0ef3c5ac50b5976279e11bbeda16643e6",
            "docstring": "\"\"\"\nA function to retrieve the active sprint using a provided request function.\n\n:param request_fn: A function used to make HTTP requests.\n:return: A dictionary containing the active sprint information.\n\"\"\"",
            "last_accessed": 1745613423
        },
        {
            "sha1": "63d51fe789008eab0d6703a8259fb4571e795cdf",
            "docstring": "\"\"\"\nRetrieve the active sprint information for a specified JIRA board.\n\nArguments:\n- request_fn (function): A function used to make HTTP requests.\n\nReturn:\n- dict: A dictionary containing information about the active sprint.\n\nSide Effects:\n- Makes an HTTP GET request using the provided request function.\n\"\"\"",
            "last_accessed": 1745613423
        }
    ],
    "jira_creator/commands/cli_get_sprint.py": [
        {
            "sha1": "9a885bb6924aa6c994e9fb7704103f0c2e12e58b",
            "docstring": "\"\"\"\nThis module contains a function to retrieve sprint data from JIRA.\n\nThe cli_get_sprint function takes two arguments:\n- jira: An object representing the JIRA instance.\n- _: A placeholder for additional arguments (not used in this function).\n\nIt calls the get_sprint method on the jira object to fetch sprint data, prints \"success\" to the console, and returns\nthe response obtained from JIRA.\n\"\"\"",
            "last_accessed": 1745613441
        },
        {
            "sha1": "4acc76e06a8c968415b47c0d3d661a1996977872",
            "docstring": "\"\"\"\nRetrieve and print the name of the first sprint using Jira API.\n\nArguments:\n- jira: An object representing the Jira API connection.\n- _: A placeholder parameter (not used in the function).\n\nReturn:\n- The response object containing information about the sprint retrieved from Jira.\n\nSide Effects:\n- Prints the name of the first sprint to the console.\n\"\"\"",
            "last_accessed": 1745613441
        }
    ]
}