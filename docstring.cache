{
    "/tmp/helper_docstring.py": [],
    "jira_creator/commands/cli_set_story_epic.py": [],
    "jira_creator/commands/cli_list_issues.py": [],
    "jira_creator/commands/cli_set_acceptance_criteria.py": [],
    "jira_creator/commands/cli_list_sprints.py": [],
    "jira_creator/commands/cli_view_user.py": [],
    "jira_creator/commands/cli_add_comment.py": [],
    "jira_creator/commands/cli_ai_helper.py": [],
    "jira_creator/commands/cli_block.py": [],
    "jira_creator/commands/cli_set_status.py": [],
    "jira_creator/commands/cli_unblock.py": [],
    "jira_creator/commands/cli_talk.py": [],
    "jira_creator/commands/_try_cleanup.py": [],
    "jira_creator/commands/cli_validate_issue.py": [],
    "jira_creator/commands/cli_set_summary.py": [],
    "jira_creator/commands/cli_create_issue.py": [],
    "jira_creator/commands/cli_search.py": [],
    "jira_creator/commands/cli_change_type.py": [],
    "jira_creator/commands/cli_set_story_points.py": [],
    "jira_creator/commands/cli_set_priority.py": [],
    "jira_creator/commands/cli_add_sprint.py": [],
    "jira_creator/commands/cli_search_users.py": [],
    "jira_creator/commands/cli_edit_issue.py": [],
    "jira_creator/commands/cli_remove_sprint.py": [],
    "jira_creator/commands/cli_view_issue.py": [],
    "jira_creator/commands/cli_open_issue.py": [],
    "jira_creator/commands/cli_add_flag.py": [],
    "jira_creator/commands/cli_unassign.py": [],
    "jira_creator/commands/cli_blocked.py": [],
    "jira_creator/commands/cli_remove_flag.py": [],
    "jira_creator/commands/__init__.py": [],
    "jira_creator/commands/cli_quarterly_connection.py": [],
    "jira_creator/commands/cli_vote_story_points.py": [],
    "jira_creator/commands/cli_assign.py": [],
    "jira_creator/commands/cli_lint.py": [],
    "jira_creator/commands/cli_clone_issue.py": [],
    "jira_creator/commands/cli_lint_all.py": [],
    "jira_creator/commands/cli_migrate.py": [],
    "jira_creator/rest/ops/set_priority.py": [],
    "jira_creator/rest/ops/set_summary.py": [],
    "jira_creator/rest/ops/set_status.py": [],
    "jira_creator/rest/ops/add_to_sprint_by_name.py": [],
    "jira_creator/rest/ops/assign_issue.py": [],
    "jira_creator/rest/ops/unblock_issue.py": [],
    "jira_creator/rest/ops/blocked.py": [],
    "jira_creator/rest/ops/set_story_points.py": [],
    "jira_creator/rest/ops/view_issue.py": [],
    "jira_creator/rest/ops/update_description.py": [],
    "jira_creator/rest/ops/build_payload.py": [],
    "jira_creator/rest/ops/block_issue.py": [],
    "jira_creator/rest/ops/get_acceptance_criteria.py": [],
    "jira_creator/rest/ops/get_issue_type.py": [],
    "jira_creator/rest/ops/remove_flag.py": [],
    "jira_creator/rest/ops/add_flag.py": [],
    "jira_creator/rest/ops/search_issues.py": [],
    "jira_creator/rest/ops/vote_story_points.py": [],
    "jira_creator/rest/ops/set_story_epic.py": [],
    "jira_creator/rest/ops/get_current_user.py": [],
    "jira_creator/rest/ops/change_issue_type.py": [],
    "jira_creator/rest/ops/set_acceptance_criteria.py": [],
    "jira_creator/rest/ops/get_description.py": [],
    "jira_creator/rest/ops/create_issue.py": [],
    "jira_creator/rest/ops/migrate_issue.py": [],
    "jira_creator/rest/ops/add_comment.py": [],
    "jira_creator/rest/ops/unassign_issue.py": [],
    "jira_creator/rest/ops/get_user.py": [],
    "jira_creator/rest/ops/__init__.py": [],
    "jira_creator/rest/ops/list_sprints.py": [],
    "jira_creator/rest/ops/search_users.py": [],
    "jira_creator/rest/ops/set_sprint.py": [],
    "jira_creator/rest/ops/list_issues.py": [],
    "jira_creator/rest/ops/remove_from_sprint.py": [],
    "jira_creator/rest/ops/clone_issue.py": [],
    "jira_creator/rest/client.py": [],
    "jira_creator/rest/prompts.py": [],
    "jira_creator/providers/openai_provider.py": [],
    "jira_creator/providers/instructlab_provider.py": [],
    "jira_creator/providers/bart_provider.py": [],
    "jira_creator/providers/deepseek_provider.py": [],
    "jira_creator/providers/noop_provider.py": [],
    "jira_creator/providers/__init__.py": [],
    "jira_creator/providers/gpt4all_provider.py": [],
    "jira_creator/core/env_fetcher.py": [],
    "jira_creator/exceptions/exceptions.py": [],
    "jira_creator/templates/template_loader.py": [],
    "jira_creator/rh_jira.py": [],
    "jira_creator/tests/test_main_guard_cli.py": [],
    "jira_creator/tests/conftest.py": [],
    "jira_creator/tests/test_conftest.py": [],
    "jira_creator/tests/rest/test_client.py": [],
    "jira_creator/tests/rest/test_prompt_library.py": [],
    "jira_creator/tests/rest/test_get_field_names_client.py": [],
    "jira_creator/tests/rest/ops/test_clone_issue.py": [],
    "jira_creator/tests/rest/ops/test_status_transition_not_found_rest.py": [],
    "jira_creator/tests/rest/ops/test_search_rest.py": [],
    "jira_creator/tests/rest/ops/test_remove_flag.py": [],
    "jira_creator/tests/rest/ops/test_set_acceptance_criteria_rest.py": [],
    "jira_creator/tests/rest/ops/test_priority_rest.py": [],
    "jira_creator/tests/rest/ops/test_set_summary.py": [],
    "jira_creator/tests/rest/ops/test_get_update_description_rest.py": [],
    "jira_creator/tests/rest/ops/test_core_rest.py": [],
    "jira_creator/tests/rest/ops/test_add_sprint_rest.py": [],
    "jira_creator/tests/rest/ops/test_vote_story_points_rest.py": [],
    "jira_creator/tests/rest/ops/test_set_story_epic_rest.py": [],
    "jira_creator/tests/rest/ops/test_set_acceptance_criteria_cli_rest.py": [],
    "jira_creator/tests/rest/ops/test_list_issues_defaults_rest.py": [],
    "jira_creator/tests/rest/ops/test_migrate_no_transitions_rest.py": [],
    "jira_creator/tests/rest/ops/test_epic_payload_field_rest.py": [],
    "jira_creator/tests/rest/ops/test_unassign_issue_failure_rest.py": [],
    "jira_creator/tests/rest/ops/test_lint_issue_rest.py": [],
    "jira_creator/tests/rest/ops/test_sprint_rest.py": [],
    "jira_creator/tests/rest/ops/test_search_users.py": [],
    "jira_creator/tests/rest/ops/test_status_rest.py": [],
    "jira_creator/tests/rest/ops/test_add_flag.py": [],
    "jira_creator/tests/rest/ops/test_list_issues_rest.py": [],
    "jira_creator/tests/rest/ops/test_change_issue_type_rest.py": [],
    "jira_creator/tests/rest/ops/test_remove_from_sprint_exception_rest.py": [],
    "jira_creator/tests/rest/ops/test_set_story_points_and_clear_rest.py": [],
    "jira_creator/tests/rest/ops/test_get_user.py": [],
    "jira_creator/tests/rest/ops/test_get_acceptance_criteria_rest.py": [],
    "jira_creator/tests/rest/ops/test_assign_issue_rest.py": [],
    "jira_creator/tests/rest/ops/test_view_issue_rest.py": [],
    "jira_creator/tests/rest/ops/test_build_payload_rest.py": [],
    "jira_creator/tests/rest/ops/test_set_status_rest.py": [],
    "jira_creator/tests/rest/ops/test_get_blocked_issues_rest.py": [],
    "jira_creator/tests/rest/ops/test_add_to_sprint_board_check_rest.py": [],
    "jira_creator/tests/rest/ops/test_transition_fallback_rest.py": [],
    "jira_creator/tests/rest/ops/test_error_handling_change_type_rest.py": [],
    "jira_creator/tests/rest/ops/test_get_current_user_rest.py": [],
    "jira_creator/tests/rest/ops/test_list_sprints.py": [],
    "jira_creator/tests/rest/ops/test_add_comment_rest.py": [],
    "jira_creator/tests/rest/ops/test_unblock_issue_rest.py": [],
    "jira_creator/tests/rest/ops/test_create_issue_rest.py": [],
    "jira_creator/tests/rest/ops/test_block_issue_rest.py": [],
    "jira_creator/tests/rest/ops/test_get_issue_type_rest.py": [],
    "jira_creator/tests/rest/ops/test_unassign_issue_success_rest.py": [],
    "jira_creator/tests/core/test_env_fetcher.py": [],
    "jira_creator/tests/commands/test_block_cli.py": [],
    "jira_creator/tests/commands/test_vote_points_cli.py": [],
    "jira_creator/tests/commands/test_add_flag_cli.py": [],
    "jira_creator/tests/commands/test_talk_cli.py": [],
    "jira_creator/tests/commands/test_list_issues_empty_and_exception_cli.py": [],
    "jira_creator/tests/commands/test_lint_cli.py": [],
    "jira_creator/tests/commands/test_create_dry_run_cli.py": [],
    "jira_creator/tests/commands/test_change_type_prints_cli.py": [],
    "jira_creator/tests/commands/test_search_with_options_cli.py": [],
    "jira_creator/tests/commands/test_set_priority_cli.py": [],
    "jira_creator/tests/commands/test_open_issue_cli.py": [],
    "jira_creator/tests/commands/test_add_comment_blank_cli.py": [],
    "jira_creator/tests/commands/test_vote_points_invalid_cli.py": [],
    "jira_creator/tests/commands/test_edit_issue_cli.py": [],
    "jira_creator/tests/commands/test_add_comment_ai_fail_cli.py": [],
    "jira_creator/tests/commands/test_migrate_to_exception_cli.py": [],
    "jira_creator/tests/commands/test_assign_issue_and_failure_cli.py": [],
    "jira_creator/tests/commands/test_dispatch_cli.py": [],
    "jira_creator/tests/commands/test_view_user_cli.py": [],
    "jira_creator/tests/commands/test_run_cli.py": [],
    "jira_creator/tests/commands/test_lint_all_cli.py": [],
    "jira_creator/tests/commands/test_change_type_with_exception_cli.py": [],
    "jira_creator/tests/commands/test_search_users_cli.py": [],
    "jira_creator/tests/commands/test_add_comment_exception_cli.py": [
        {
            "sha1": "3704cddd0fc622bf2e5f9ebffed1a8ef8ebd9365",
            "docstring": "\"\"\"\nMocks the add_comment method of a Jira CLI object to raise an AddCommentError exception for testing purposes.\n\nArguments:\n- cli: Jira CLI object to be tested.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nExceptions:\n- AddCommentError: Raised when the add_comment method encounters an error.\n\n\"\"\"",
            "last_accessed": 1745437133
        }
    ],
    "jira_creator/tests/commands/test_set_story_points_cli.py": [
        {
            "sha1": "696ed86d67abfc0d1a3b8ce5fc9754735e4f6f25",
            "docstring": "\"\"\"\nThis file contains unit tests for the 'set_story_points' function in the 'cli' module.\nIt includes tests for successful setting of story points, failure cases, and handling of invalid input values.\nThe tests use MagicMock for mocking and pytest for assertions. The 'SetStoryPointsError' exception is tested for failure cases.\n\"\"\"",
            "last_accessed": 1745437134
        },
        {
            "sha1": "1d3f3fa4a9cd5a0dc42f68bb5c0bd1d0465187e2",
            "docstring": "\"\"\"\nSet story points for a Jira issue using the CLI.\n\nArguments:\n- cli: An object representing the CLI interface.\n\nSide Effects:\n- Modifies the 'jira' attribute of the 'cli' object by setting the 'set_story_points' attribute to a MagicMock object.\n\"\"\"",
            "last_accessed": 1745437135
        },
        {
            "sha1": "86a42c62f3be1458f638b503fc836ae13f2f0f1c",
            "docstring": "\"\"\"\nSet the story points for a test case and handle failure scenarios.\n\nArguments:\n- cli (CommandLineInterface): An instance of the CommandLineInterface class used for interacting with the command line.\n- capsys (CaptureFixture): Pytest fixture for capturing stdout and stderr output.\n\nExceptions:\n- No explicit exceptions are raised within this function.\n\nSide Effects:\n- This function interacts with the command line interface (cli) to set story points for a test case.\n- It may output information to stdout or stderr using the capsys fixture.\n\nNote: This function likely handles the scenario where setting story points for a test case fails.\n\"\"\"",
            "last_accessed": 1745437138
        },
        {
            "sha1": "8bcf7032aa0e2ea1cf56e94d4f78cbeb56fb2e95",
            "docstring": "\"\"\"\nSet the story points for a specific issue identified by the provided issue key.\n\nArguments:\n- issue_key (str): A string representing the unique key of the issue.\n- points (int): An integer indicating the story points to be set for the issue.\n\nExceptions:\n- SetStoryPointsError: Raised when there is a failure in setting the story points for the issue.\n\nSide Effects:\nRaises a SetStoryPointsError exception with a message indicating a fake failure.\n\"\"\"",
            "last_accessed": 1745437140
        },
        {
            "sha1": "df3c107d6111a23fe12d5cd3b9b607342ff1c63e",
            "docstring": "\"\"\"\nSet story points for an issue identified by the given key.\n\nArguments:\n- cli: An instance of the command-line interface.\n- capsys: An object capturing stdout and stderr outputs.\n\nExceptions:\n- ValueError: Raised when the points parameter is not a valid integer.\n\nSide Effects:\nNone\n\"\"\"",
            "last_accessed": 1745437142
        }
    ],
    "jira_creator/tests/commands/test_create_file_not_found_cli.py": [
        {
            "sha1": "9419e8f60dce90f80074b0a014bee9696a860644",
            "docstring": "\"\"\"\nThis module contains test cases for the CLI command responsible for creating issues in a project management system (e.g., JIRA). \n\nIt utilizes the pytest framework to define multiple tests that verify the behavior of the `create_issue` function under various scenarios, including:\n- Handling of `FileNotFoundError` when template files are missing.\n- Proper exception handling when the AI service fails.\n- Successful issue creation with appropriate output verification.\n\nEach test case mocks necessary components to isolate the functionality being tested, ensuring that the tests are reliable and do not depend on external systems or files.\n\"\"\"",
            "last_accessed": 1745437145
        },
        {
            "sha1": "654fdaf6dc88630df04b9f6d56853c4b14ae78fe",
            "docstring": "\"\"\"\nMock the TemplateLoader to raise FileNotFoundError when trying to load a template file.\nThis function is used for testing purposes and takes a 'cli' parameter representing the command-line interface.\n\"\"\"",
            "last_accessed": 1745437146
        },
        {
            "sha1": "aa35139e13e23390f53ff204ce75011913c27cc5",
            "docstring": "\"\"\"\nSet the template directory path for the CLI to a non-existent directory.\n\nArguments:\n- cli (object): An instance of the CLI class.\n- capsys (object): Pytest fixture for capturing stdout and stderr outputs.\n\nSide Effects:\n- Modifies the template directory path of the CLI instance.\n\"\"\"",
            "last_accessed": 1745437148
        },
        {
            "sha1": "4fd0b6f80b8b88a8b975fb996fa7d38bef43d6ca",
            "docstring": "\"\"\"\nHandles exception raised when calling the AI service to improve text.\n\nArguments:\n- cli: An object representing the CLI application.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- AiError: Raised when the AI service fails to improve the text.\n\nSide Effects:\n- Modifies the behavior of the AI provider by setting the side effect of raising an AiError when improve_text is called.\n\"\"\"",
            "last_accessed": 1745437151
        },
        {
            "sha1": "176c1949a39904d1afe703e4e8420c90a477dfb1",
            "docstring": "\"\"\"\nThis function is a test function for the 'cli_create_issue' command. It mocks the behavior of the TemplateLoader class by using MagicMock and Patch to simulate the loading of a template with specific fields and a rendered description. It is used to test the functionality of creating an issue via the CLI.\n\nArguments:\n- cli: An object representing the CLI interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs during testing.\n\nSide Effects:\n- Modifies the behavior of the TemplateLoader class using MagicMock and Patch to simulate specific template loading and rendering.\n\n\"\"\"",
            "last_accessed": 1745437153
        }
    ],
    "jira_creator/tests/commands/test_set_priority_input_cli_check_love.py": [
        {
            "sha1": "6fb53244f93d330f6900686b8cb3a11eaeecbdc0",
            "docstring": "\"\"\"\nThis script defines a test function 'test_set_priority_love_input' that tests the 'set_priority' method of a CLI class. The test creates a MagicMock object and a custom Args class with issue key and priority attributes. It then captures the output of the method using StringIO and sys.stdout redirection. Finally, it asserts that the output contains a specific message confirming the priority setting. \n\"\"\"",
            "last_accessed": 1745437155
        },
        {
            "sha1": "6844a8f1434e2999a65bf2ef87bf1b74b532ce33",
            "docstring": "\"\"\"\nSet the Jira priority for the 'love' input in the CLI.\n\nArguments:\n- cli: An instance of the CLI object.\n\nSide Effects:\n- Modifies the 'jira' attribute of the CLI object by assigning a MagicMock object to it.\n\"\"\"",
            "last_accessed": 1745437156
        }
    ],
    "jira_creator/tests/commands/test_remove_sprint_exception_cli.py": [
        {
            "sha1": "392c7a6df495b3d1ec73a990804f16b813f81d00",
            "docstring": "\"\"\"\nThis file contains a unit test for the remove_sprint method. It mocks the remove_from_sprint method to raise a RemoveFromSprintError exception and tests the behavior of the remove_sprint method when this exception is raised. The test asserts that the error message \"\u274c Failed to remove sprint\" is displayed when the exception occurs.\n\"\"\"",
            "last_accessed": 1745437158
        },
        {
            "sha1": "d37e78422f8163ce1a1014d8820e5bafa6841bdb",
            "docstring": "\"\"\"\nMock the remove_from_sprint method to raise an exception during testing.\n\nArguments:\n- cli (object): The CLI object used for testing.\n- capsys (object): The pytest built-in fixture capsys for capturing stdout and stderr.\n\nExceptions:\n- RemoveFromSprintError: An exception raised when attempting to remove an issue from a sprint.\n\"\"\"",
            "last_accessed": 1745437160
        }
    ],
    "jira_creator/tests/commands/test_script_dry_run_cli.py": [
        {
            "sha1": "59ca35c918ae2984c5a3c25092d68f8a9c3f32fc",
            "docstring": "\"\"\"\nThis script contains a test function to perform a dry run of a JIRA creation script. It sets up the environment variables, creates a temporary template file, and mocks the subprocess.run function to avoid actual execution of the script. The script is then called with specific arguments to simulate a dry run, and the call is checked using a mock assertion.\n\"\"\"",
            "last_accessed": 1745437162
        },
        {
            "sha1": "027e0a5a42751fc2d4b7829992adc5a65b912da8",
            "docstring": "\"\"\"\nRun a test script in dry-run mode with predefined environment variables.\n\nArguments:\n    No arguments.\n\nSide Effects:\n    - Sets up a test environment with predefined environment variables for a dry-run test script.\n\n\"\"\"",
            "last_accessed": 1745437163
        }
    ],
    "jira_creator/tests/commands/test_set_status_print_cli.py": [
        {
            "sha1": "4a168864563c312b385de63faab2657b64efff4a",
            "docstring": "\"\"\"\nThis script contains a test case for the set_status method in a CLI application.\nIt mocks the set_status method using MagicMock and then calls the set_status method with specific arguments.\nFinally, it asserts that the set_status method was called with the correct arguments.\n\"\"\"",
            "last_accessed": 1745437164
        },
        {
            "sha1": "1c566c8abe7aebfd6aaf4585f0d98f485cf37574",
            "docstring": "\"\"\"\nMock the set_status method for a given CLI object.\n\nArguments:\n- cli (object): The CLI object for which the set_status method is being mocked.\n\nSide Effects:\n- Modifies the set_status method of the jira attribute in the provided CLI object.\n\"\"\"",
            "last_accessed": 1745437166
        }
    ],
    "jira_creator/tests/commands/test_add_and_remove_sprint_cli.py": [
        {
            "sha1": "1dc6b3dcd0080168317713fc00216fdbca022b27",
            "docstring": "\"\"\"\nThis script defines unit tests for the 'add_sprint' and 'remove_sprint' functions in the 'cli' module. \nThe tests use MagicMock to mock certain functionalities. \nEach test creates an 'Args' class instance with specific attributes and then calls the corresponding function in the 'cli' module. \nThe tests verify that the expected functions from the 'cli.jira' object are called once. \n\"\"\"",
            "last_accessed": 1745437168
        },
        {
            "sha1": "b5d2c1451e005527b4ae609f1e8546aefa72072b",
            "docstring": "\"\"\"\nAdds a sprint to a Jira board using the provided CLI.\n\nArguments:\n- cli (object): An instance of the CLI object used to interact with Jira.\n\nSide Effects:\n- Modifies the 'add_to_sprint_by_name' attribute of the 'cli.jira' object by replacing it with a MagicMock object.\n\"\"\"",
            "last_accessed": 1745437171
        },
        {
            "sha1": "f60744a2c6f6a98d40ef920e2938d8171d69a181",
            "docstring": "\"\"\"\nRemove a JIRA issue from the current sprint.\n\nArguments:\n- cli: An object representing the command-line interface.\n\nSide Effects:\n- Modifies the 'remove_from_sprint' attribute of the 'jira' object in the 'cli' object.\n\"\"\"",
            "last_accessed": 1745437173
        }
    ],
    "jira_creator/tests/commands/test_blocked_cli.py": [
        {
            "sha1": "14d8fa9e8763d1962314652eaeac86bb5d199bad",
            "docstring": "\"\"\"\nThis module contains test cases for the 'blocked' function in the CLI class.\n\nThe test cases include:\n- test_blocked_issues_found: Tests the scenario where blocked issues are found.\n- test_blocked_no_issues: Tests the scenario where no blocked issues are found.\n- test_blocked_none_blocked: Tests the scenario where there are no blocked issues.\n- test_blocked_exception: Tests the scenario where an exception is raised while listing blocked issues.\n\"\"\"",
            "last_accessed": 1745437174
        },
        {
            "sha1": "755be3fb9b8b5f9d584a622467ad562c41bc0a66",
            "docstring": "\"\"\"\nA class to store information about project arguments.\n\nAttributes:\n    project (str): The name of the project.\n    component (str): The component related to the project.\n    user (str): The user associated with the project.\n\"\"\"",
            "last_accessed": 1745437176
        },
        {
            "sha1": "e71b672a76fd3d4ad9906bff23cc11a0f60d0ca0",
            "docstring": "\"\"\"\nSet up a mock Jira instance for testing purposes.\n\nArguments:\n- cli: Command Line Interface object.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nSide Effects:\n- Initializes a MagicMock Jira instance on the cli object for testing.\n\"\"\"",
            "last_accessed": 1745437178
        },
        {
            "sha1": "d95ba9b30113a8e28e6bd30ef2f4d9752c103f30",
            "docstring": "\"\"\"\nSummary:\nSimulates a test scenario where no issues are blocked, using a provided CLI object and capsys for capturing system output.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface) with a 'jira' attribute.\n- capsys: A pytest fixture for capturing stdout and stderr output during the test.\n\nSide Effects:\n- Modifies the 'jira' attribute of the provided 'cli' object by setting it to a MagicMock.\n- Configures the 'list_issues' method of the 'jira' attribute to return an empty list ([]).\n\"\"\"",
            "last_accessed": 1745437182
        },
        {
            "sha1": "6c49e5d3b644029fe486e47443580f4542152c31",
            "docstring": "\"\"\"\nCheck if there are any blocked issues in JIRA.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture for capturing stdout and stderr output.\n\nReturn: N/A\n\"\"\"",
            "last_accessed": 1745437184
        },
        {
            "sha1": "e7398dc321c24ee1e141a509b4cce7b166905172",
            "docstring": "\"\"\"\nSimulate a test scenario where a ListBlockedError exception is raised when calling the list_issues method on a Jira client object.\n\nArguments:\n- cli: An object representing a Jira client.\n- capsys: A fixture for capturing stdout and stderr output during testing.\n\nExceptions:\n- ListBlockedError: Raised when an issue is blocked, with an error message indicating the blockage.\n\nSide Effects:\n- Modifies the behavior of the list_issues method of the Jira client object to raise a ListBlockedError.\n\nNote: This function is typically used in testing to handle and test scenarios where specific exceptions are raised.\n\"\"\"",
            "last_accessed": 1745437186
        }
    ],
    "jira_creator/tests/commands/test_try_cleanup_exception_cli.py": [
        {
            "sha1": "1036e70ae29fdabcda72d429c5c5e745ad4b95be",
            "docstring": "\"\"\"\nSimulates an error scenario by mocking the AI provider's improve_text method.\n\nArguments:\n- cli: An instance of the CLI class.\n\nExceptions:\n- AiError: Raised when the improve_text method of the AI provider encounters an error.\n\"\"\"",
            "last_accessed": 1745437188
        }
    ],
    "jira_creator/tests/commands/test_migrate_success_print_cli.py": [
        {
            "sha1": "9cbf274b36f856573bc21025c35e0f8a0f4bdc0a",
            "docstring": "\"\"\"\nThis script contains a unit test for the 'migrate' method in a CLI application. It mocks the 'migrate_issue' method and 'jira_url' attribute of a 'cli' object using MagicMock. It also creates a mock 'Args' class with 'issue_key' and 'new_type' attributes. The 'migrate' method is then called with an instance of the 'Args' class for testing purposes.\n\"\"\"",
            "last_accessed": 1745437190
        },
        {
            "sha1": "354e2d6bc8f35ce851e367fd35ca797da62fabb7",
            "docstring": "\"\"\"\nMock the migrate_issue method and set the jira_url for the CLI.\n\nArguments:\n- cli: An instance of the CLI class.\n\nSide Effects:\n- Sets the return value of the migrate_issue method to \"AAP-test_migrate_success_print-0\".\n- Sets the jira_url attribute of the cli.jira instance to \"http://fake\".\n\"\"\"",
            "last_accessed": 1745437192
        }
    ],
    "jira_creator/tests/commands/test_unassign_cli.py": [
        {
            "sha1": "533a559251a3490c1ab9489908db9112d642703d",
            "docstring": "\"\"\"\nThis script defines two test functions: test_unassign_success and test_unassign_failure. \nEach test function mocks the behavior of unassigning an issue in a Jira system using a lambda function. \nThe test_unassign_success function simulates a successful unassignment by returning True, while test_unassign_failure simulates a failed unassignment by returning False. \nBoth functions then assert the presence of specific output messages in the captured stdout using capsys. \nThese tests are designed to validate the behavior of the unassign method in the provided CLI implementation.\n\"\"\"",
            "last_accessed": 1745437194
        },
        {
            "sha1": "30a31acea73b3d5f0a1f4c72fbb90ce5b99b1ecf",
            "docstring": "\"\"\"\nUnassign an issue in Jira successfully.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nSide Effects:\n- Modifies the unassign_issue method of the Jira object in the cli.\n\n\"\"\"",
            "last_accessed": 1745437195
        },
        {
            "sha1": "5d209199b4523b64396a0946c98b91d7c7385037",
            "docstring": "\"\"\"\nSimulates a failure scenario when trying to unassign an issue in Jira.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs.\n\nNo return value.\n\nSide Effects:\n- Modifies the unassign_issue method of the Jira object to always return False.\n\"\"\"",
            "last_accessed": 1745437201
        }
    ],
    "jira_creator/tests/commands/test_quarterly_connection.py": [
        {
            "sha1": "b52de84e64f7e3195f09ba5059ff80d599131ead",
            "docstring": "\"\"\"\nThis module contains unit tests for the quarterly connection report functionality in the CLI.\n\nThe tests include:\n- test_quarterly_connection_report_success: Tests the successful execution of the quarterly connection report.\n- test_quarterly_connection_report_no_issues: Tests the scenario where no issues are found for the quarterly connection report.\n- test_quarterly_connection_report_error: Tests the handling of QuarterlyConnectionError during the quarterly connection report.\n\nThese tests mock certain methods and classes using MagicMock and patch to isolate the functionality being tested.\n\"\"\"",
            "last_accessed": 1745437203
        },
        {
            "sha1": "70e1b5fc420a4a0d12175fa8e3202f5fb47966dc",
            "docstring": "\"\"\"\nGenerate a quarterly connection report successfully.\n\nArguments:\n- cli: An instance of a command-line interface (CLI) used to interact with the system.\n\nThis function mocks the _register_subcommands and _dispatch_command methods to generate a quarterly connection report successfully.\n\"\"\"",
            "last_accessed": 1745437205
        },
        {
            "sha1": "7c564b508d6eb1339f1002a0b60ac54831c05422",
            "docstring": "\"\"\"\nGenerates a quarterly connection report without any issues.\n\nArguments:\n- cli: An object representing the command-line interface.\n\nSide Effects:\n- Mocks the _register_subcommands and _dispatch_command methods.\n\n\"\"\"",
            "last_accessed": 1745437207
        },
        {
            "sha1": "3fba80d0c4df01e440882b40caefe002f4773d36",
            "docstring": "\"\"\"\nGenerates a quarterly connection report error for a given CLI.\n\nArguments:\n- cli (object): An object representing the CLI for which the report error will be generated.\n\nSide Effects:\n- Mocks the _register_subcommands and _dispatch_command methods internally.\n\n\"\"\"",
            "last_accessed": 1745437209
        }
    ],
    "jira_creator/tests/commands/test_vote_story_points_exception_cli.py": [
        {
            "sha1": "41fda9069b1d70de8e9edb59e1e6597797bc86a8",
            "docstring": "\"\"\"\nTest script to validate the behavior of the vote_story_points method in the cli module.\n\nThe test simulates an error scenario by mocking the vote_story_points method and raising a VoteStoryPointsError.\nIt asserts that the error message is present in the output when the method is called with specific arguments.\n\nThis script uses pytest for testing and unittest.mock for mocking the method behavior.\n\"\"\"",
            "last_accessed": 1745437210
        },
        {
            "sha1": "9d4092a9a46f184a4fb6991b502f6f7ee74558cf",
            "docstring": "\"\"\"\nSimulate an error when voting for story points in Jira.\n\nArguments:\n- cli: An instance of the CLI class.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- VoteStoryPointsError: Raised when simulating an error while voting for story points in Jira.\n\"\"\"",
            "last_accessed": 1745437211
        }
    ],
    "jira_creator/tests/commands/test_add_sprint_exception_cli.py": [
        {
            "sha1": "4da301f28cc920fe5918e71ff5386bc629a1c94c",
            "docstring": "\"\"\"\nThis script contains a unit test function test_add_sprint_exception to test the handling of an exception in the add_sprint method of a CLI application. The test mocks the add_to_sprint_by_name method using MagicMock to raise an AddSprintError exception. It then calls the add_sprint method with specific arguments and asserts that the exception is raised. The output is captured, and the presence of an expected failure message is checked. The test is designed to verify the behavior of handling exceptions in the add_sprint method.\n\"\"\"",
            "last_accessed": 1745437213
        },
        {
            "sha1": "29509d503e1bc93c94e2a29028667971c5a4b823",
            "docstring": "\"\"\"\nMock the add_to_sprint_by_name method to raise an exception.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- AddSprintError: Raised when the add_to_sprint_by_name method encounters an error.\n\"\"\"",
            "last_accessed": 1745437215
        }
    ],
    "jira_creator/tests/commands/test_ai_helper_cli.py": [
        {
            "sha1": "f663aa02d84f2f74de705c2bbcd3e1677c8c8f03",
            "docstring": "\"\"\"\nThis module contains unit tests for the AI helper command line interface (CLI) functionality.\nThe tests cover various aspects of the CLI AI helper, including command dispatching, error handling, and output processing.\n\nKey functions tested:\n- `call_function`: Verifies correct command dispatching.\n- `ask_ai_question`: Tests various scenarios including error handling, valid responses, and invalid JSON.\n- `clean_ai_output`: Ensures proper parsing of AI output.\n- `get_cli_command_metadata`: Validates the correct parsing of command metadata for CLI commands.\n\nThe tests utilize the `pytest` framework and include mocking of dependencies to isolate functionality and control test scenarios.\n\"\"\"",
            "last_accessed": 1745437218
        },
        {
            "sha1": "db6be01c0fbfe088940d659a26b9a37f3b03d70e",
            "docstring": "\"\"\"\nSimulates a test scenario for calling a function.\n\nArguments:\n    No arguments.\n\nReturns:\n    No return value.\n\n\"\"\"",
            "last_accessed": 1745437220
        },
        {
            "sha1": "df7649fc1342f8dd24e4317d0d53702fc96d7c15",
            "docstring": "\"\"\"\nExecute a test for an AI helper function using the provided command line interface (CLI).\n\nArguments:\n- cli (object): The command line interface object used for testing.\n\nExceptions:\n- Raises an Exception using pytest if an error occurs during the test execution.\n\"\"\"",
            "last_accessed": 1745437229
        },
        {
            "sha1": "f28596d60e8d5dd531e4f7e44bdecba9792bba84",
            "docstring": "\"\"\"\nParses CLI command metadata for a specific CLI.\n\nArguments:\n- cli (object): The Command Line Interface (CLI) object to parse metadata for.\n\n\"\"\"",
            "last_accessed": 1745437231
        },
        {
            "sha1": "935917a5ab17f57e804d2ce545556b2ad9cfcfe0",
            "docstring": "\"\"\"\nClean the output of an AI tool by parsing and converting it into a list of dictionaries.\n\nArguments:\n- raw_valid (str): A string containing JSON-formatted data outputted by an AI tool.\n\nReturn:\n- list: A list of dictionaries representing the parsed data extracted from the input string.\n\nExceptions: \n- None\n\"\"\"",
            "last_accessed": 1745437233
        },
        {
            "sha1": "68fed2d80194d073707880c7b759efcc98f86d29",
            "docstring": "\"\"\"\nSimulate an exception scenario in the CLI AI helper.\n\nArguments:\n- cli: An instance of the CLI to be tested.\n\nExceptions:\n- AIHelperError: Raised when there is an error fetching metadata.\n\nSide Effects:\n- Modifies the behavior of 'get_cli_command_metadata' to raise an exception.\n\nThe function tests the CLI AI helper by mocking the 'get_cli_command_metadata' function to raise an 'AIHelperError' exception. It then asserts that the exception is raised when the function is called with the provided mocks.\n\"\"\"",
            "last_accessed": 1745437235
        },
        {
            "sha1": "420d0f2e46a1ff0f51f4243d5bb285b2735b0b95",
            "docstring": "\"\"\"\nSimulate asking an AI question and handle error response.\n\nArguments:\n- mock_os_system: A MagicMock object mocking the os.system function.\n- mock_gtts: A MagicMock object mocking the Google Text-to-Speech function.\n\nExceptions: \nNone\n\"\"\"",
            "last_accessed": 1745437237
        },
        {
            "sha1": "301eb4e33d9c2364bda40b37b2df5cafb00ce1fe",
            "docstring": "\"\"\"\nSimulates asking an AI system a question without errors.\n\nArguments:\n- mock_os_system: MagicMock object for mocking the OS system.\n- mock_gtts: MagicMock object for mocking the Google Text-to-Speech service.\n\n\"\"\"",
            "last_accessed": 1745437239
        },
        {
            "sha1": "df02b470e3d2debf058733a11c92f704bb4da2c8",
            "docstring": "\"\"\"\nSimulates the steps for asking an AI question in a test environment.\n\nArguments:\n- mock_call_function: A MagicMock object representing a function call.\n- mock_os_system: A MagicMock object representing an OS system call.\n- mock_gtts: A MagicMock object representing Google Text-to-Speech.\n\nNo return value.\n\nSide Effects:\n- Initializes mock_client as a MagicMock object.\n- Initializes mock_ai_provider as a MagicMock object with the improve_text method returning a specific JSON string.\n\"\"\"",
            "last_accessed": 1745437241
        },
        {
            "sha1": "71b4ce110988d91d054d663501900e4de6194f3c",
            "docstring": "\"\"\"\nSimulate asking an AI question with empty steps.\n\nArguments:\n- mock_os_system: A MagicMock object representing the mocked os.system function.\n- mock_gtts: A MagicMock object representing the mocked gtts library.\n\n\"\"\"",
            "last_accessed": 1745437243
        },
        {
            "sha1": "d416746d5769e1e4cd307e4f8aa2317f2553e5cd",
            "docstring": "\"\"\"\nSimulates asking an AI question with invalid JSON input.\n\nArguments:\n- mock_os_system: MagicMock object for mocking the os.system function.\n- mock_gtts: MagicMock object for mocking the Google Text-to-Speech function.\n\nSide Effects:\n- Creates a MagicMock object for client simulation.\n- Creates a MagicMock object for AI provider simulation with a method to improve text.\n\n\"\"\"",
            "last_accessed": 1745437245
        },
        {
            "sha1": "7ed805fb9bf1d59e0bbf7b053fe389ec915fe12d",
            "docstring": "\"\"\"\nSimulate a successful test scenario for a CLI AI helper function.\n\nArguments:\n- mock_ask_ai_question: A mock object for asking AI questions.\n- mock_get_cli_command_metadata: A mock object for retrieving CLI command metadata.\n- cli: The CLI object used for testing.\n\nSide Effects:\n- Sets up mock return values for the dependencies to simulate a successful test scenario.\n\"\"\"",
            "last_accessed": 1745437247
        }
    ],
    "jira_creator/tests/commands/test_add_comment_with_text_cli.py": [
        {
            "sha1": "2615f609f63d0109f277c2f0048c938b53acbc37",
            "docstring": "\"\"\"\nThis script contains a unit test function test_add_comment_with_text that tests the add_comment method of a CLI class. It mocks dependencies using MagicMock from unittest.mock. The test verifies that the add_comment method correctly cleans and adds a comment to a Jira issue, and outputs a success message. \n\"\"\"",
            "last_accessed": 1745437249
        },
        {
            "sha1": "e012459ece57d6c2e9e85bf845a1811a68cd2bdf",
            "docstring": "\"\"\"\nAdds a comment with text using the provided CLI object.\n\nArguments:\n- cli (object): The CLI object containing the necessary methods and attributes.\n- capsys (object): The capsys object for capturing stdout and stderr outputs.\n\n\"\"\"",
            "last_accessed": 1745437250
        }
    ],
    "jira_creator/tests/commands/test_clone_issue_cli.py": [
        {
            "sha1": "c616d5479ac24a881c0c240697b99823b60f70ea",
            "docstring": "\"\"\"\nMocks the 'clone_issue' method in the 'cli.jira' object for testing purposes.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface).\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs during testing.\n\n\"\"\"",
            "last_accessed": 1745437252
        }
    ],
    "jira_creator/tests/commands/test_set_summary_cli.py": [
        {
            "sha1": "a6de95f10f9c5198011d8f7a092c0399bf4390da",
            "docstring": "\"\"\"\nSet a summary for a Jira issue using a mocked CLI.\n\nArguments:\n- cli: A mocked CLI object.\n- capsys: A fixture for capturing stdout and stderr outputs.\n\n\"\"\"",
            "last_accessed": 1745437253
        }
    ],
    "jira_creator/tests/commands/test_register_subcommands_cli.py": [
        {
            "sha1": "fa7b3d42d64ae22e7168983195f7eed65f26b34e",
            "docstring": "\"\"\"\nThis script defines a function test_register_subcommands_does_not_crash(cli) that tests the _register_subcommands method of a CLI class. It creates a dummy parser object using lambda functions to simulate the behavior of the add_parser and add_argument methods. The test function is designed to ensure that the _register_subcommands method does not crash when called with the dummy parser object.\n\"\"\"",
            "last_accessed": 1745437255
        },
        {
            "sha1": "53f93ab81a01d99b2aed500b39423db4c724a1b0",
            "docstring": "\"\"\"\nRegister subcommands for the CLI without crashing.\n\nArguments:\n- cli: An instance of the CLI class.\n\nSide Effects:\n- Modifies the subcommands of the CLI instance by registering them using the provided parser.\n\"\"\"",
            "last_accessed": 1745437257
        }
    ],
    "jira_creator/tests/commands/test_view_issue_cli.py": [
        {
            "sha1": "345c20d5f40287332dcf54a845f4560db4ca2012",
            "docstring": "\"\"\"\nThis script contains unit tests for the view_issue function in the cli module. It uses MagicMock to mock certain functionalities and pytest for testing exceptions. The tests validate the behavior of viewing an issue and handling exceptions when viewing an issue fails. The tests verify that the correct messages are printed and the expected functions are called with the appropriate arguments.\n\"\"\"",
            "last_accessed": 1745437258
        },
        {
            "sha1": "28dd1710448a0d2a6c2726c35bcd223bc72355a8",
            "docstring": "\"\"\"\nSimulate a test scenario for viewing an issue.\n\nArguments:\n- cli: An object representing the command line interface for testing.\n- capsys: An object to capture stdout and stderr during testing.\n\nSide Effects:\n- Initializes a dictionary 'blob' with key-value pairs representing issue details.\n\n\"\"\"",
            "last_accessed": 1745437260
        },
        {
            "sha1": "71cda115d372b03a4d4af54c82423d6a37f5a8ac",
            "docstring": "\"\"\"\nSimulate an exception when viewing an issue in Jira for testing purposes.\n\nArguments:\n- cli: The Jira command line interface object.\n- capsys: The pytest fixture for capturing stdout and stderr.\n\nExceptions:\n- ViewIssueError: Raised when there is a failure while viewing an issue in Jira.\n\n\"\"\"",
            "last_accessed": 1745437262
        }
    ],
    "jira_creator/tests/commands/test_create_editor_flow_cli.py": [
        {
            "sha1": "797f706c0af9d7e5e0004067f1e95f8372829b5d",
            "docstring": "\"\"\"\nThis script defines a test case for the 'test_create_editor' function. It mocks the 'create_issue' and 'improve_text' methods using MagicMock. It creates a temporary file, writes a description into it, sets arguments for the CLI command, and calls the 'create_issue' method with the provided arguments. After the test, it cleans up the temporary file.\n\"\"\"",
            "last_accessed": 1745437264
        },
        {
            "sha1": "3b2b0415c3ba29c51a94d5661c94742fcc9f8e30",
            "docstring": "\"\"\"\nMock methods related to creating an editor in a testing environment.\n\nArguments:\n- cli: A testing CLI object that allows mocking methods for creating an editor.\n\nSide Effects:\n- Mocks the 'create_issue' method of the Jira client to return a test value.\n- Mocks the 'improve_text' method of the AI provider to return a test value.\n\"\"\"",
            "last_accessed": 1745437266
        }
    ],
    "jira_creator/tests/commands/test_add_comment_editor_cli.py": [
        {
            "sha1": "6e3e404cfc91dd6c0b97ebd1b4f2ca4aa6df77a1",
            "docstring": "\"\"\"\nThis file contains unit test functions for testing the functionality of adding comments in a CLI application. \nIt includes tests for adding comments with an editor, handling AI exceptions, and ensuring proper method calls and exception handling. \nThe tests utilize mocking for various methods and services to isolate the functionality being tested. \n\"\"\"",
            "last_accessed": 1745437267
        },
        {
            "sha1": "6b75aa9a9b5de3a3a12ffb6b1de91e1445ad2f92",
            "docstring": "\"\"\"\nMock the 'add_comment' method and the 'improve_text' method for testing purposes.\n    \nArguments:\n- cli: An object representing the command-line interface.\n\nSide Effects:\n- Modifies the 'add_comment' method of the 'cli.jira' object.\n- Modifies the 'improve_text' method of the 'cli.ai_provider' object.\n\"\"\"",
            "last_accessed": 1745437269
        },
        {
            "sha1": "1315ee13360f2a6304580fccdde4505e354d543e",
            "docstring": "\"\"\"\nAdd a comment to the CLI using both an editor and AI, with exception handling.\n\nArguments:\n- cli: An instance of the CLI class.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n- AiError: Raised when the AI service fails.\n\nSide Effects:\n- Modifies the behavior of the AI provider's improve_text method.\n\n\"\"\"",
            "last_accessed": 1745437271
        }
    ],
    "jira_creator/tests/commands/test_set_priority_exception_cli.py": [
        {
            "sha1": "10e86fe2bae7a2d553ebb6366017ec8e39156192",
            "docstring": "\"\"\"\nThis script contains a unit test function named test_set_priority_error, which tests the set_priority method of a CLI class by mocking the set_priority method to raise a SetPriorityError exception. The test verifies that the exception is raised correctly and that the expected error message is printed. The test uses pytest and unittest.mock modules for testing and mocking functionalities.\n\"\"\"",
            "last_accessed": 1745437273
        },
        {
            "sha1": "fcae1257bd6bbd8ed1181477be70588a14adf85e",
            "docstring": "\"\"\"\nSimulate an exception when setting priority in Jira for testing purposes.\n\nArguments:\n- cli: An object representing the CLI (Command Line Interface) for Jira.\n- capsys: A fixture provided by pytest for capturing stdout and stderr outputs during testing.\n\nExceptions:\n- SetPriorityError: Raised when simulating a failure while setting priority in Jira.\n\nSide Effects:\n- Modifies the set_priority method of the Jira client to raise a SetPriorityError.\n\"\"\"",
            "last_accessed": 1745437275
        }
    ],
    "jira_creator/tests/commands/test_remove_flag_cli.py": [
        {
            "sha1": "330b9ba81f302fa269220e6c00659d6b5353161f",
            "docstring": "\"\"\"\nThis file contains test cases for the 'remove_flag' method in the 'cli' module. \nIt includes tests to check the successful removal of a flag and also to handle exceptions. \nThe tests utilize the 'MagicMock' class from the 'unittest.mock' module and 'pytest' for assertions. \nThe 'test_remove_flag' function mocks the 'remove_flag' method and asserts the output and response. \nThe 'test_remove_flag_exception' function mocks the 'remove_flag' method to raise an exception and verifies the exception handling. \n\"\"\"",
            "last_accessed": 1745437277
        },
        {
            "sha1": "c05154946e846401368a386475c430014eb5bf2a",
            "docstring": "\"\"\"\nSimulate the removal of a flag from a Jira instance using a mock method.\n\nArguments:\n- cli: An object representing the Jira client.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs.\n\nSide Effects:\n- Sets up a mock method for the remove_flag function in the Jira client object.\n\"\"\"",
            "last_accessed": 1745437278
        },
        {
            "sha1": "2294d0cd3b93dc90f981bc8634095ef633146940",
            "docstring": "\"\"\"\nMocks the 'remove_flag' method of a Jira client and sets it to raise an exception when called.\n\nArguments:\n- cli: Jira client object.\n- capsys: Pytest fixture for capturing stdout and stderr.\n\nExceptions:\n- Exception: Raised with message \"Failed\" when the 'remove_flag' method is called.\n\"\"\"",
            "last_accessed": 1745437281
        }
    ],
    "jira_creator/tests/commands/test_set_story_epic_cli.py": [
        {
            "sha1": "5b7a46ff45b1b4f594581819cf3c7eae83fabc23",
            "docstring": "\"\"\"\nThis file contains unit tests for the set_story_epic function in the CLI module.\n\nThe test_handle_success function tests the successful execution of set_story_epic by mocking the JIRA set_story_epic method and asserting the correct message output and function call arguments.\n\nThe test_set_story_epic_exception function tests the handling of SetStoryEpicError exception by mocking the JIRA set_story_epic method with a side effect and ensuring the exception is raised.\n\nBoth test functions utilize the pytest framework and mock objects for testing the CLI module functionality.\n\"\"\"",
            "last_accessed": 1745437282
        },
        {
            "sha1": "f50fa870d1910133a4b72a9d081ef8296155acb8",
            "docstring": "\"\"\"\nHandles the success case for a test scenario.\n\nArguments:\n- cli: An object representing the command line interface.\n- capsys: A fixture for capturing stdout and stderr outputs during the test.\n\nSide Effects:\n- Modifies the 'set_story_epic' attribute of the 'jira' object in the 'cli' object using MagicMock.\n\"\"\"",
            "last_accessed": 1745437285
        },
        {
            "sha1": "7ba87a8f0e0cc77984fe6011b3ea6681c953c343",
            "docstring": "\"\"\"\nSet a side effect for the mock 'set_story_epic' method of the 'cli.jira' object to raise a 'SetStoryEpicError' exception with message \"fail\".\n\"\"\"",
            "last_accessed": 1745437286
        }
    ],
    "jira_creator/tests/commands/test_list_prints_cli.py": [
        {
            "sha1": "46069e7400e7db8f154671a13e160437bec3928c",
            "docstring": "\"\"\"\nThis module contains tests for a CLI interface interacting with JIRA issues. It utilizes the unittest framework alongside MagicMock for mocking JIRA responses. \n\nKey components include:\n- A shared dictionary for base issue templates (`base_issue` and `base_issue_2`) that can be modified during tests.\n- A helper function `setup_cli_and_args` that prepares the CLI context and issue data based on provided parameters.\n- Several test functions (`test_list_print`, `test_list_reporter_print`, `test_list_with_filters`, `test_list_with_blocked_filter`, and `test_list_with_unblocked_filter`) that validate the behavior of the CLI when listing issues with various filters and conditions.\n\nThe tests assert expected outputs based on the mocked JIRA issue data and the specified arguments.\n\"\"\"",
            "last_accessed": 1745437290
        },
        {
            "sha1": "a1c05b2ef559d3e211d4a23f62e1b62c96e8bc47",
            "docstring": "\"\"\"\nSetup the Jira mock for the CLI.\n\nArguments:\n- cli (object): The CLI object to which the Jira mock will be assigned.\n- blocked (list): List of blocked items (default is None).\n- unblocked (list): List of unblocked items (default is None).\n- reporter (str): Name of the reporter (default is None).\n- status (str): Status of the items (default is None).\n- summary (str): Summary of the items (default is None).\n- func (function): Function to be executed (default is None).\n\nSide Effects:\n- Modifies the 'jira' attribute of the 'cli' object by assigning it a MagicMock object.\n\"\"\"",
            "last_accessed": 1745437293
        },
        {
            "sha1": "020d217cfa88318fc89e9cf39e6cde5f388bb325",
            "docstring": "\"\"\"\nPrint a list of issues using the provided CLI.\n\nArguments:\n- cli (object): The CLI object used to interact with the command-line interface.\n- capsys (object): The capsys object used to capture stdout and stderr outputs.\n\nSide Effects:\n- Modifies the behavior of the provided CLI object by listing the retrieved issues.\n\n\"\"\"",
            "last_accessed": 1745437295
        },
        {
            "sha1": "ccb6f2c13a3c18efc7d610d7615ad9807b78747a",
            "docstring": "\"\"\"\nPrint a list of reported issues.\n\nArguments:\n- cli: An object representing the command line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr outputs.\n\nSide Effects:\n- Modifies the summary for a test case.\n- Sets up command line arguments.\n- Retrieves a list of reported issues using the provided CLI object.\n\"\"\"",
            "last_accessed": 1745437297
        },
        {
            "sha1": "b4d891bfd00dc4cfcb6cdc0225146bab423a08cc",
            "docstring": "\"\"\"\nExecute a test for listing Jira issues with filters.\n\nArguments:\n- cli: An instance of the CLI (Command Line Interface) used for interacting with Jira.\n- capsys: Pytest fixture for capturing stdout and stderr output during testing.\n\nSide Effects:\n- Modifies the CLI configuration with specified status and function.\n- Sets up the return value of listing Jira issues to the provided issues.\n- Calls the list_issues method of the CLI instance.\n\nNote: This function is primarily designed for testing purposes and does not have a return value.\n\"\"\"",
            "last_accessed": 1745437299
        },
        {
            "sha1": "cce2ab4a30be7c75c102f0a520f5c25a0464cec5",
            "docstring": "\"\"\"\nFilter and list issues based on a blocked filter.\n\nArguments:\n- cli: An object representing the command-line interface.\n- capsys: A fixture provided by pytest to capture stdout and stderr.\n\nSide Effects:\n- Modifies the behavior of the command-line interface by setting up arguments with a blocked filter.\n- Calls the setup_cli_and_args function to configure the CLI arguments.\n- Sets the return value of cli.jira.list_issues to the provided issues.\n- Invokes the list_issues method of the CLI.\n\n\"\"\"",
            "last_accessed": 1745437301
        },
        {
            "sha1": "790cefd8877bd2d3c2210e51660dec2607c3d050",
            "docstring": "\"\"\"\nFilter and list Jira issues based on the unblocked status.\n\nArguments:\n- cli: An object representing the command-line interface for interacting with Jira.\n- capsys: A pytest fixture for capturing stdout and stderr output.\n\nSide Effects:\n- Modifies the behavior of the Jira CLI by setting up the appropriate arguments and filters.\n- Calls the 'list_issues' method of the Jira CLI to retrieve and display a list of filtered issues.\n\nNote: This function assumes the existence of 'setup_cli_and_args' and 'list_issues' methods within the 'cli' object.\n\"\"\"",
            "last_accessed": 1745437304
        }
    ],
    "jira_creator/tests/commands/test_set_status_exception_cli.py": [
        {
            "sha1": "7bd2024c33c047a63809b15774d0a509cbef6893",
            "docstring": "\"\"\"\nThis file contains a unit test function to test an exception scenario for the set_status method. The test mocks the set_status method to raise a SetStatusError and verifies that the appropriate error message is printed. The test function uses pytest for assertions and captures the output using capsys.\n\"\"\"",
            "last_accessed": 1745437306
        },
        {
            "sha1": "cce2db1e19689cbc3b8f1819057d8ccf91e78b4e",
            "docstring": "\"\"\"\nSet an exception for the set_status method to be raised when called.\n\nArguments:\n- cli: An object representing the CLI.\n- capsys: A fixture for capturing stdout and stderr outputs.\n\nExceptions:\n- SetStatusError: Raised when the set_status method encounters an error with the message \"bad status\".\n\"\"\"",
            "last_accessed": 1745437308
        }
    ],
    "jira_creator/tests/commands/test_edit_issue_fetch_fail_cli.py": [
        {
            "sha1": "543f93a322424320ff2f490dab8cd6ef9ffc3975",
            "docstring": "\"\"\"\nSimulates a failure scenario when fetching an issue description.\n\nArguments:\n- cli: A CLI object used to interact with Jira.\n\nExceptions:\n- FetchDescriptionError: Raised when there is a failure in fetching the issue description.\n\"\"\"",
            "last_accessed": 1745437309
        }
    ],
    "jira_creator/tests/commands/test_list_sprints_cli.py": [
        {
            "sha1": "15620fc4fe5212b52cc6af63f8fcdbd481f472d2",
            "docstring": "\"\"\"\nThis file contains unit tests for the list_sprints method in a CLI application. \nThe tests use the pytest framework along with unittest.mock to mock the behavior of the list_sprints method. \nThe test_list_sprints function tests the successful execution of list_sprints, while the test_list_sprints_exception function tests the exception handling when list_sprints raises an exception. \nBoth tests mock the list_sprints method and capture the output using capsys to perform assertions on the expected output.\n\"\"\"",
            "last_accessed": 1745437311
        },
        {
            "sha1": "b683a9d89e416f413a9740af669323b654da294b",
            "docstring": "\"\"\"\nMock the list_sprints method for testing purposes.\n\nArguments:\n- cli: The CLI object used to interact with Jira.\n- capsys: The built-in pytest fixture for capturing stdout and stderr.\n\nSide Effects:\n- Mocks the list_sprints method of the Jira CLI object to return a list of sprints [\"Sprint 1\", \"Sprint 2\"] for testing.\n\"\"\"",
            "last_accessed": 1745437313
        },
        {
            "sha1": "a9f471edecea7a634c3a760323a8e26865964b02",
            "docstring": "\"\"\"\nMock the list_sprints method to raise an exception when called.\n\nArgs:\n    cli: An object representing the CLI.\n    capsys: A fixture provided by pytest to capture stdout and stderr.\n\nExceptions:\n    Exception: Raised when the list_sprints method is called to simulate a failure.\n\"\"\"",
            "last_accessed": 1745437315
        }
    ],
    "jira_creator/tests/commands/test_validate_issue_cli.py": [
        {
            "sha1": "d5fd4fb8e2a727bbdc3837d859c4601c6534f66b",
            "docstring": "\"\"\"\nThis module contains unit tests for the CLI validation of Jira issues, specifically focusing on acceptance criteria and description validation. \n\nIt includes helper functions to generate common fields and cached data for testing purposes. The main functionality is tested through various test cases that ensure correct behavior when validating issue fields against expected standards.\n\nKey functions and classes:\n- `generate_fields`: Generates a dictionary of common fields for a Jira issue.\n- `generate_cached_data`: Creates a dictionary simulating cached validation data.\n- `test_load_cache_file_not_found`: Tests the behavior of loading a cache file that does not exist.\n- `test_acceptance_criteria_no_change_but_invalid`: Tests the validation of acceptance criteria when no changes are made but the criteria is invalid.\n- `test_acceptance_criteria_validation`: Validates acceptance criteria when the criteria is considered acceptable.\n- `test_description_no_change_but_invalid`: Tests the validation of descriptions when no changes are made but the description is invalid.\n- `test_cli_validate_issue`: Tests the CLI interface for validating Jira issues.\n\nThis module uses the `unittest.mock` library to mock dependencies and the behavior of external functions.\n\"\"\"",
            "last_accessed": 1745437322
        },
        {
            "sha1": "294efd09e75f6f646c98a7f533b7223b7eff5fa8",
            "docstring": "\"\"\"\nGenerate a dictionary with fields for a JIRA issue.\n\nArguments:\n- issue_key (str): The key of the JIRA issue.\n- summary (str): The summary of the JIRA issue (default is \"Test Summary\").\n- description (str): The description of the JIRA issue (default is \"Test Description\").\n- acceptance_criteria (str): The acceptance criteria of the JIRA issue (default is \"Test Acceptance Criteria\").\n\nReturn:\n- dict: A dictionary containing the JIRA fields for the issue.\n\nSide Effects:\n- Uses the EnvFetcher class to retrieve certain field values from the environment.\n\n\"\"\"",
            "last_accessed": 1745437324
        },
        {
            "sha1": "6278809cf93516c9352aa499e4463511ebee7ef5",
            "docstring": "\"\"\"\nGenerates cached data hashes based on input fields.\n\nArguments:\n- fields (dict): A dictionary containing various field values.\n- description_hash (str, optional): The hash value of the description field. Defaults to None.\n- summary_hash (str, optional): The hash value of the summary field. Defaults to None.\n- acceptance_criteria_hash (str, optional): The hash value of the acceptance criteria field. Defaults to None.\n- acceptance_criteria_value (str, optional): The value of the acceptance criteria field. Defaults to None.\n- description_value (str, optional): The value of the description field. Defaults to None.\n\nSide Effects:\n- Modifies the input hash values if they are None by calculating the hash of corresponding field values.\n\n\"\"\"",
            "last_accessed": 1745437328
        },
        {
            "sha1": "15920719810e82043333e8c4bc5cf12ccbf80c04",
            "docstring": "\"\"\"\nLoad cache from a file, returning an empty dictionary if the file doesn't exist.\n\nArguments:\n    No arguments.\n\nReturn:\n    dict: An empty dictionary representing the cache content.\n\nExceptions:\n    None\n\"\"\"",
            "last_accessed": 1745437330
        },
        {
            "sha1": "7a4596cc2c87e1a25686c1a5d10f5485890167f2",
            "docstring": "\"\"\"\nSimulate a test scenario where the acceptance criteria are not changed, but the provided data is invalid.\n\nArguments:\n- mock_load_cache: A mock object for loading cache data.\n- mock_save_cache: A mock object for saving cache data.\n\nSide Effects:\n- Calls the 'improve_text' method of a MagicMock object representing an AI provider with a return value of \"Needs Improvement\".\n\"\"\"",
            "last_accessed": 1745437332
        },
        {
            "sha1": "e991bf4694fe49d597b1a9e2c41ca03621818b49",
            "docstring": "\"\"\"\nValidate the acceptance criteria for a test case.\n\nArguments:\n- mock_save_cache: MagicMock object for saving cache data.\n- cli: Command Line Interface (CLI) object for interacting with the command line.\n- capsys: Pytest fixture for capturing stdout and stderr outputs.\n\nSide Effects:\n- Sets up a MagicMock object 'ai_provider' for AI text improvement with a return value of \"OK\".\n\"\"\"",
            "last_accessed": 1745437334
        },
        {
            "sha1": "bd5923e2e0ed3e1c8b2c35df9a9f5a4e78e2d227",
            "docstring": "\"\"\"\nSimulate a test scenario where a mock AI provider is used to improve text, returning \"Needs Improvement\".\n\nArguments:\n- mock_save_cache: A mock object for saving cache data.\n- cli: Command Line Interface object.\n- capsys: Pytest fixture capturing stdout and stderr output.\n\nSide Effects:\n- Calls the `improve_text` method on a mock AI provider object.\n\nReturn: N/A\n\"\"\"",
            "last_accessed": 1745437336
        },
        {
            "sha1": "6fb053dd54d6c67691ed505ecbd692bb46a838ea",
            "docstring": "\"\"\"\nValidate the CLI input for testing purposes.\n\nArguments:\n- cli: An instance of the CLI object.\n\nSide Effects:\n- Modifies the Args class attributes for issue_key, no_ai, and lint.\n\"\"\"",
            "last_accessed": 1745437338
        }
    ],
    "jira_creator/tests/commands/test_unblock_cli.py": [
        {
            "sha1": "f1546d985b924f78b95e38732127426c860baf83",
            "docstring": "\"\"\"\nThis file contains unit tests for the 'unblock' command of a CLI tool. \nIt includes two test functions: \n- test_unblock_command_success: tests the successful execution of the 'unblock' command.\n- test_unblock_command_failure: tests the failure scenario of the 'unblock' command when an UnBlockError is raised.\n\nThe tests use MagicMock and pytest to mock and assert the behavior of the CLI tool when unblocking an issue. \n\"\"\"",
            "last_accessed": 1745437340
        },
        {
            "sha1": "92bee837df9b8d87f671f669ee3babc64ab00678",
            "docstring": "\"\"\"\nSimulate a successful unblock command test.\n\nArguments:\n- cli: The command-line interface object for testing.\n- capsys: Pytest fixture to capture stdout and stderr.\n\nSide Effects:\n- Initializes a dictionary called 'called' to keep track of function calls.\n\"\"\"",
            "last_accessed": 1745437342
        },
        {
            "sha1": "0717e224b3d39049daf8b6f6d72370e3b841a3a9",
            "docstring": "\"\"\"\nSummary:\nUpdates a dictionary called `called` with the provided `issue_key`.\n\nArguments:\n- issue_key (str): The key of the issue to be updated in the `called` dictionary.\n\nSide Effects:\nModifies the `called` dictionary by adding or updating the key specified by `issue_key`.\n\"\"\"",
            "last_accessed": 1745437344
        },
        {
            "sha1": "302c41ab7e5c41bd3a0a5f84a7913266bde3e15e",
            "docstring": "\"\"\"\nExecute a test to validate the failure scenario of an unblock command.\n\nArguments:\n- cli (object): An instance of the command line interface (CLI) to interact with the application.\n- capsys (object): A fixture to capture stdout and stderr outputs during the test.\n\nSide Effects:\n- Executes the unblock command in the CLI to trigger a failure scenario for testing purposes.\n\"\"\"",
            "last_accessed": 1745437350
        },
        {
            "sha1": "3e8f2c1d47a791806c9e29b0dc8cd337bf9578b1",
            "docstring": "\"\"\"\nSimulate an unblock failure by raising a custom UnBlockError exception.\n\nArguments:\n- issue_key (str): A key representing the issue causing the unblock failure.\n\nExceptions:\n- UnBlockError: Raised to simulate an unblock failure.\n\n\"\"\"",
            "last_accessed": 1745437352
        }
    ],
    "jira_creator/tests/commands/test_edit_issue_exception_cli.py": [
        {
            "sha1": "5ec79e7c77a4cb89646bcb06ca07892eb189a6c6",
            "docstring": "\"\"\"\nUnit tests for the CLI issue editing functionality in a Jira integration.\n\nThis module contains test cases for editing issue descriptions and handling prompts\nin a Jira CLI application. It uses the pytest framework and mocks various components\nto simulate interactions with Jira and file handling.\n\nKey Features:\n- Tests for updating issue descriptions and handling exceptions.\n- Validation of fallback mechanisms when fetching prompts fails.\n- Mocking of Jira API calls and temporary file operations to isolate tests.\n- Assertions to ensure proper error messages are displayed in the CLI.\n\nTest Cases:\n- `test_edit_issue_update_exception`: Tests the behavior when updating an issue description fails.\n- `test_edit_description_raises_edit_description_error_inline`: Tests the editing of a description and the handling of exceptions.\n- `test_get_prompt_raises_and_falls_back`: Tests the fallback mechanism for getting prompts when there is an error.\n- `test_cli_edit_issue_raises_edit_issue_error`: Tests the behavior when editing an issue raises an error.\n\"\"\"",
            "last_accessed": 1745437356
        },
        {
            "sha1": "d4a1f2c157123bb3f178d43390031745290988bd",
            "docstring": "\"\"\"\nUpdates the description of an issue in Jira, mocking Jira internals for testing purposes.\n\nArguments:\n- mock_tmpfile: Mock object for temporary file handling.\n- mock_subprocess: Mock object for subprocess operations.\n- capsys: Pytest fixture for capturing stdout and stderr.\n- cli: Mock object representing the Jira command-line interface.\n\nExceptions:\n- UpdateDescriptionError: Raised when updating the description of the Jira issue fails.\n\n\"\"\"",
            "last_accessed": 1745437358
        },
        {
            "sha1": "fd494ef39352cde8d707f8ddb7074b8aa0eaf6fb",
            "docstring": "\"\"\"\nSummary:\nThis function tests that the 'EditDescriptionError' exception is raised inline when editing a description.\n\nArguments:\n- capsys: A pytest fixture that allows capturing stdout and stderr during the test execution.\n\nExceptions:\n- EditDescriptionError: Raised when an error occurs while editing the description.\n\nSide Effects:\n- Modifies the behavior of the 'tempfile.NamedTemporaryFile' and 'subprocess.call' functions to simulate an error scenario during description editing.\n\"\"\"",
            "last_accessed": 1745437360
        },
        {
            "sha1": "a6f10ff292dc3985fee36d66fddd661daa4b3845",
            "docstring": "\"\"\"\nThis function is a test case for a scenario where the 'get_issue_type' method of a fake Jira object raises a 'GetPromptError' exception with the message \"could not fetch type\". The test is using the 'capsys' fixture to capture stdout and stderr outputs.\n\"\"\"",
            "last_accessed": 1745437362
        },
        {
            "sha1": "ca413276c508bc881759ceaa31497087ac9534eb",
            "docstring": "\"\"\"\nRaises an EditIssueError when editing an issue via CLI.\n\nArguments:\n- cli: An instance of the CLI class.\n\nExceptions:\n- EditIssueError: Raised when an error occurs while editing an issue.\n\nSide Effects:\n- Modifies the state of the issue in the CLI.\n\n\"\"\"",
            "last_accessed": 1745437364
        }
    ],
    "jira_creator/tests/providers/test_bart_provider.py": [
        {
            "sha1": "1fc444fe99fdb5bd67cb5cbee335e9ceaa1f5a0f",
            "docstring": "\"\"\"\nThis file contains unit tests for the BARTProvider class in the bart_provider module. \nIt includes tests for the initialization of the BARTProvider, successful and failed text improvement scenarios. \nThe tests use mock objects and patches to simulate HTTP requests and responses. \n\"\"\"",
            "last_accessed": 1745437365
        },
        {
            "sha1": "3d72b74a2276d79fd42a704b0bdcf3ed2f1679ae",
            "docstring": "\"\"\"\nInitialize a BARTProvider object with a default URL and headers for BART API requests.\n\nArguments:\n    No arguments.\n\nReturns:\n    No return value.\n\nExceptions:\n    No exceptions raised.\n\"\"\"",
            "last_accessed": 1745437366
        },
        {
            "sha1": "080a17becf6e4ba00296ab1e9b8f74ae8efd853e",
            "docstring": "\"\"\"\nImproves the text by sending a mock POST request.\n\nArguments:\n- mock_post (MagicMock): A mock object representing a POST request function.\n\nSide Effects:\n- Modifies the mock_post function to return a mock response with status code 200 and JSON data {\"output\": \"Improved text\"}.\n\"\"\"",
            "last_accessed": 1745437368
        },
        {
            "sha1": "8105c0e923b873d4860bf1c99aafcb981a604724",
            "docstring": "\"\"\"\nImproves the text of a failed post request response.\n\nArguments:\n- mock_post (MagicMock): A MagicMock object representing the post request function.\n\nSide Effects:\n- Modifies the text of the response to \"Internal Server Error\" and sets the status code to 500.\n\"\"\"",
            "last_accessed": 1745437370
        }
    ],
    "jira_creator/tests/providers/test_providers_safe_mock.py": [
        {
            "sha1": "b37879d95dfe700001831044897890ab40c04cda",
            "docstring": "\"\"\"\nThis function tests the fallback behavior of the get_ai_provider function when an invalid provider name is provided. It verifies that the returned provider object implements the improve_text method and returns a string result.\n\"\"\"",
            "last_accessed": 1745437372
        }
    ],
    "jira_creator/tests/providers/test_openai_provider.py": [
        {
            "sha1": "229543aa2cf6011502481e654fac171718cdea3d",
            "docstring": "\"\"\"\nThis file contains unit tests for the OpenAIProvider class in the providers.openai_provider module. It includes tests for the improve_text method, which interacts with the OpenAI API to improve text inputs. The tests cover scenarios where the API call is successful and when it fails, asserting the expected behavior in each case.\n\"\"\"",
            "last_accessed": 1745437373
        },
        {
            "sha1": "67857e11549bfd8376561f4f40e8ee0a837a3ff7",
            "docstring": "\"\"\"\nThis function tests the OpenAI provider's text improvement functionality by mocking a response object with a status code of 200 and a JSON payload containing cleaned up text in the \"choices\" field.\n\"\"\"",
            "last_accessed": 1745437374
        },
        {
            "sha1": "7fba6308cc833748267e217d51c7eefd6de1be0b",
            "docstring": "\"\"\"\nImprove the text using the OpenAIProvider API, specifically the GPT-3.5 Turbo model.\n\nArguments:\n- No arguments.\n\nExceptions:\n- Raises an exception if there is a failure when calling the OpenAIProvider API.\n\nSide Effects:\n- Modifies the OpenAIProvider instance by setting the API key, model, and endpoint.\n\n\"\"\"",
            "last_accessed": 1745437377
        }
    ],
    "jira_creator/tests/providers/test_deepseek_provider.py": [
        {
            "sha1": "5453fa24cc1d435146c10be02f3d46a11d7bd496",
            "docstring": "\"\"\"\nThis file contains unit tests for the DeepSeekProvider class. It includes test cases for successful improvement of text, failure cases, and JSON decode error scenarios. The tests use MagicMock and patch from the unittest.mock module, as well as pytest for assertions. The DeepSeekProvider class is mocked to handle different responses from the improve_text method, such as successful improvement, server errors, and invalid JSON responses. Each test case verifies the expected behavior by asserting the results and checking for proper method calls or exceptions raised.\n\"\"\"",
            "last_accessed": 1745437378
        },
        {
            "sha1": "12c844e9edcdbd718f64c160f14d84b40125e57b",
            "docstring": "\"\"\"\nImproves text by sending a POST request and receiving a successful response.\n\nArguments:\n- mock_post (MagicMock): A MagicMock object representing a POST request.\n\nReturns:\n- None\n\nSide Effects:\n- Modifies the behavior of the mock_post object to return a successful response with an improved text message.\n\"\"\"",
            "last_accessed": 1745437381
        },
        {
            "sha1": "8105c0e923b873d4860bf1c99aafcb981a604724",
            "docstring": "\"\"\"\nImproves text in case of failure.\n\nArguments:\n- mock_post (Mock): A mock object representing a POST request.\n\nSide Effects:\n- Modifies the text of the mock response to \"Internal Server Error\" when the status code is 500.\n\"\"\"",
            "last_accessed": 1745437383
        },
        {
            "sha1": "b0f5e6fc52041a3b220fc59e980334403cd7ba71",
            "docstring": "\"\"\"\nSimulate a JSON decoding error when processing a response from a mocked POST request.\n\nArguments:\n- mock_post: A MagicMock object representing a mocked POST request.\n\nExceptions:\n- JSONDecodeError: Raised when there is an issue decoding the JSON response.\n\nSide Effects:\n- Modifies the behavior of the mock POST request response to simulate an invalid JSON response.\n\n\"\"\"",
            "last_accessed": 1745437387
        }
    ],
    "jira_creator/tests/providers/test_noop_provider.py": [
        {
            "sha1": "6bc74e184306ae13deb511872260e63d2d74c315",
            "docstring": "\"\"\"\nSummary:\nInitialize a NoAIProvider object and test that it returns the original text without any modifications.\n\nArguments:\n- No arguments.\n\nReturn:\nNo return value.\n\n\"\"\"",
            "last_accessed": 1745437388
        }
    ],
    "jira_creator/tests/providers/test_providers_all_paths.py": [
        {
            "sha1": "ab585ace63a21012f359abbeabade33edf3e44a6",
            "docstring": "\"\"\"\nThis file contains unit tests for the get_ai_provider function, which is responsible for retrieving AI providers based on the provider name provided. The tests cover different scenarios such as successful provider retrieval, failure cases, and handling of import errors. The tests use patching with unittest.mock.patch and pytest.raises to simulate failures and exceptions. The AI providers tested include OpenAIProvider, GPT4AllProvider, InstructLabProvider, BARTProvider, and DeepSeekProvider. In case of failures or import errors, the tests ensure that the appropriate exceptions are raised or handled gracefully. Additionally, the file imports necessary modules and classes from exceptions.exceptions and providers modules.\n\"\"\"",
            "last_accessed": 1745437390
        },
        {
            "sha1": "6637817f18c388d3e409a6e90eeb85b79c16f3cf",
            "docstring": "\"\"\"\nThis function tests the `get_ai_provider` function with the input parameter \"openai\". It asserts that the returned provider is an instance of the class `OpenAIProvider`.\n\"\"\"",
            "last_accessed": 1745437392
        },
        {
            "sha1": "427fa2ccb301501233e38d0beea9293d01dabe3d",
            "docstring": "\"\"\"\nThis function defines a test case for the GPT4All AI provider by creating a mock class called FailingGPT4AllProvider.\n\"\"\"\n\"\"\"",
            "last_accessed": 1745437393
        },
        {
            "sha1": "1c43cb748ef6f0b6b0afffe1cff4183c0038d930",
            "docstring": "\"\"\"\nInitialize the AiProviderError by raising an exception indicating a simulated failure to load GPT4All.\n\"\"\"",
            "last_accessed": 1745437394
        },
        {
            "sha1": "4dc77ba57b83dbac92a11552930211467d80a379",
            "docstring": "\"\"\"\nThis function defines a class named FailingInstructLab.\n\"\"\"",
            "last_accessed": 1745437396
        },
        {
            "sha1": "f9b5a5010ed245ed32129387a02d2fb9ef158d65",
            "docstring": "\"\"\"\nInitialize the AiProviderError exception.\n\nArguments:\n- self: the instance of the class.\n\nExceptions:\n- AiProviderError: an exception raised with the message \"\ud83d\udca5 boom\".\n\"\"\"",
            "last_accessed": 1745437397
        },
        {
            "sha1": "ddbad3405139078e99cc2384063580af04d18492",
            "docstring": "\"\"\"\nThis function tests the get_ai_provider function by verifying if the provider returned for \"bart\" is an instance of the BARTProvider class.\n\"\"\"",
            "last_accessed": 1745437398
        },
        {
            "sha1": "327b635fa41edac89bd4b1fda1f347bd2507c994",
            "docstring": "\"\"\"\nRetrieve the AI provider for DeepSeek and validate its type.\n\nArguments:\n- No arguments.\n\nReturn:\n- No return value.\n\nExceptions:\n- AssertionError is raised if the provider type is not DeepSeekProvider.\n\"\"\"",
            "last_accessed": 1745437400
        },
        {
            "sha1": "da3f400484909d08e827a0950a9a6162d9c6f76a",
            "docstring": "\"\"\"\nThis function is used to test the behavior of Python when an ImportError occurs during import of a module.\n\"\"\"",
            "last_accessed": 1745437401
        },
        {
            "sha1": "edd7f741ee46003e106eadb4e2d330cc80168250",
            "docstring": "\"\"\"\nRaises an ImportError with a message \"simulated import error\".\n\"\"\"",
            "last_accessed": 1745437403
        }
    ],
    "jira_creator/tests/providers/test_providers_init.py": [
        {
            "sha1": "7e6c0af88a1341ed8334edefa9f41cae7d26b6ec",
            "docstring": "\"\"\"\nGet the AI provider for a specific type and test its functionality with a \"noop\" provider.\n\nArguments:\n- provider (str): The type of AI provider to retrieve. In this case, it is set to \"noop\".\n\nReturn:\n- None\n\n\"\"\"",
            "last_accessed": 1745437405
        },
        {
            "sha1": "6ac92b3471044b3b8b53db384ab72bad1002b8c5",
            "docstring": "\"\"\"\nSummary:\nTest function to verify the fallback behavior of an AI provider when a specific provider is not available.\n\nArguments:\n- No arguments are passed to the function.\n\nReturn:\n- No return value.\n\n\"\"\"",
            "last_accessed": 1745437406
        }
    ],
    "jira_creator/tests/providers/test_instructlab_provider.py": [
        {
            "sha1": "21daa74a39d3362c60d844bd3242cbc64f0741e9",
            "docstring": "\"\"\"\nThis file contains unit tests for the InstructLabProvider class from the instructlab_provider module. \nIt includes tests for initializing the provider with default values, improving text successfully, and handling failure scenarios. \nThe tests use MagicMock and patch from the unittest.mock module, as well as pytest for assertions. \nThe improve_text method of the provider is tested for successful and failed responses from the server. \n\"\"\"",
            "last_accessed": 1745437408
        },
        {
            "sha1": "a67e628513e9070151848d1fee236297938a2ccb",
            "docstring": "\"\"\"\nInitialize an InstructLabProvider object with default values for url and model attributes.\n\nArguments:\n    No arguments.\n\nReturn:\n    No return value.\n\nSide Effects:\n    Initializes an InstructLabProvider object with url set to \"http://some/url\" and model set to \"hhhhhhhhhhhhh\".\n\"\"\"",
            "last_accessed": 1745437409
        },
        {
            "sha1": "c9134f9315f95074953c6524005ddea959bbac49",
            "docstring": "\"\"\"\nInitialize an InstructLabProvider object for testing purposes.\n\"\"\"",
            "last_accessed": 1745437410
        },
        {
            "sha1": "0e41d33edbeb9c8118ffbe9a426dde81c3fc346b",
            "docstring": "\"\"\"\nThis function initializes an instance of the InstructLabProvider class for testing purposes.\n\"\"\"",
            "last_accessed": 1745437411
        }
    ],
    "jira_creator/tests/providers/test_gpt4all_provider.py": [
        {
            "sha1": "cf7ed77026942cf71863b5ef7f41eb0333d3fcdf",
            "docstring": "\"\"\"\nThis module contains unit tests for the GPT4AllProvider class in the providers.gpt4all_provider module.\n\nThe tests include:\n- test_init_success: Tests the successful initialization of the GPT4AllProvider class.\n- test_init_failure: Tests the failure scenario during the initialization of the GPT4AllProvider class.\n- test_improve_text: Tests the improve_text method of the GPT4AllProvider class.\n\nThese tests use patching and mocking to simulate interactions with the GPT4All model and handle exceptions.\n\nAuthor: Unknown\n\"\"\"",
            "last_accessed": 1745437413
        },
        {
            "sha1": "83f0b7e1a41bf22aa69eff0bb2a078747213e2e1",
            "docstring": "\"\"\"\nInitialize a GPT4AllProvider instance with a specified model name and assert its correctness.\n\nArguments:\n- No arguments.\n\nReturn:\n- No return value.\n\nExceptions:\n- No exceptions are raised.\n\nSide Effects:\n- None.\n\"\"\"",
            "last_accessed": 1745437415
        },
        {
            "sha1": "16ed03be58e292125d148996bbd0fe3e90f3b9b4",
            "docstring": "\"\"\"\nInitialize GPT4AllProvider with a broken model and test initialization failure.\n\nArguments:\n    - No arguments.\n\nExceptions:\n    - GTP4AllError: Raised when the GPT4All provider encounters an error during initialization.\n\n\"\"\"",
            "last_accessed": 1745437417
        },
        {
            "sha1": "163c44603c922a19b7edc9669533a3a0a30a3931",
            "docstring": "\"\"\"\nSummary:\nFunction to test the improvement of text generated by a mock model.\n\nArguments:\n- No arguments.\n\nReturn:\n- None\n\n\"\"\"",
            "last_accessed": 1745437418
        }
    ],
    "jira_creator/tests/providers/test_openai_provider_fallback_handling.py": [
        {
            "sha1": "4a57d619fc4dc2cd3e71ab0e72e8820649b95323",
            "docstring": "\"\"\"\nThis script defines a test function to validate the response handling of the OpenAIProvider class. It mocks a response object with a status code of 200 and a JSON payload containing a message with content \"\u2713\". The function then replaces the requests.post method with a lambda function that returns the mock response. It creates an instance of the OpenAIProvider class, calls the improve_text method with dummy arguments, and asserts that the result is equal to \"\u2713\".\n\"\"\"",
            "last_accessed": 1745437420
        },
        {
            "sha1": "3bc6dbc416b5cf409249571fbf2dd207e4d879a9",
            "docstring": "\"\"\"\nHandles the response from OpenAI API after requesting text improvement.\n\nArguments:\n- No arguments.\n\nReturn:\n- The improved text as a string.\n\nExceptions:\n- No exceptions raised.\n\nSide Effects:\n- Modifies the behavior of the requests.post function to return a mock response.\n\n\"\"\"",
            "last_accessed": 1745437422
        }
    ],
    "jira_creator/tests/templates/test_template_loader.py": [
        {
            "sha1": "721516c6c2c468c0d06e1fe93630e72f1ba34a53",
            "docstring": "\"\"\"\nThis script contains unit tests for the TemplateLoader class. \nIt tests the functionality of parsing fields, rendering templates, handling file not found errors, and returning joined template strings. \nThe TemplateLoader class is responsible for loading and processing template files with specific fields and templates. \n\"\"\"",
            "last_accessed": 1745437424
        },
        {
            "sha1": "eac96677d65202eb6eccdaef271d0e4ae57bb223",
            "docstring": "\"\"\"\nParses fields from a template file.\n\nArguments:\n- tmp_path (path): Path to a temporary directory where the template file will be created.\n\nSide Effects:\n- Creates a template file with predefined fields in the specified temporary directory.\n\"\"\"",
            "last_accessed": 1745437426
        },
        {
            "sha1": "ed20b905477c516ae1d53e49e4311ab87b5a974e",
            "docstring": "\"\"\"\nRenders a template with a description field.\n\nArguments:\n- tmp_path (path): Path to a temporary directory where the template file will be created.\n\nSide Effects:\n- Creates a template file in the specified temporary directory with predefined content.\n\n\"\"\"",
            "last_accessed": 1745437427
        },
        {
            "sha1": "e3221a236a190e61b42bc76fb42c07b83c17b325",
            "docstring": "\"\"\"\nLoad a test template from a temporary directory and raise a FileNotFoundError if the template file is not found.\n\nArguments:\n- tmp_path (path): Path to a temporary directory where the template should be located.\n\nExceptions:\n- FileNotFoundError: Raised if the template file is not found in the specified directory.\n\"\"\"",
            "last_accessed": 1745437429
        },
        {
            "sha1": "9c7b07e93070d15aa01318d124f43c5172c49726",
            "docstring": "\"\"\"\nReturns a joined string from a template file.\n\nArguments:\n- tmp_path (path): Path to a temporary directory where the template file will be created.\n\nSide Effects:\n- Creates a template file with specified content in the temporary directory provided.\n\n\"\"\"",
            "last_accessed": 1745437431
        }
    ]
}